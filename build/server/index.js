var _a;
import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import { PassThrough } from "node:stream";
import { renderToPipeableStream } from "react-dom/server";
import { RemixServer, Meta, Links, Outlet, ScrollRestoration, Scripts, useLoaderData, useActionData, Form as Form$1, useLocation, Link as Link$1, useNavigate as useNavigate$1, useParams, useSearchParams, useNavigation, useFetcher, useRouteError } from "@remix-run/react";
import { isbot } from "isbot";
import { json, redirect as redirect$1 } from "@remix-run/node";
import "@shopify/shopify-app-remix/adapters/node";
import { shopifyApp, BillingInterval, AppDistribution, ApiVersion, LoginErrorType, boundary } from "@shopify/shopify-app-remix/server";
import { PrismaSessionStorage } from "@shopify/shopify-app-session-storage-prisma";
import { PrismaClient } from "@prisma/client";
import { restResources } from "@shopify/shopify-api/rest/admin/2025-01";
import { MongoClient, ObjectId } from "mongodb";
import crypto from "crypto";
import React, { createContext, useContext, useEffect, useLayoutEffect, useRef, useState, PureComponent, useCallback, useMemo, forwardRef, Component, memo, useId, useImperativeHandle, createElement, Children, isValidElement, createRef, useReducer } from "react";
import { themes, breakpointsAliases, themeNameDefault, createThemeClassName, themeDefault, getMediaConditions, themeNames } from "@shopify/polaris-tokens";
import { SelectIcon, ChevronDownIcon, ChevronUpIcon, AlertCircleIcon, XCircleIcon, SearchIcon, MenuHorizontalIcon, ArrowLeftIcon, SortDescendingIcon, SortAscendingIcon, ChevronLeftIcon, ChevronRightIcon, XIcon, AlertTriangleIcon, XSmallIcon, DeleteIcon, LayoutColumns3Icon, EditIcon, DuplicateIcon, InfoIcon, PlusIcon, MenuIcon, HomeIcon, ConfettiIcon, PersonIcon, FinanceIcon, AppsIcon, SettingsFilledIcon, NotificationIcon, ImportIcon, ExportIcon, FilterIcon, SortIcon, OrderIcon, ChartVerticalIcon, PageIcon } from "@shopify/polaris-icons";
import cr, { createPortal } from "react-dom";
import { toast, Toaster } from "react-hot-toast";
import { useNavigate } from "react-router-dom";
import { authenticatedFetch } from "@shopify/app-bridge-utils";
import { AppProvider as AppProvider$1 } from "@shopify/shopify-app-remix/react";
import "autoprefixer";
import isEqual from "react-fast-compare";
import { Transition, CSSTransition, TransitionGroup } from "react-transition-group";
const streamTimeout = 5e3;
function createReadableStreamFromReadable(readable) {
  return new ReadableStream({
    start(controller) {
      readable.on("data", (chunk) => {
        controller.enqueue(chunk);
      });
      readable.on("end", () => {
        controller.close();
      });
      readable.on("error", (error) => {
        controller.error(error);
      });
    }
  });
}
function addDocumentResponseHeaders(request, responseHeaders) {
  const url = new URL(request.url);
  if (url.pathname.startsWith("/resources/")) {
    responseHeaders.set("Cache-Control", "public, max-age=31536000, immutable");
  }
}
async function handleRequest(request, responseStatusCode, responseHeaders, remixContext) {
  try {
    addDocumentResponseHeaders(request, responseHeaders);
    const userAgent = request.headers.get("user-agent");
    const callbackName = isbot(userAgent ?? "") ? "onAllReady" : "onShellReady";
    console.log(
      `[${(/* @__PURE__ */ new Date()).toISOString()}] ${request.method} ${request.url}`
    );
    return new Promise((resolve, reject) => {
      const { pipe, abort } = renderToPipeableStream(
        /* @__PURE__ */ jsx(RemixServer, { context: remixContext, url: request.url }),
        {
          [callbackName]: () => {
            const body = new PassThrough();
            const stream = createReadableStreamFromReadable(body);
            responseHeaders.set("Content-Type", "text/html");
            resolve(
              new Response(stream, {
                headers: responseHeaders,
                status: responseStatusCode
              })
            );
            pipe(body);
          },
          onShellError(error) {
            console.error("Shell error:", error);
            reject(error);
          },
          onError(error) {
            responseStatusCode = 500;
            console.error("Render error:", error);
          }
        }
      );
      setTimeout(abort, streamTimeout + 1e3);
    });
  } catch (error) {
    console.error("Request handling error:", error);
    throw error;
  }
}
const entryServer = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: handleRequest
}, Symbol.toStringTag, { value: "Module" }));
function App$3() {
  return /* @__PURE__ */ jsxs("html", { children: [
    /* @__PURE__ */ jsxs("head", { children: [
      /* @__PURE__ */ jsx("meta", { charSet: "utf-8" }),
      /* @__PURE__ */ jsx("meta", { name: "viewport", content: "width=device-width,initial-scale=1" }),
      /* @__PURE__ */ jsx("link", { rel: "preconnect", href: "https://cdn.shopify.com/" }),
      /* @__PURE__ */ jsx(
        "link",
        {
          rel: "stylesheet",
          href: "https://cdn.shopify.com/static/fonts/inter/v4/styles.css"
        }
      ),
      /* @__PURE__ */ jsx("link", { rel: "icon", href: "/favicon.ico", type: "image/x-icon" }),
      /* @__PURE__ */ jsx("title", { children: "Spinorama" }),
      " ",
      /* @__PURE__ */ jsx(Meta, {}),
      /* @__PURE__ */ jsx(Links, {})
    ] }),
    /* @__PURE__ */ jsxs("body", { children: [
      /* @__PURE__ */ jsx(Outlet, {}),
      /* @__PURE__ */ jsx(ScrollRestoration, {}),
      /* @__PURE__ */ jsx(Scripts, {})
    ] })
  ] });
}
const route0 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: App$3
}, Symbol.toStringTag, { value: "Module" }));
if (process.env.NODE_ENV !== "production") {
  if (!globalThis.prismaGlobal) {
    globalThis.prismaGlobal = new PrismaClient();
  }
}
const prisma = globalThis.prismaGlobal ?? new PrismaClient();
const BILLING_PLANS = {
  MONTHLY: "Monthly Plan",
  ANNUAL: "Annual Plan"
};
const MONTLY_PLAN = "Monthly Subscription";
const ANNUAL_PLAN = "Annual Subscription";
const shopify = shopifyApp({
  apiKey: process.env.SHOPIFY_API_KEY,
  apiSecretKey: process.env.SHOPIFY_API_SECRET || "",
  apiVersion: ApiVersion.January25,
  scopes: (_a = process.env.SCOPES) == null ? void 0 : _a.split(","),
  appUrl: process.env.SHOPIFY_APP_URL || "",
  authPathPrefix: "/auth",
  sessionStorage: new PrismaSessionStorage(prisma),
  distribution: AppDistribution.AppStore,
  restResources,
  // billing: {
  //   [BILLING_PLANS.MONTHLY]: {
  //     amount: 5,
  //     currencyCode: "USD",
  //     interval: BillingInterval.Every30Days,
  //     name: "Monthly Subscription",
  //     price: 0,
  //     test: true,
  //     trialDays: 14,
  //     trialAmount: 0,
  //     trialCurrencyCode: "USD",
  //     trialInterval: BillingInterval.Every30Days,
  //     trialName: "Monthly Subscription Trial",
  //   },
  //   [BILLING_PLANS.ANNUAL]: {
  //     amount: 50,
  //     currencyCode: "USD",
  //     interval: BillingInterval.Annual,
  //     name: "Annual Subscription",
  //     price: 0,
  //     test: true,
  //     trialAmount: 0,
  //     trialCurrencyCode: "USD",
  //     trialInterval: BillingInterval.Annual,
  //     trialName: "Annual Subscription Trial",
  //     trialDays: 14,
  //   },
  // },
  billing: {
    [MONTLY_PLAN]: {
      amount: 5,
      currencyCode: "USD",
      interval: BillingInterval.Every30Days,
      name: "Monthly Subscription",
      price: 0,
      test: true
    },
    [ANNUAL_PLAN]: {
      amount: 50,
      currencyCode: "USD",
      interval: BillingInterval.Annual,
      name: "Annual Subscription",
      price: 0,
      test: true
    }
  },
  webhooks: {
    APP_UNINSTALLED: {
      deliveryMethod: "http",
      callbackUrl: "/webhooks"
    },
    APP_SUBSCRIPTIONS_UPDATE: {
      deliveryMethod: "http",
      callbackUrl: "/webhooks"
    },
    CUSTOMERS_DATA_REQUEST: {
      deliveryMethod: "http",
      callbackUrl: "/webhooks"
    },
    CUSTOMERS_REDACT: {
      deliveryMethod: "http",
      callbackUrl: "/webhooks"
    },
    SHOP_REDACT: {
      deliveryMethod: "http",
      callbackUrl: "/webhooks"
    }
  },
  hooks: {
    afterAuth: async ({ session }) => {
      shopify.registerWebhooks({ session });
    }
  },
  future: {
    unstable_newEmbeddedAuthStrategy: true,
    removeRest: true
  },
  // Fix X-Frame-Options issues by ensuring proper embedded app handling
  isEmbeddedApp: true,
  ...process.env.SHOP_CUSTOM_DOMAIN ? { customShopDomains: [process.env.SHOP_CUSTOM_DOMAIN] } : {}
});
function isClientSideNavigation(request) {
  const purpose = request.headers.get("purpose");
  const fetchDest = request.headers.get("sec-fetch-dest");
  const fetchMode = request.headers.get("sec-fetch-mode");
  return purpose === "prefetch" || fetchDest === "empty" || fetchMode === "navigate" || request.headers.get("x-remix-transition") === "true";
}
ApiVersion.January25;
shopify.addDocumentResponseHeaders;
const authenticate = shopify.authenticate;
shopify.unauthenticated;
const login = shopify.login;
shopify.registerWebhooks;
shopify.sessionStorage;
const shopify_server = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ANNUAL_PLAN,
  MONTLY_PLAN,
  authenticate,
  isClientSideNavigation,
  login
}, Symbol.toStringTag, { value: "Module" }));
const uri$2 = process.env.MONGODB_URI;
if (!uri$2) {
  console.error("Please add your MongoDB URI to .env file");
}
let client$2;
let clientPromise$1;
const options$1 = {
  maxPoolSize: 10,
  serverSelectionTimeoutMS: 5e3,
  socketTimeoutMS: 45e3
};
if (process.env.NODE_ENV === "development") {
  if (!globalThis._mongoClientPromise && uri$2) {
    client$2 = new MongoClient(uri$2, options$1);
    globalThis._mongoClientPromise = client$2.connect().then((client2) => {
      console.log("Connected to MongoDB (Development)");
      return client2;
    }).catch((err) => {
      console.error("Failed to connect to MongoDB (Development):", err);
      throw err;
    });
  }
  clientPromise$1 = globalThis._mongoClientPromise;
} else {
  if (uri$2) {
    client$2 = new MongoClient(uri$2, options$1);
    clientPromise$1 = client$2.connect().then((client2) => {
      console.log("Connected to MongoDB (Production)");
      return client2;
    }).catch((err) => {
      console.error("Failed to connect to MongoDB (Production):", err);
      throw err;
    });
  }
}
async function formatShopName$2(shopName) {
  let formattedName = shopName.replace(/\.myshopify\.com$/i, "");
  formattedName = formattedName.replace(/[/\\. "$*<>:|?]/g, "_");
  if (!/^[a-zA-Z]/.test(formattedName)) {
    formattedName = "shop_" + formattedName;
  }
  console.log(`Formatted shop name: ${shopName} -> ${formattedName}`);
  return formattedName;
}
async function connectToDatabase$1(shopName = null) {
  if (!clientPromise$1) {
    throw new Error(
      "MongoDB connection not initialized. Check your MONGODB_URI."
    );
  }
  try {
    const client2 = await clientPromise$1;
    const effectiveShopName = shopName || "wheel-of-wonders.myshopify.com";
    const dbName = formatShopName$2(effectiveShopName);
    console.log(
      `Connecting to database: ${dbName} (from shop: ${effectiveShopName})`
    );
    const db = client2.db(dbName);
    return { client: client2, db, dbName };
  } catch (error) {
    console.error("Error connecting to database:", error);
    throw error;
  }
}
async function getActiveCampaign(shopName = null) {
  try {
    const { db } = await connectToDatabase$1(shopName);
    const campaignsCollection = db.collection("campaigns");
    console.log("Looking for active campaign...");
    const activeCampaign = await campaignsCollection.findOne({
      status: "active"
    });
    if (activeCampaign) {
      console.log(
        "Found active campaign:",
        activeCampaign.name,
        "ID:",
        activeCampaign.id
      );
    } else {
      console.log("No active campaign found");
    }
    return activeCampaign;
  } catch (error) {
    console.error("Error fetching active campaign:", error);
    return null;
  }
}
async function getSubscriptionStatus(graphql) {
  const result = await graphql(
    `
      #graphql
      query Shop {
        app {
          installation {
            launchUrl
            activeSubscriptions {
              id
              name
              createdAt
              returnUrl
              status
              currentPeriodEnd
              test
            }
          }
        }
      }
    `,
    { variables: {} }
  );
  const res = await result.json();
  return res;
}
async function hasActiveSubscription(graphql, shopName, isDevelopment = false) {
  try {
    if (isDevelopment || process.env.NODE_ENV === "production") {
      console.log("🔧 Development mode: Simulating active subscription");
      return {
        hasSubscription: true,
        // Change to false to test no subscription
        plan: {
          name: "Development Plan",
          status: "ACTIVE",
          test: true
        },
        source: "development"
      };
    }
    const subscriptions = await getSubscriptionStatus(graphql);
    const activeSubscriptions = subscriptions.data.app.installation.activeSubscriptions;
    if (activeSubscriptions.length > 0) {
      console.log("✅ Found Shopify subscription:", activeSubscriptions[0]);
      return {
        hasSubscription: true,
        plan: activeSubscriptions[0],
        source: "shopify"
      };
    }
    try {
      const { db } = await connectToDatabase$1(shopName);
      const subscriptionCollection = db.collection("app_subscriptions");
      const localSubscription = await subscriptionCollection.findOne({
        shop: shopName,
        status: "active",
        expiresAt: { $gt: /* @__PURE__ */ new Date() }
      });
      if (localSubscription) {
        console.log("✅ Found local subscription record:", localSubscription);
        return {
          hasSubscription: true,
          plan: localSubscription,
          source: "local"
        };
      }
    } catch (dbError) {
      console.log("Could not check local subscription:", dbError.message);
    }
    console.log("❌ No active subscription found");
    return {
      hasSubscription: false,
      plan: null,
      source: "none"
    };
  } catch (error) {
    console.error("Error checking subscription status:", error);
    return {
      hasSubscription: false,
      plan: null,
      source: "error"
    };
  }
}
async function setLocalSubscriptionStatus(shopName, status, planName = "Monthly Plan") {
  try {
    const { db } = await connectToDatabase$1(shopName);
    const subscriptionCollection = db.collection("app_subscriptions");
    const subscriptionData = {
      shop: shopName,
      status,
      // 'active' or 'inactive'
      planName,
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date(),
      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1e3),
      // 30 days from now
      source: "manual"
      // or 'shopify', 'stripe', etc.
    };
    await subscriptionCollection.updateOne(
      { shop: shopName },
      { $set: subscriptionData },
      { upsert: true }
    );
    console.log(`✅ Set local subscription status for ${shopName}: ${status}`);
    return true;
  } catch (error) {
    console.error("Error setting local subscription status:", error);
    return false;
  }
}
async function createSubscriptionMetafield(graphql, hasSubscription, shopName = null) {
  var _a2, _b, _c;
  try {
    const value = hasSubscription ? "true" : "false";
    console.log(
      `🔄 Setting subscription metafield: ${value} for shop: ${shopName}`
    );
    const appIdQuery = await graphql(`
      #graphql
      query {
        currentAppInstallation {
          id
        }
        shop {
          id
        }
      }
    `);
    const appIdQueryData = await appIdQuery.json();
    const appInstallationID = appIdQueryData.data.currentAppInstallation.id;
    console.log("App Installation ID:", appInstallationID);
    const appMetafield = await graphql(
      `
        #graphql
        mutation CreateAppDataMetafield($metafields: [MetafieldsSetInput!]!) {
          metafieldsSet(metafields: $metafields) {
            metafields {
              id
              namespace
              key
              value
            }
            userErrors {
              field
              message
            }
          }
        }
      `,
      {
        variables: {
          metafields: [
            {
              namespace: "mtappsremixbillingdemo",
              key: "hasPlan",
              type: "boolean",
              value,
              ownerId: appInstallationID
            },
            {
              namespace: "mtappsremixbillingdemo",
              key: "lastChecked",
              type: "single_line_text_field",
              value: (/* @__PURE__ */ new Date()).toISOString(),
              ownerId: appInstallationID
            }
          ]
        }
      }
    );
    const data = await appMetafield.json();
    if (((_c = (_b = (_a2 = data.data) == null ? void 0 : _a2.metafieldsSet) == null ? void 0 : _b.userErrors) == null ? void 0 : _c.length) > 0) {
      console.error(
        "Metafield userErrors:",
        data.data.metafieldsSet.userErrors
      );
      return { success: false, errors: data.data.metafieldsSet.userErrors };
    }
    console.log(
      "✅ Successfully set subscription metafield:",
      data.data.metafieldsSet.metafields
    );
    return { success: true, metafields: data.data.metafieldsSet.metafields };
  } catch (error) {
    console.error("Error setting subscription metafield:", error);
    return { success: false, error: error.message };
  }
}
async function syncActiveCampaignToMetafields(graphql, campaignOrShopName) {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
  try {
    let activeCampaign = null;
    let shopName = null;
    if (typeof campaignOrShopName === "string") {
      shopName = campaignOrShopName;
      activeCampaign = await getActiveCampaign(shopName);
    } else if (campaignOrShopName && typeof campaignOrShopName === "object") {
      activeCampaign = campaignOrShopName;
      shopName = activeCampaign.shop || "wheel-of-wonders.myshopify.com";
    } else {
      console.log("Invalid parameter for syncActiveCampaignToMetafields");
      return { success: false, message: "Invalid parameter" };
    }
    const subscriptionStatus = await hasActiveSubscription(graphql, shopName);
    await createSubscriptionMetafield(
      graphql,
      subscriptionStatus.hasSubscription,
      shopName
    );
    if (!subscriptionStatus.hasSubscription) {
      console.log("⚠️ No active subscription - not syncing campaign data");
      return { success: false, message: "No active subscription" };
    }
    if (!activeCampaign) {
      activeCampaign = await getActiveCampaign(shopName);
    }
    if (!activeCampaign) {
      console.log("No active campaign found to sync to metafields");
      return { success: false, message: "No active campaign found" };
    }
    console.log(
      "🔄 Syncing active campaign to metafields:",
      activeCampaign.name
    );
    const layout = activeCampaign.layout || {};
    const content = activeCampaign.content || {};
    const rules = activeCampaign.rules || {};
    const floatingButtonHasText = layout.floatingButtonHasText === true ? "true" : "false";
    const floatingButtonPosition = layout.floatingButtonPosition || "bottomRight";
    const floatingButtonText = layout.floatingButtonText || "";
    const showFloatingButton = layout.showFloatingButton === true ? "true" : "false";
    const primaryColor = activeCampaign.primaryColor || "#ffc700";
    const secondaryColor = activeCampaign.secondaryColor || "#ffffff";
    const tertiaryColor = activeCampaign.tertiaryColor || "#000000";
    const wheelSectors = String(layout.wheelSectors || "six");
    const envSelection = layout.theme || "light";
    const versionSelection = layout.popupLayout || "bottom";
    const displayStyle = layout.displayStyle || "popup";
    const colorTone = activeCampaign.color || "dualTone";
    const logoImage = layout.logo || "";
    const landing = content.landing || {};
    const headlineText = landing.title || "TRY YOUR LUCK";
    const headlineChildText = landing.subtitle || "This is a demo of our Spin to Win";
    const showLandingSubtitle = landing.showSubtitle === true ? "true" : "false";
    const showEmail = landing.showEmail === true ? "true" : "false";
    const emailPlaceholder = landing.emailPlaceholder || "Enter your Email";
    const showPrivacyPolicy = landing.showPrivacyPolicy === true ? "true" : "false";
    const termCondText = landing.privacyPolicyText || "I accept the terms and conditions";
    const landingButtonText = landing.buttonText || "SPIN";
    const result = content.result || {};
    const headlineResultText = result.title || "CONGRATULATIONS";
    const showResultSubtitle = result.showSubtitle === true ? "true" : "false";
    const resultSubtitle = result.subtitle || "";
    const showResultButton = result.showButton === true ? "true" : "false";
    const resultButtonText = result.buttonText || "REDEEM NOW";
    const wheel = content.wheel || {};
    const wheelSectorsData = wheel.sectors || [];
    const copySameCode = wheel.copySameCode === true ? "true" : "false";
    const wheelSectorsJson = JSON.stringify(wheelSectorsData);
    const appearingRules = rules.appearingRules || {};
    const triggersJson = JSON.stringify({
      trigger_clicks_enabled: ((_a2 = appearingRules.clicksCount) == null ? void 0 : _a2.enabled) || false,
      trigger_clicks_value: ((_b = appearingRules.clicksCount) == null ? void 0 : _b.count) || 0,
      trigger_exitIntent_enabled: ((_c = appearingRules.exitIntent) == null ? void 0 : _c.enabled) || false,
      trigger_exitIntent_device: "desktop",
      trigger_inactivity_enabled: false,
      trigger_inactivity_seconds: 10,
      trigger_pageCount_enabled: ((_d = appearingRules.pageCount) == null ? void 0 : _d.enabled) || false,
      trigger_pageCount_pages: ((_e = appearingRules.pageCount) == null ? void 0 : _e.count) || 1,
      trigger_pageScroll_enabled: ((_f = appearingRules.pageScroll) == null ? void 0 : _f.enabled) || false,
      trigger_pageScroll_percentage: ((_g = appearingRules.pageScroll) == null ? void 0 : _g.percentage) || 50,
      trigger_timeDelay_enabled: ((_h = appearingRules.timeDelay) == null ? void 0 : _h.enabled) || false,
      trigger_timeDelay_seconds: ((_i = appearingRules.timeDelay) == null ? void 0 : _i.seconds) || 5
    });
    const appIdQuery = await graphql(`
      #graphql
      query {
        currentAppInstallation {
          id
        }
        shop {
          id
        }
      }
    `);
    const appIdQueryData = await appIdQuery.json();
    const appInstallationID = appIdQueryData.data.shop.id;
    console.log("Shop Installation ID:", appInstallationID);
    const metafieldsInput = [
      // Subscription status
      {
        namespace: "wheel-of-wonders",
        key: "hasActiveSubscription",
        type: "boolean",
        value: "true",
        ownerId: appInstallationID
      },
      // Layout metafields
      {
        namespace: "wheel-of-wonders",
        key: "floatingButtonHasText",
        type: "boolean",
        value: floatingButtonHasText,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "floatingButtonPosition",
        type: "single_line_text_field",
        value: floatingButtonPosition,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "floatingButtonText",
        type: "single_line_text_field",
        value: floatingButtonText,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "showFloatingButton",
        type: "boolean",
        value: showFloatingButton,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "displayStyle",
        type: "single_line_text_field",
        value: displayStyle,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "primaryColor",
        type: "single_line_text_field",
        value: primaryColor,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "secondaryColor",
        type: "single_line_text_field",
        value: secondaryColor,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "tertiaryColor",
        type: "single_line_text_field",
        value: tertiaryColor,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "activeCampaignId",
        type: "single_line_text_field",
        value: activeCampaign.id || "",
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "wheelSectors",
        type: "single_line_text_field",
        value: wheelSectors,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "wheelSectorsData",
        type: "json",
        value: wheelSectorsJson,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "envSelection",
        type: "single_line_text_field",
        value: envSelection,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "versionSelection",
        type: "single_line_text_field",
        value: versionSelection,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "colorTone",
        type: "single_line_text_field",
        value: colorTone,
        ownerId: appInstallationID
      },
      // Landing page metafields
      {
        namespace: "wheel-of-wonders",
        key: "headlineText",
        type: "single_line_text_field",
        value: headlineText,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "headlineChildText",
        type: "single_line_text_field",
        value: headlineChildText,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "emailPlaceholder",
        type: "single_line_text_field",
        value: emailPlaceholder,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "termCondText",
        type: "single_line_text_field",
        value: termCondText,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "landingButtonText",
        type: "single_line_text_field",
        value: landingButtonText,
        ownerId: appInstallationID
      },
      // Result page metafields
      {
        namespace: "wheel-of-wonders",
        key: "headlineResultText",
        type: "single_line_text_field",
        value: headlineResultText,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "resultSubtitle",
        type: "single_line_text_field",
        value: resultSubtitle,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "resultButtonText",
        type: "single_line_text_field",
        value: resultButtonText,
        ownerId: appInstallationID
      },
      // Default coupon result
      {
        namespace: "wheel-of-wonders",
        key: "couponResult",
        type: "number_integer",
        value: "2",
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "triggersData",
        type: "json",
        value: triggersJson,
        ownerId: appInstallationID
      }
    ];
    const filteredMetafields = metafieldsInput.filter(
      (mf) => mf.value !== void 0 && mf.value !== null && mf.value !== ""
    );
    const metafieldsMutation = await graphql(
      `
        mutation CreateAppDataMetafield($metafields: [MetafieldsSetInput!]!) {
          metafieldsSet(metafields: $metafields) {
            metafields {
              id
              namespace
              key
              value
            }
            userErrors {
              field
              message
            }
          }
        }
      `,
      { variables: { metafields: filteredMetafields } }
    );
    const data = await metafieldsMutation.json();
    if ((_l = (_k = (_j = data.data) == null ? void 0 : _j.metafieldsSet) == null ? void 0 : _k.userErrors) == null ? void 0 : _l.length) {
      console.error(
        "Metafield userErrors:",
        data.data.metafieldsSet.userErrors
      );
      return { success: false, errors: data.data.metafieldsSet.userErrors };
    }
    console.log("from subscription.server.js");
    console.log("✅ Successfully synced campaign to metafields :", data.data.metafieldsSet.metafields);
    return {
      success: true,
      metafields: data.data.metafieldsSet.metafields,
      campaignId: activeCampaign.id
    };
  } catch (error) {
    console.error("Error syncing campaign to metafields:", error);
    return { success: false, error: error.message };
  }
}
async function getDiscountCodes(graphql) {
  const result = await graphql(
    `
      #graphql
      query getDiscountCodes {
        discountNodes(first: 50) {
          edges {
            node {
              id
              discount {
                __typename
                ... on DiscountCodeBasic {
                  title
                  summary
                  codes(first: 10) {
                    edges {
                      node {
                        code
                      }
                    }
                  }
                }
                ... on DiscountCodeBxgy {
                  title
                  summary
                  codes(first: 10) {
                    edges {
                      node {
                        code
                      }
                    }
                  }
                }
                ... on DiscountCodeFreeShipping {
                  title
                  summary
                  codes(first: 10) {
                    edges {
                      node {
                        code
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    `,
    { variables: {} }
  );
  const res = await result.json();
  return res;
}
async function createCampaignLayoutMetafields(graphql, shopName) {
  var _a2, _b, _c;
  try {
    const activeCampaign = await getActiveCampaign(shopName);
    if (!activeCampaign) {
      console.log("No active campaign found to create layout metafields");
      return null;
    }
    console.log(
      "Creating layout metafields for campaign:",
      activeCampaign.name
    );
    const layout = activeCampaign.layout || {};
    const floatingButtonHasText = layout.floatingButtonHasText === true ? "true" : "false";
    const floatingButtonPosition = layout.floatingButtonPosition || "bottomRight";
    const floatingButtonText = layout.floatingButtonText || "";
    const showFloatingButton = layout.showFloatingButton === true ? "true" : "false";
    const wheelSectors = String(layout.wheelSectors || "six");
    const envSelection = layout.theme || "light";
    const versionSelection = layout.popupLayout || "bottom";
    const displayStyle = layout.displayStyle || "popup";
    const logoImage = layout.logo || "";
    const primaryColor = activeCampaign.primaryColor || "#ffc700";
    const secondaryColor = activeCampaign.secondaryColor || "#ffffff";
    const tertiaryColor = activeCampaign.tertiaryColor || "#000000";
    const colorTone = activeCampaign.color || "dualTone";
    const appIdQuery = await graphql(`
      #graphql
      query {
        currentAppInstallation {
          id
        }
      }
    `);
    const appInstallationID = (await appIdQuery.json()).data.currentAppInstallation.id;
    console.log("App Installation ID:", appInstallationID);
    const layoutMetafields = [
      {
        namespace: "wheel-of-wonders",
        key: "floatingButtonHasText",
        type: "boolean",
        value: floatingButtonHasText,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "floatingButtonPosition",
        type: "single_line_text_field",
        value: floatingButtonPosition,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "floatingButtonText",
        type: "single_line_text_field",
        value: floatingButtonText,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "showFloatingButton",
        type: "boolean",
        value: showFloatingButton,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "displayStyle",
        type: "single_line_text_field",
        value: displayStyle,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "wheelSectors",
        type: "single_line_text_field",
        value: wheelSectors,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "envSelection",
        type: "single_line_text_field",
        value: envSelection,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "versionSelection",
        type: "single_line_text_field",
        value: versionSelection,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "primaryColor",
        type: "single_line_text_field",
        value: primaryColor,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "secondaryColor",
        type: "single_line_text_field",
        value: secondaryColor,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "tertiaryColor",
        type: "single_line_text_field",
        value: tertiaryColor,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "colorTone",
        type: "single_line_text_field",
        value: colorTone,
        ownerId: appInstallationID
      },
      {
        namespace: "wheel-of-wonders",
        key: "activeCampaignId",
        type: "single_line_text_field",
        value: activeCampaign.id || "",
        ownerId: appInstallationID
      }
    ];
    const filteredMetafields = layoutMetafields.filter(
      (mf) => mf.value !== void 0 && mf.value !== null && mf.value !== ""
    );
    const metafieldsMutation = await graphql(
      `
        mutation CreateAppDataMetafield($metafields: [MetafieldsSetInput!]!) {
          metafieldsSet(metafields: $metafields) {
            metafields {
              id
              namespace
              key
              value
            }
            userErrors {
              field
              message
            }
          }
        }
      `,
      { variables: { metafields: filteredMetafields } }
    );
    const data = await metafieldsMutation.json();
    if ((_c = (_b = (_a2 = data.data) == null ? void 0 : _a2.metafieldsSet) == null ? void 0 : _b.userErrors) == null ? void 0 : _c.length) {
      console.error(
        "Layout metafield userErrors:",
        data.data.metafieldsSet.userErrors
      );
      return { success: false, errors: data.data.metafieldsSet.userErrors };
    }
    console.log(
      "Successfully created layout metafields:",
      data.data.metafieldsSet.metafields
    );
    return {
      success: true,
      metafields: data.data.metafieldsSet.metafields,
      campaignId: activeCampaign.id
    };
  } catch (error) {
    console.error("Error creating campaign layout metafields:", error);
    return { success: false, error: error.message };
  }
}
const Subscription_server = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  connectToDatabase: connectToDatabase$1,
  createCampaignLayoutMetafields,
  createSubscriptionMetafield,
  formatShopName: formatShopName$2,
  getActiveCampaign,
  getDiscountCodes,
  getSubscriptionStatus,
  hasActiveSubscription,
  setLocalSubscriptionStatus,
  syncActiveCampaignToMetafields
}, Symbol.toStringTag, { value: "Module" }));
async function action$s({ request }) {
  const { admin, session } = await authenticate.admin(request);
  try {
    const shopName = session.shop;
    const result = await createCampaignLayoutMetafields(
      admin.graphql,
      shopName
    );
    if (!result) {
      return json(
        { success: false, message: "No active campaign found" },
        { status: 404 }
      );
    }
    return json({
      success: true,
      message: "Campaign metafields updated successfully"
    });
  } catch (error) {
    console.error("Error updating campaign metafields:", error);
    return json({ success: false, message: error.message }, { status: 500 });
  }
}
async function loader$J() {
  return json({ message: "Use POST to update campaign metafields" });
}
const route1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$s,
  loader: loader$J
}, Symbol.toStringTag, { value: "Module" }));
async function action$r({ request }) {
  var _a2, _b, _c;
  console.log("=== Sync Campaign Metafields Route maha Called ===");
  const { session, admin } = await authenticate.admin(request);
  const shopName = session.shop;
  console.log("session");
  console.log("session check:", shopName);
  try {
    const { session: session2, admin: admin2 } = await authenticate.admin(request);
    const shopName2 = session2.shop;
    const graphql = admin2.graphql;
    const requestBody = await request.json();
    const { campaignId, clear } = requestBody;
    if (clear) {
      console.log("Clearing campaign metafields...");
      const appIdQuery = await graphql(`
        #graphql
        query {
          shop {
            id
          }
        }
      `);
      const appIdQueryData = await appIdQuery.json();
      const appInstallationID = appIdQueryData.data.shop.id;
      console.log("Shop Installation ID:", appInstallationID);
      const clearMetafields = [
        {
          namespace: "wheel-of-wonders",
          key: "activeCampaignId",
          type: "single_line_text_field",
          value: "",
          ownerId: appInstallationID
        },
        {
          namespace: "wheel-of-wonders",
          key: "showFloatingButton",
          type: "boolean",
          value: "false",
          ownerId: appInstallationID
        },
        {
          namespace: "wheel-of-wonders",
          key: "primaryColor",
          type: "single_line_text_field",
          value: "#ffc700",
          ownerId: appInstallationID
        },
        {
          namespace: "wheel-of-wonders",
          key: "secondaryColor",
          type: "single_line_text_field",
          value: "#ffffff",
          ownerId: appInstallationID
        },
        {
          namespace: "wheel-of-wonders",
          key: "tertiaryColor",
          type: "single_line_text_field",
          value: "#000000",
          ownerId: appInstallationID
        }
      ];
      const metafieldsMutation = await graphql(
        `
          mutation CreateAppDataMetafield($metafields: [MetafieldsSetInput!]!) {
            metafieldsSet(metafields: $metafields) {
              metafields {
                id
                namespace
                key
                value
              }
              userErrors {
                field
                message
              }
            }
          }
        `,
        { variables: { metafields: clearMetafields } }
      );
      console.log("Test metafield mutation executed");
      const data = await metafieldsMutation.json();
      console.log("Raw GraphQL response:", data);
      if (data.errors) {
        console.error("GraphQL top-level errors:", data.errors);
      }
      if ((_c = (_b = (_a2 = data.data) == null ? void 0 : _a2.metafieldsSet) == null ? void 0 : _b.userErrors) == null ? void 0 : _c.length) {
        console.error(
          "Metafield userErrors:",
          data.data.metafieldsSet.userErrors
        );
        return json({
          success: false,
          errors: data.data.metafieldsSet.userErrors
        });
      }
      return json({
        success: true,
        message: "Metafields cleared successfully",
        metafields: data.data.metafieldsSet.metafields
      });
    }
    if (!campaignId) {
      return json({ error: "Campaign ID is required" }, { status: 400 });
    }
    const { db } = await connectToDatabase$1(shopName2);
    const campaign = await db.collection("campaigns").findOne({
      id: campaignId,
      status: "active"
    });
    if (!campaign) {
      return json({ error: "Active campaign not found" }, { status: 404 });
    }
    console.log("Syncing campaign to metafields:", campaign.name);
    const syncResult = await syncActiveCampaignToMetafields(graphql, shopName2);
    if (syncResult.success) {
      return json({
        success: true,
        message: "Campaign synced to metafields successfully",
        campaignId: campaign.id,
        campaignName: campaign.name,
        metafields: syncResult.metafields
      });
    } else {
      return json(
        {
          success: false,
          error: syncResult.error || "Failed to sync campaign",
          errors: syncResult.errors
        },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("Error syncing campaign to metafields:", error);
    console.log("catch");
    return json(
      {
        success: false,
        error: error.message
      },
      { status: 500 }
    );
  }
}
async function loader$I({ request }) {
  console.log("=== Sync Campaign Metafields Route loader Called ===");
  const { session, admin } = await authenticate.admin(request);
  const shopName = session.shop;
  console.log("session");
  console.log("session check:", shopName);
  try {
    const { session: session2, admin: admin2 } = await authenticate.admin(request);
    const shopName2 = session2.shop;
    const graphql = admin2.graphql;
    const syncResult = await syncActiveCampaignToMetafields(graphql, "wheel-of-wonders");
    if (syncResult.success) {
      return json({
        success: true,
        message: "Active campaign synced to metafields successfully",
        campaignId: syncResult.campaignId,
        metafields: syncResult.metafields
      });
    } else {
      return json({
        success: false,
        error: syncResult.error || "No active campaign found or sync failed",
        errors: syncResult.errors
      });
    }
  } catch (error) {
    console.error("Error syncing active campaign:", error);
    return json(
      {
        success: false,
        error: error.message
      },
      { status: 500 }
    );
  }
}
function SyncCampaignMetafieldsRoute() {
  return null;
}
const route2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$r,
  default: SyncCampaignMetafieldsRoute,
  loader: loader$I
}, Symbol.toStringTag, { value: "Module" }));
const action$q = async ({ request }) => {
  console.log("Received app uninstalled webhook");
  try {
    const { topic, shop } = await authenticate.webhook(request);
    console.log(`Authenticated webhook: ${topic} for shop: ${shop}`);
    if (topic === "APP_UNINSTALLED" && shop) {
      await prisma.session.deleteMany({ where: { shop } });
      console.log(`Successfully deleted sessions for ${shop}`);
    }
    return new Response(null, { status: 200 });
  } catch (error) {
    console.error(`Error processing APP_UNINSTALLED webhook: ${error.message}`);
    return new Response(null, { status: 200 });
  }
};
const route3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$q
}, Symbol.toStringTag, { value: "Module" }));
const uri$1 = process.env.MONGODB_URI;
const client$1 = new MongoClient(uri$1);
function formatShopName$1(shopName) {
  if (!shopName) return "wheel-of-wonders";
  let formattedName = shopName.replace(/\.myshopify\.com$/i, "");
  formattedName = formattedName.replace(/[/\\. "$*<>:|?]/g, "_");
  if (!/^[a-zA-Z]/.test(formattedName)) {
    formattedName = "shop_" + formattedName;
  }
  return formattedName;
}
async function loader$H({ request }) {
  var _a2, _b, _c, _d;
  const headers2 = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "GET, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type"
  };
  if (request.method === "OPTIONS") {
    return new Response(null, {
      status: 204,
      headers: headers2
    });
  }
  try {
    const url = new URL(request.url);
    const shop = url.searchParams.get("shop");
    if (!shop) {
      return json(
        { error: "Shop parameter is required" },
        { status: 400, headers: headers2 }
      );
    }
    await client$1.connect();
    const dbName = formatShopName$1(shop);
    const db = client$1.db(dbName);
    const campaignsCollection = db.collection("campaigns");
    const activeCampaign = await campaignsCollection.findOne({
      status: "active"
    });
    if (!activeCampaign) {
      return json(
        { error: "No active campaign found" },
        { status: 404, headers: headers2 }
      );
    }
    const buttonData = {
      floatingButtonPosition: ((_a2 = activeCampaign.layout) == null ? void 0 : _a2.floatingButtonPosition) || "bottomRight",
      floatingButtonHasText: ((_b = activeCampaign.layout) == null ? void 0 : _b.floatingButtonHasText) === true,
      floatingButtonText: ((_c = activeCampaign.layout) == null ? void 0 : _c.floatingButtonText) || "SPIN & WIN",
      showFloatingButton: ((_d = activeCampaign.layout) == null ? void 0 : _d.showFloatingButton) !== false,
      primaryColor: activeCampaign.primaryColor || "#fe5300",
      id: activeCampaign.id
    };
    return json(buttonData, { headers: headers2 });
  } catch (error) {
    console.error("Error fetching active campaign:", error);
    return json(
      { error: "Failed to fetch active campaign" },
      { status: 500, headers: headers2 }
    );
  } finally {
    await client$1.close();
  }
}
const route4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  loader: loader$H
}, Symbol.toStringTag, { value: "Module" }));
async function handler$1(req, res) {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  res.setHeader("Content-Type", "application/json");
  res.setHeader("Cache-Control", "no-store, max-age=0");
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }
  if (req.method !== "POST") {
    return res.status(405).json({
      error: "Method not allowed",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    });
  }
  try {
    const uri2 = process.env.MONGODB_URI;
    if (!uri2) {
      return res.status(500).json({
        error: "MongoDB URI is not defined in environment variables",
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      });
    }
    const campaign = req.body;
    if (!campaign || !campaign.id) {
      return res.status(400).json({
        error: "Invalid campaign data - missing required fields",
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      });
    }
    console.log(
      "Direct Campaign Save: Attempting to save campaign:",
      campaign.id
    );
    const client2 = new MongoClient(uri2, {
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5e3,
      socketTimeoutMS: 45e3,
      retryWrites: true,
      retryReads: true
    });
    await client2.connect();
    const dbName = "wheel-of-wonders";
    const db = client2.db(dbName);
    const campaignsCollection = db.collection("campaigns");
    const existingCampaign = await campaignsCollection.findOne({
      id: campaign.id
    });
    let result;
    if (existingCampaign) {
      result = await campaignsCollection.updateOne(
        { id: campaign.id },
        { $set: { ...campaign, updatedAt: (/* @__PURE__ */ new Date()).toISOString() } }
      );
      console.log(
        `Direct Campaign Save: Updated campaign ${campaign.id}, matched: ${result.matchedCount}, modified: ${result.modifiedCount}`
      );
    } else {
      result = await campaignsCollection.insertOne({
        ...campaign,
        createdAt: campaign.createdAt || (/* @__PURE__ */ new Date()).toISOString(),
        updatedAt: (/* @__PURE__ */ new Date()).toISOString()
      });
      console.log(
        `Direct Campaign Save: Created new campaign ${campaign.id}, inserted ID: ${result.insertedId}`
      );
    }
    await client2.close();
    return res.status(200).json({
      success: true,
      campaign,
      operation: existingCampaign ? "updated" : "created",
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    });
  } catch (error) {
    console.error("Direct Campaign Save: Error saving campaign:", error);
    return res.status(500).json({
      error: error.message,
      stack: process.env.NODE_ENV === "development" ? error.stack : void 0,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    });
  }
}
const route5 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: handler$1
}, Symbol.toStringTag, { value: "Module" }));
async function loader$G({ request, context }) {
  try {
    const url = new URL(request.url);
    const shop = url.searchParams.get("shop");
    if (!shop) {
      return json({ error: "Shop parameter is required" }, { status: 400 });
    }
    const activeCampaign = await getActiveCampaign(shop);
    if (!activeCampaign) {
      return json({ error: "No active campaign found" }, { status: 404 });
    }
    return json(activeCampaign);
  } catch (error) {
    console.error("Error fetching active campaign:", error);
    return json({ error: "Failed to fetch active campaign" }, { status: 500 });
  }
}
const route6 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  loader: loader$G
}, Symbol.toStringTag, { value: "Module" }));
const action$p = async ({ request }) => {
  var _a2;
  console.log("CUSTOMERS_DATA_REQUEST webhook received");
  try {
    const shopifyHmac = request.headers.get("x-shopify-hmac-sha256");
    const secret = process.env.SHOPIFY_API_SECRET;
    if (!secret) {
      console.error("SHOPIFY_API_SECRET is not defined");
      return new Response("Server configuration error", { status: 500 });
    }
    if (!shopifyHmac) {
      console.error("Missing HMAC header");
      return new Response("Unauthorized - Missing HMAC", { status: 401 });
    }
    const body = await request.text();
    const calculatedHmac = crypto.createHmac("sha256", secret).update(body, "utf8").digest("base64");
    const hmacValid = crypto.timingSafeEqual(Buffer.from(calculatedHmac), Buffer.from(shopifyHmac));
    if (!hmacValid) {
      console.error("CUSTOMERS_DATA_REQUEST: HMAC verification failed");
      return new Response("Unauthorized - Invalid HMAC", { status: 401 });
    }
    console.log("CUSTOMERS_DATA_REQUEST: HMAC verification successful");
    const payload = JSON.parse(body);
    console.log("CUSTOMERS_DATA_REQUEST payload:", payload);
    console.log(`Processing CUSTOMERS_DATA_REQUEST for customer: ${(_a2 = payload.customer) == null ? void 0 : _a2.email}`);
    return new Response("CUSTOMERS_DATA_REQUEST processed successfully", { status: 200 });
  } catch (error) {
    console.error("CUSTOMERS_DATA_REQUEST error:", error);
    return new Response("Internal server error", { status: 500 });
  }
};
const loader$F = async () => {
  return new Response("Method not allowed", { status: 405 });
};
const route7 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$p,
  loader: loader$F
}, Symbol.toStringTag, { value: "Module" }));
async function loader$E({ request }) {
  const { session } = await authenticate.admin(request);
  try {
    const shopName = session.shop;
    console.log("Testing DB connection for shop:", shopName);
    const activeCampaign = await getActiveCampaign(shopName);
    if (!activeCampaign) {
      return json({
        success: false,
        message: "No active campaign found",
        dbConnected: true
      });
    }
    return json({
      success: true,
      dbConnected: true,
      campaign: {
        id: activeCampaign.id,
        name: activeCampaign.name,
        status: activeCampaign.status,
        layout: activeCampaign.layout || {},
        primaryColor: activeCampaign.primaryColor
      }
    });
  } catch (error) {
    console.error("Error testing DB connection:", error);
    return json(
      {
        success: false,
        dbConnected: false,
        message: error.message
      },
      { status: 500 }
    );
  }
}
const route8 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  loader: loader$E
}, Symbol.toStringTag, { value: "Module" }));
async function action$o({ request }) {
  if (request.method !== "POST") {
    return json({ error: "Method not allowed" }, { status: 405 });
  }
  try {
    const { admin, session } = await authenticate.admin(request);
    const { shop } = session;
    const { action: testAction, status } = await request.json();
    console.log(
      `🧪 Testing subscription action: ${testAction} for shop: ${shop}`
    );
    switch (testAction) {
      case "set_active":
        await setLocalSubscriptionStatus(shop, "active", "Test Plan");
        await createSubscriptionMetafield(admin.graphql, true, shop);
        return json({
          success: true,
          message: "Subscription set to active",
          shop
        });
      case "set_inactive":
        await setLocalSubscriptionStatus(shop, "inactive");
        await createSubscriptionMetafield(admin.graphql, false, shop);
        return json({
          success: true,
          message: "Subscription set to inactive",
          shop
        });
      case "check_status":
        const subscriptionStatus = await hasActiveSubscription(
          admin.graphql,
          shop
        );
        return json({
          success: true,
          subscriptionStatus,
          shop
        });
      default:
        return json({ error: "Invalid action" }, { status: 400 });
    }
  } catch (error) {
    console.error("Test subscription error:", error);
    return json(
      {
        success: false,
        error: error.message
      },
      { status: 500 }
    );
  }
}
async function loader$D() {
  return json({ message: "Use POST to test subscription functionality" });
}
const route9 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$o,
  loader: loader$D
}, Symbol.toStringTag, { value: "Module" }));
async function action$n({ request }) {
  const { admin } = await authenticate.admin(request);
  try {
    const formData = await request.formData();
    const hasPlan = formData.get("hasPlan") || "false";
    const position = formData.get("position") || "bottom-right";
    const result = await createSubscriptionMetafield(
      admin.graphql,
      hasPlan,
      position
    );
    return json({ success: true, message: "Metafields updated successfully" });
  } catch (error) {
    console.error("Error updating metafields:", error);
    return json({ success: false, message: error.message }, { status: 500 });
  }
}
async function loader$C() {
  return json({ message: "Use POST to update metafields" });
}
const route10 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$n,
  loader: loader$C
}, Symbol.toStringTag, { value: "Module" }));
async function loader$B({ request }) {
  try {
    const { admin, session } = await authenticate.admin(request);
    const { shop } = session;
    const appIdQuery = await admin.graphql(`
      #graphql
      query {
        currentAppInstallation {
          id
          metafields(first: 20) {
            edges {
              node {
                id
                namespace
                key
                value
                type
              }
            }
          }
        }
      }
    `);
    const appIdQueryData = await appIdQuery.json();
    const metafields = appIdQueryData.data.currentAppInstallation.metafields.edges.map(
      (edge) => edge.node
    );
    return json({
      success: true,
      shop,
      metafields
    });
  } catch (error) {
    console.error("Error fetching metafields:", error);
    return json({ success: false, message: error.message }, { status: 500 });
  }
}
const route11 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  loader: loader$B
}, Symbol.toStringTag, { value: "Module" }));
async function loader$A({ request }) {
  try {
    const url = new URL(request.url);
    const shop = url.searchParams.get("shop");
    if (!shop) {
      return json({ error: "Shop parameter is required" }, { status: 400 });
    }
    const headers2 = {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type"
    };
    if (request.method === "OPTIONS") {
      return new Response(null, {
        status: 200,
        headers: headers2
      });
    }
    const activeCampaign = await getActiveCampaign(shop);
    if (!activeCampaign) {
      return json(
        { error: "No active campaign found" },
        { status: 404, headers: headers2 }
      );
    }
    return json(activeCampaign, { headers: headers2 });
  } catch (error) {
    console.error("Error fetching active campaign:", error);
    return json({ error: "Failed to fetch active campaign" }, { status: 500 });
  }
}
const route12 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  loader: loader$A
}, Symbol.toStringTag, { value: "Module" }));
async function loader$z({ request }) {
  const { authenticate: authenticate2 } = await Promise.resolve().then(() => shopify_server);
  const { getSubscriptionStatus: getSubscriptionStatus2 } = await Promise.resolve().then(() => Subscription_server);
  try {
    const { admin, session } = await authenticate2.admin(request);
    const subscriptions = await getSubscriptionStatus2(admin.graphql);
    const activeSubscriptions = subscriptions.data.app.installation.activeSubscriptions;
    return json({
      success: true,
      activeSubscriptions,
      hasActiveSubscription: activeSubscriptions.length > 0
    });
  } catch (error) {
    console.error("Error fetching subscription status:", error);
    return json(
      {
        success: false,
        message: error.message || "An error occurred while fetching subscription status",
        hasActiveSubscription: false
      },
      { status: 500 }
    );
  }
}
const route13 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  loader: loader$z
}, Symbol.toStringTag, { value: "Module" }));
async function loader$y({ request }) {
  const headers2 = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "GET, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type",
    "Content-Type": "application/javascript"
  };
  const url = new URL(request.url);
  const appUrl = `${url.protocol}//${url.host}`;
  const script = `
    (function() {
      // Get the current shop domain
      const shopDomain = Shopify.shop || window.location.hostname;
      
      // Function to fetch active campaign data
      async function fetchActiveCampaign() {
        try {
          const response = await fetch("${appUrl}/api/direct-campaign-data?shop=" + shopDomain);
          
          if (!response.ok) {
            throw new Error('Failed to fetch campaign data');
          }
          
          const campaignData = await response.json();
          return campaignData;
        } catch (error) {
          console.error('Error fetching campaign data:', error);
          return null;
        }
      }
      
      // Function to create and append the button
      function createButton(data) {
        if (!data || data.showFloatingButton === false) return;
        
        // Create button container
        const button = document.createElement('div');
        button.id = 'spin-wheel-button';
        button.className = 'spin-wheel-position-' + data.floatingButtonPosition;
        
        // Create button inner
        const buttonInner = document.createElement('div');
        buttonInner.className = 'spin-wheel-button-inner';
        if (data.primaryColor) {
          buttonInner.style.backgroundColor = data.primaryColor;
        }
        
        // Create icon
        const icon = document.createElement('div');
        icon.className = 'spin-wheel-icon';
        icon.innerHTML = '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M20 12V20H4V12" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M22 7H2V12H22V7Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M12 20V7" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M12 7H7.5C6.83696 7 6.20107 6.73661 5.73223 6.26777C5.26339 5.79893 5 5.16304 5 4.5C5 3.83696 5.26339 3.20107 5.73223 2.73223C6.20107 2.26339 6.83696 2 7.5 2C11 2 12 7 12 7Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M12 7H16.5C17.163 7 17.7989 6.73661 18.2678 6.26777C18.7366 5.79893 19 5.16304 19 4.5C19 3.83696 18.7366 3.20107 18.2678 2.73223C17.7989 2.26339 17.163 2 16.5 2C13 2 12 7 12 7Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>';
        
        // Create text if needed
        if (data.floatingButtonHasText) {
          const text = document.createElement('span');
          text.className = 'spin-wheel-text';
          text.textContent = data.floatingButtonText || 'SPIN & WIN';
          buttonInner.appendChild(icon);
          buttonInner.appendChild(text);
        } else {
          buttonInner.appendChild(icon);
        }
        
        // Add click event
        button.addEventListener('click', function() {
          console.log('Spin wheel button clicked');
          // Add campaign trigger logic here
        });
        
        // Append to DOM
        button.appendChild(buttonInner);
        document.body.appendChild(button);
        
        // Add styles
        addStyles();
      }
      
      // Function to add styles
      function addStyles() {
        const styles = document.createElement('style');
        styles.textContent = \`
          /* Spin Wheel Button Styles */
          #spin-wheel-button {
            position: fixed;
            z-index: 9999;
            cursor: pointer;
            transition: all 0.3s ease;
          }
          
          /* Position Variants */
          .spin-wheel-position-bottomRight {
            bottom: 20px;
            right: 20px;
          }
          
          .spin-wheel-position-bottomLeft {
            bottom: 20px;
            left: 20px;
          }
          
          .spin-wheel-position-topRight {
            top: 20px;
            right: 20px;
          }
          
          .spin-wheel-position-topLeft {
            top: 20px;
            left: 20px;
          }
          
          .spin-wheel-position-centerRight {
            top: 50%;
            right: 20px;
            transform: translateY(-50%);
          }
          
          .spin-wheel-position-centerLeft {
            top: 50%;
            left: 20px;
            transform: translateY(-50%);
          }
          
          /* Button Inner Container */
          .spin-wheel-button-inner {
            display: flex;
            align-items: center;
            background-color: #fe5300;
            color: white;
            padding: 10px 16px;
            border-radius: 50px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s ease;
          }
          
          .spin-wheel-button-inner:hover {
            transform: scale(1.05);
          }
          
          /* Icon */
          .spin-wheel-icon {
            display: flex;
            align-items: center;
            justify-content: center;
          }
          
          /* Text */
          .spin-wheel-text {
            margin-left: 8px;
            font-weight: 600;
            font-size: 14px;
            white-space: nowrap;
          }
          
          /* Responsive styles */
          @media (max-width: 768px) {
            #spin-wheel-button {
              transform: scale(0.9);
            }
            
            .spin-wheel-position-bottomRight,
            .spin-wheel-position-bottomLeft {
              bottom: 15px;
            }
            
            .spin-wheel-position-topRight,
            .spin-wheel-position-topLeft {
              top: 15px;
            }
          }
          
          @media (max-width: 480px) {
            #spin-wheel-button {
              transform: scale(0.8);
            }
            
            .spin-wheel-text {
              font-size: 12px;
            }
          }
        \`;
        document.head.appendChild(styles);
      }
      
      // Initialize
      document.addEventListener('DOMContentLoaded', function() {
        fetchActiveCampaign().then(createButton);
      });
    })();
  `;
  return new Response(script, { headers: headers2 });
}
const route14 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  loader: loader$y
}, Symbol.toStringTag, { value: "Module" }));
async function action$m({ request }) {
  const { authenticate: authenticate2, billing } = await Promise.resolve().then(() => shopify_server);
  try {
    const { admin, session } = await authenticate2.admin(request);
    const body = await request.json();
    const { subscriptionId } = body;
    if (!subscriptionId) {
      return json({ error: "Subscription ID is required" }, { status: 400 });
    }
    const cancelResponse = await admin.graphql(
      `
      mutation cancelAppSubscription($id: ID!) {
        appSubscriptionCancel(id: $id) {
          appSubscription {
            id
            status
          }
          userErrors {
            field
            message
          }
        }
      }
    `,
      {
        variables: {
          id: subscriptionId
        }
      }
    );
    const responseJson = await cancelResponse.json();
    if (responseJson.errors) {
      return json(
        {
          success: false,
          message: responseJson.errors[0].message
        },
        { status: 400 }
      );
    }
    if (responseJson.data.appSubscriptionCancel.userErrors.length > 0) {
      return json(
        {
          success: false,
          message: responseJson.data.appSubscriptionCancel.userErrors[0].message
        },
        { status: 400 }
      );
    }
    return json({
      success: true,
      message: "Subscription cancelled successfully",
      subscription: responseJson.data.appSubscriptionCancel.appSubscription
    });
  } catch (error) {
    console.error("Billing cancellation error:", error);
    return json(
      {
        success: false,
        message: error.message || "An error occurred while cancelling your subscription"
      },
      { status: 500 }
    );
  }
}
async function loader$x() {
  return json({ message: "Use POST to cancel a subscription" });
}
const route15 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$m,
  loader: loader$x
}, Symbol.toStringTag, { value: "Module" }));
async function action$l({ request }) {
  try {
    const { shopifyApp: shopifyApp2 } = await Promise.resolve().then(() => shopify_server);
    const data = await request.json();
    const { planName, returnUrl, isTest = false } = data;
    if (!planName) {
      return json({ success: false, message: "Plan name is required" });
    }
    try {
      const { session } = await shopifyApp2.authenticate.admin(request);
      if (!session) {
        return json({
          success: false,
          requiresAuth: true,
          message: "Authentication required"
        });
      }
      const billingUrl = await shopifyApp2.billing.request({
        session,
        plan: planName,
        isTest,
        returnUrl: returnUrl || `https://${session.shop}/admin/apps`
      });
      return json({
        success: true,
        confirmationUrl: billingUrl
      });
    } catch (authError) {
      console.error("Billing API - Authentication error:", authError);
      return json({
        success: false,
        requiresAuth: true,
        message: "Authentication failed. Please sign in again.",
        error: authError.message
      });
    }
  } catch (error) {
    console.error("Billing API - Error:", error);
    return json({
      success: false,
      message: "Failed to create subscription",
      error: error.message
    });
  }
}
async function loader$w() {
  return json({ message: "POST requests only" }, { status: 405 });
}
const route16 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$l,
  loader: loader$w
}, Symbol.toStringTag, { value: "Module" }));
async function handler(req, res) {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  res.setHeader("Content-Type", "application/json");
  res.setHeader("Cache-Control", "no-store, max-age=0");
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }
  try {
    const uri2 = process.env.MONGODB_URI;
    if (!uri2) {
      return res.status(500).json({
        connected: false,
        error: "MongoDB URI is not defined in environment variables",
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      });
    }
    console.log("Direct DB Test: Attempting to connect to MongoDB...");
    const client2 = new MongoClient(uri2, {
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5e3,
      socketTimeoutMS: 45e3,
      retryWrites: true,
      retryReads: true
    });
    await client2.connect();
    const dbName = "wheel-of-wonders";
    const db = client2.db(dbName);
    const collections = await db.listCollections().toArray();
    await client2.close();
    return res.status(200).json({
      connected: true,
      dbName,
      shop: "wheel-of-wonders.myshopify.com",
      collections: collections.map((c) => c.name),
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    });
  } catch (error) {
    console.error("Direct DB Test: Error connecting to MongoDB:", error);
    return res.status(500).json({
      connected: false,
      error: error.message,
      stack: process.env.NODE_ENV === "development" ? error.stack : void 0,
      timestamp: (/* @__PURE__ */ new Date()).toISOString()
    });
  }
}
const route17 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: handler
}, Symbol.toStringTag, { value: "Module" }));
async function loader$v({ request }) {
  var _a2, _b;
  try {
    console.log("🔍 Authenticating admin...");
    const { admin } = await authenticate.admin(request);
    console.log("✅ Authenticated. Sending GraphQL query...");
    const response = await admin.graphql(`
      query getDiscountCodes {
        discountNodes(first: 50) {
          edges {
            node {
              id
              discount {
                __typename
                ... on DiscountCodeBasic {
                  title
                  summary
                  codes(first: 10) {
                    edges {
                      node {
                        code
                      }
                    }
                  }
                }
                ... on DiscountCodeBxgy {
                  title
                  summary
                  codes(first: 10) {
                    edges {
                      node {
                        code
                      }
                    }
                  }
                }
                ... on DiscountCodeFreeShipping {
                  title
                  summary
                  codes(first: 10) {
                    edges {
                      node {
                        code
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      `);
    const data = await response.json();
    console.log("📦 GraphQL response:", data);
    if (data.errors) {
      console.error("❌ GraphQL errors:", data.errors);
      return json(
        { codes: [], error: "Failed to fetch discount codes" },
        { status: 500 }
      );
    }
    const codes = [];
    if ((_b = (_a2 = data.data) == null ? void 0 : _a2.discountNodes) == null ? void 0 : _b.edges) {
      data.data.discountNodes.edges.forEach((edge) => {
        var _a3;
        const discount = edge.node.discount;
        if (discount && ((_a3 = discount.codes) == null ? void 0 : _a3.edges)) {
          discount.codes.edges.forEach((codeEdge) => {
            if (codeEdge.node.code) {
              codes.push({
                id: edge.node.id,
                code: codeEdge.node.code,
                title: discount.title || "N/A",
                summary: discount.summary || "N/A",
                type: discount.__typename || "Unknown"
              });
            }
          });
        }
      });
    }
    console.log(`Found ${codes.length} discount codes`);
    return json({
      codes,
      count: codes.length,
      success: true
    });
  } catch (error) {
    console.error("💥 Error in loader:", error);
    console.error("📜 Stack trace:", error.stack);
    return json(
      { codes: [], error: error.message, success: false },
      { status: 500 }
    );
  }
}
const route18 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  loader: loader$v
}, Symbol.toStringTag, { value: "Module" }));
const uri = process.env.MONGODB_URI;
if (!uri) {
  console.error("Please add your MongoDB URI to .env file");
}
let client;
let clientPromise;
let cachedShopName = null;
const options = {
  maxPoolSize: 10,
  serverSelectionTimeoutMS: 5e3,
  socketTimeoutMS: 45e3
};
if (process.env.NODE_ENV === "development") {
  if (!globalThis._mongoClientPromise && uri) {
    client = new MongoClient(uri, options);
    globalThis._mongoClientPromise = client.connect().then((client2) => {
      console.log("Connected to MongoDB (Development)");
      return client2;
    }).catch((err) => {
      console.error("Failed to connect to MongoDB (Development):", err);
      throw err;
    });
  }
  clientPromise = globalThis._mongoClientPromise;
} else {
  if (uri) {
    client = new MongoClient(uri, options);
    clientPromise = client.connect().then((client2) => {
      console.log("Connected to MongoDB (Production)");
      return client2;
    }).catch((err) => {
      console.error("Failed to connect to MongoDB (Production):", err);
      throw err;
    });
  }
}
function formatShopName(shopName) {
  if (!shopName) return "shopify-campaigns";
  let formattedName = shopName.replace(/\.myshopify\.com$/i, "");
  formattedName = formattedName.replace(/[/\\. "$*<>:|?]/g, "_");
  if (!/^[a-zA-Z]/.test(formattedName)) {
    formattedName = "shop_" + formattedName;
  }
  console.log(`Formatted shop name: ${shopName} -> ${formattedName}`);
  return formattedName;
}
function setShopName(shopName) {
  cachedShopName = shopName;
}
function getShopName() {
  return cachedShopName;
}
async function connectToDatabase(shopName = null) {
  try {
    if (!clientPromise) throw new Error("No MONGODB_URI");
    const client2 = await clientPromise;
    const dbName = formatShopName(shopName || cachedShopName || "default");
    const db = client2.db(dbName);
    let isConnected = false;
    try {
      await db.admin().ping();
      isConnected = true;
    } catch (e) {
      console.warn("Mongo ping failed:", e);
    }
    return { client: client2, db, dbName, isConnected };
  } catch (error) {
    console.error("Database connection error:", error);
    throw error;
  }
}
const mongodb_server = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  connectToDatabase,
  getShopName,
  setShopName
}, Symbol.toStringTag, { value: "Module" }));
async function loader$u({ request }) {
  var _a2, _b;
  try {
    let shopName = null;
    try {
      const url2 = new URL(request.url);
      shopName = url2.searchParams.get("shop") || request.headers.get("x-shopify-shop-domain") || getShopName() || "wheel-of-wonders.myshopify.com";
    } catch (error) {
      console.error("Error getting shop name:", error);
      return json({ error: "Invalid shop name" }, { status: 400 });
    }
    const url = new URL(request.url);
    const visitorId = url.searchParams.get("visitorId") || "anonymous";
    const currentUrl = url.searchParams.get("currentUrl") || "";
    const isNewVisitor = url.searchParams.get("isNewVisitor") === "true";
    const pageCount = Number.parseInt(
      url.searchParams.get("pageCount") || "1",
      10
    );
    const deviceType = url.searchParams.get("deviceType") || "desktop";
    const { db } = await connectToDatabase(shopName);
    const campaigns = await db.collection("campaigns").find({
      shop: shopName,
      status: "active"
    }).toArray();
    if (!campaigns || campaigns.length === 0) {
      return json({
        success: false,
        message: "No active campaigns found",
        shop: shopName
      });
    }
    console.log(
      `Found ${campaigns.length} active campaigns for shop: ${shopName}`
    );
    const eligibleCampaigns = campaigns.filter((campaign) => {
      var _a3, _b2, _c, _d;
      if ((_b2 = (_a3 = campaign.rules) == null ? void 0 : _a3.pageTargeting) == null ? void 0 : _b2.enabled) {
        const targetUrls = campaign.rules.pageTargeting.urls || [];
        if (targetUrls.length > 0 && !targetUrls.some((url2) => currentUrl.includes(url2))) {
          return false;
        }
      }
      if ((_d = (_c = campaign.rules) == null ? void 0 : _c.displayFrequency) == null ? void 0 : _d.enabled) {
        const visitorType = campaign.rules.displayFrequency.visitorType;
        if (visitorType === "new" && !isNewVisitor || visitorType === "return" && isNewVisitor) {
          return false;
        }
      }
      return true;
    });
    if (eligibleCampaigns.length === 0) {
      return json({
        success: false,
        message: "No eligible campaigns found based on rules",
        shop: shopName
      });
    }
    const campaignToServe = eligibleCampaigns[0];
    const lastView = await db.collection("campaign_views").findOne({
      campaignId: campaignToServe.id,
      visitorId
    });
    if (lastView && ((_b = (_a2 = campaignToServe.rules) == null ? void 0 : _a2.displayFrequency) == null ? void 0 : _b.enabled)) {
      const frequency = campaignToServe.rules.displayFrequency.frequency;
      const lastViewTime = new Date(lastView.timestamp);
      const now = /* @__PURE__ */ new Date();
      if (frequency === "once_a_day") {
        const daysSinceLastView = (now - lastViewTime) / (1e3 * 60 * 60 * 24);
        if (daysSinceLastView < 1) {
          return json({
            success: false,
            message: "Campaign already shown to this visitor today",
            shop: shopName
          });
        }
      } else if (frequency === "once_a_session") {
        return json({
          success: false,
          message: "Campaign already shown to this visitor this session",
          shop: shopName
        });
      }
    }
    await db.collection("campaign_views").insertOne({
      campaignId: campaignToServe.id,
      visitorId,
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      url: currentUrl,
      shop: shopName
    });
    return json({
      success: true,
      campaign: campaignToServe,
      shop: shopName
    });
  } catch (error) {
    console.error("Error serving campaign:", error);
    return json({ error: error.message }, { status: 500 });
  }
}
function ServeCampaignRoute() {
  return null;
}
const route19 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: ServeCampaignRoute,
  loader: loader$u
}, Symbol.toStringTag, { value: "Module" }));
async function action$k({ request }) {
  if (request.method !== "POST") {
    return json({ error: "Method not allowed" }, { status: 405 });
  }
  try {
    const { email, coupon, shop, campaignId } = await request.json();
    if (!email || !coupon) {
      return json({ error: "Email and coupon are required" }, { status: 400 });
    }
    if (!shop) {
      return json({ error: "Shop is required" }, { status: 400 });
    }
    const { db } = await connectToDatabase(shop);
    const redemptionsCollection = db.collection("redemptions");
    await redemptionsCollection.insertOne({
      email,
      coupon,
      campaignId,
      timestamp: /* @__PURE__ */ new Date(),
      redeemed: true
    });
    return json({ success: true });
  } catch (error) {
    console.error("Error redeeming coupon:", error);
    return json({ error: "Failed to redeem coupon" }, { status: 500 });
  }
}
const route20 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$k
}, Symbol.toStringTag, { value: "Module" }));
async function action$j({ request }) {
  var _a2;
  const { admin, session } = await authenticate.admin(request);
  try {
    const shopName = session.shop;
    const activeCampaign = await getActiveCampaign(shopName);
    if (!activeCampaign) {
      return json(
        { success: false, message: "No active campaign found" },
        { status: 404 }
      );
    }
    await createCampaignLayoutMetafields(admin.graphql, shopName);
    await createSubscriptionMetafield(
      admin.graphql,
      "true",
      ((_a2 = activeCampaign.layout) == null ? void 0 : _a2.floatingButtonPosition) || "bottom-right"
    );
    return json({
      success: true,
      message: "Campaign synced successfully",
      campaign: {
        id: activeCampaign.id,
        name: activeCampaign.name,
        status: activeCampaign.status,
        layout: activeCampaign.layout
      }
    });
  } catch (error) {
    console.error("Error syncing campaign:", error);
    return json({ success: false, message: error.message }, { status: 500 });
  }
}
async function loader$t() {
  return json({ message: "Use POST to sync campaign" });
}
const route21 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$j,
  loader: loader$t
}, Symbol.toStringTag, { value: "Module" }));
const action$i = async ({ request }) => {
  var _a2;
  console.log("CUSTOMERS_REDACT webhook received");
  try {
    const shopifyHmac = request.headers.get("x-shopify-hmac-sha256");
    const secret = process.env.SHOPIFY_API_SECRET;
    if (!secret) {
      console.error("SHOPIFY_API_SECRET is not defined");
      return new Response("Server configuration error", { status: 500 });
    }
    if (!shopifyHmac) {
      console.error("Missing HMAC header");
      return new Response("Unauthorized - Missing HMAC", { status: 401 });
    }
    const body = await request.text();
    const calculatedHmac = crypto.createHmac("sha256", secret).update(body, "utf8").digest("base64");
    const hmacValid = crypto.timingSafeEqual(Buffer.from(calculatedHmac), Buffer.from(shopifyHmac));
    if (!hmacValid) {
      console.error("CUSTOMERS_REDACT: HMAC verification failed");
      return new Response("Unauthorized - Invalid HMAC", { status: 401 });
    }
    console.log("CUSTOMERS_REDACT: HMAC verification successful");
    const payload = JSON.parse(body);
    console.log("CUSTOMERS_REDACT payload:", payload);
    console.log(`Processing CUSTOMERS_REDACT for customers: ${(_a2 = payload.customer_ids) == null ? void 0 : _a2.join(", ")}`);
    return new Response("CUSTOMERS_REDACT processed successfully", { status: 200 });
  } catch (error) {
    console.error("CUSTOMERS_REDACT error:", error);
    return new Response("Internal server error", { status: 500 });
  }
};
const loader$s = async () => {
  return new Response("Method not allowed", { status: 405 });
};
const route22 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$i,
  loader: loader$s
}, Symbol.toStringTag, { value: "Module" }));
async function action$h({ request }) {
  if (request.method !== "POST") {
    return json({ error: "Method not allowed" }, { status: 405 });
  }
  try {
    const { admin, session } = await authenticate.admin(request);
    const data = await request.json();
    const { campaignId, wheelConfig, timestamp, shop } = data;
    console.log("Saving wheel configuration:", {
      campaignId,
      wheelConfig,
      timestamp,
      shop: shop || session.shop
    });
    return json({
      success: true,
      message: "Wheel configuration saved successfully",
      campaignId
    });
  } catch (error) {
    console.error("Error saving wheel configuration:", error);
    return json({ success: false, error: error.message }, { status: 500 });
  }
}
const route23 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$h
}, Symbol.toStringTag, { value: "Module" }));
async function loader$r({ request }) {
  var _a2;
  try {
    const { admin, session } = await authenticate.admin(request);
    const { shop } = session;
    const url = new URL(request.url);
    const charge_id = url.searchParams.get("charge_id");
    if (charge_id) {
      const subscriptionQuery = await admin.graphql(
        `#graphql
        query GetAppSubscription($id: ID!) {
          node(id: $id) {
            ... on AppSubscription {
              id
              name
              status
              currentPeriodEnd
            }
          }
        }`,
        {
          variables: {
            id: `gid://shopify/AppSubscription/${charge_id}`
          }
        }
      );
      const subscriptionData = await subscriptionQuery.json();
      const subscription = (_a2 = subscriptionData.data) == null ? void 0 : _a2.node;
      if (subscription && subscription.status === "ACTIVE") {
        await createSubscriptionMetafield(admin.graphql, true, shop);
        return redirect$1("/app?subscription=success");
      } else {
        return redirect$1("/app?subscription=failed");
      }
    }
    return redirect$1("/app");
  } catch (error) {
    console.error("Billing callback error:", error);
    return redirect$1("/app?subscription=error");
  }
}
function BillingCallback() {
  return /* @__PURE__ */ jsx("div", { className: "container mx-auto px-4 py-6", children: /* @__PURE__ */ jsxs("div", { className: "text-center", children: [
    /* @__PURE__ */ jsx("h1", { className: "text-2xl font-bold mb-4", children: "Processing Subscription..." }),
    /* @__PURE__ */ jsx("p", { className: "text-gray-600", children: "Please wait while we confirm your subscription." })
  ] }) });
}
const route24 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: BillingCallback,
  loader: loader$r
}, Symbol.toStringTag, { value: "Module" }));
const corsHeaders$1 = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type"
};
async function loader$q({ request }) {
  if (request.method === "OPTIONS") {
    return new Response(null, { status: 200, headers: corsHeaders$1 });
  }
  return json(
    { error: "Method not allowed" },
    { status: 405, headers: corsHeaders$1 }
  );
}
async function action$g({ request }) {
  if (request.method !== "POST") {
    return json(
      { error: "Method not allowed" },
      { status: 405, headers: corsHeaders$1 }
    );
  }
  try {
    const { email, coupon, campaignId } = await request.json();
    if (!email) {
      return json(
        { error: "Email is required" },
        { status: 400, headers: corsHeaders$1 }
      );
    }
    if (!coupon) {
      return json(
        { error: "Coupon is required" },
        { status: 400, headers: corsHeaders$1 }
      );
    }
    if (!campaignId) {
      return json(
        { error: "Campaign ID is required" },
        { status: 400, headers: corsHeaders$1 }
      );
    }
    const { db, isConnected } = await connectToDatabase();
    if (!isConnected) {
      console.warn("DB down; logging result only", {
        email,
        coupon,
        campaignId
      });
      return json(
        { success: true, message: "Result logged (DB down)" },
        { headers: corsHeaders$1 }
      );
    }
    const result = await db.collection("campaigns").updateOne(
      { id: campaignId },
      {
        $push: {
          results: {
            email,
            coupon,
            awardedAt: /* @__PURE__ */ new Date()
          }
        }
      },
      { upsert: false }
    );
    if (result.matchedCount === 0) {
      return json(
        { error: "Campaign not found", campaignId },
        { status: 404, headers: corsHeaders$1 }
      );
    }
    return json(
      {
        success: true,
        message: "Result saved to campaign",
        modifiedCount: result.modifiedCount
      },
      { headers: corsHeaders$1 }
    );
  } catch (error) {
    console.error("Failed to save result:", error);
    return json(
      {
        success: false,
        error: "Unexpected error",
        details: error.message
      },
      { status: 500, headers: corsHeaders$1 }
    );
  }
}
const route25 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$g,
  loader: loader$q
}, Symbol.toStringTag, { value: "Module" }));
const action$f = async ({ request }) => {
  if (request.method !== "POST") {
    return Response.json({ error: "Method not allowed" }, { status: 405 });
  }
  try {
    const { campaignId, sectorId, userEmail, shop, sessionId } = await request.json();
    if (!campaignId || !sectorId) {
      return Response.json(
        { error: "Missing required fields: campaignId, sectorId" },
        { status: 400 }
      );
    }
    const { db } = await connectToDatabase(shop);
    const wheelConfigCollection = db.collection("wheel_configurations");
    const wheelConfig = await wheelConfigCollection.findOne({ campaignId });
    if (!wheelConfig) {
      return Response.json(
        { error: "Wheel configuration not found" },
        { status: 404 }
      );
    }
    const sector = wheelConfig.wheelConfig.sectors.find(
      (s) => s.id === sectorId
    );
    if (!sector) {
      return Response.json({ error: "Invalid sector" }, { status: 400 });
    }
    const spinResultsCollection = db.collection("spin_results");
    const spinResult = {
      campaignId,
      sectorId,
      sector: {
        rewardType: sector.rewardType,
        reward: sector.reward,
        discountCodeId: sector.discountCodeId,
        discountValue: sector.discountValue,
        discountType: sector.discountType
      },
      userEmail: userEmail || null,
      shop: shop || "default",
      sessionId: sessionId || null,
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      createdAt: /* @__PURE__ */ new Date(),
      redeemed: false
    };
    const result = await spinResultsCollection.insertOne(spinResult);
    const response = {
      success: true,
      resultId: result.insertedId,
      sector: {
        id: sector.id,
        rewardType: sector.rewardType,
        reward: sector.reward,
        isDiscount: !!sector.discountCodeId,
        discountValue: sector.discountValue,
        discountType: sector.discountType
      },
      message: sector.discountCodeId ? "Congratulations! You won a discount!" : "Better luck next time!"
    };
    if (sector.discountCodeId) {
      console.log(
        `User won discount: ${sector.reward} (${sector.discountValue}% off)`
      );
    }
    return Response.json(response);
  } catch (error) {
    console.error("Error processing spin result:", error);
    return Response.json(
      { error: "Failed to process spin result", details: error.message },
      { status: 500 }
    );
  }
};
const loader$p = async ({ request }) => {
  try {
    const url = new URL(request.url);
    const campaignId = url.searchParams.get("campaignId");
    const shop = url.searchParams.get("shop");
    const limit = Number.parseInt(url.searchParams.get("limit")) || 50;
    const { db } = await connectToDatabase(shop);
    const collection = db.collection("spin_results");
    const query = {};
    if (campaignId) query.campaignId = campaignId;
    if (shop) query.shop = shop;
    const results = await collection.find(query).sort({ createdAt: -1 }).limit(limit).toArray();
    const analytics = await collection.aggregate([
      { $match: query },
      {
        $group: {
          _id: "$sector.rewardType",
          count: { $sum: 1 },
          discountWins: {
            $sum: {
              $cond: [{ $ne: ["$sector.discountCodeId", null] }, 1, 0]
            }
          }
        }
      }
    ]).toArray();
    return Response.json({
      success: true,
      results,
      analytics,
      totalSpins: results.length
    });
  } catch (error) {
    console.error("Error fetching spin results:", error);
    return Response.json(
      { error: "Failed to fetch spin results", details: error.message },
      { status: 500 }
    );
  }
};
const route26 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$f,
  loader: loader$p
}, Symbol.toStringTag, { value: "Module" }));
const loader$o = () => {
  return redirect$1("/campaigns/create");
};
function CreateCampaignRedirect() {
  return null;
}
const route27 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: CreateCampaignRedirect,
  loader: loader$o
}, Symbol.toStringTag, { value: "Module" }));
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type"
};
async function loader$n({ request }) {
  if (request.method === "OPTIONS") {
    return new Response(null, { status: 200, headers: corsHeaders });
  }
  return json(
    { error: "Method not allowed" },
    { status: 405, headers: corsHeaders }
  );
}
async function action$e({ request }) {
  if (request.method !== "POST") {
    return json(
      { error: "Method not allowed" },
      { status: 405, headers: corsHeaders }
    );
  }
  try {
    const { email, coupon = null, campaignId } = await request.json();
    if (!email || !campaignId) {
      return json(
        { error: "Missing required fields: email or campaignId" },
        { status: 400, headers: corsHeaders }
      );
    }
    const { db, isConnected } = await connectToDatabase();
    if (!isConnected) {
      console.warn("MongoDB not connected, logging only:", {
        email,
        coupon,
        campaignId
      });
      return json(
        {
          success: true,
          message: "Email logged (DB not connected)"
        },
        { headers: corsHeaders }
      );
    }
    const updateResult = await db.collection("campaigns").updateOne(
      { id: campaignId },
      {
        $push: {
          emails: {
            email,
            coupon,
            submittedAt: /* @__PURE__ */ new Date()
          }
        }
      }
    );
    if (updateResult.matchedCount > 0) {
      return json(
        {
          success: true,
          message: "Email saved to existing campaign",
          campaignId
        },
        { headers: corsHeaders }
      );
    }
    console.log(`Campaign ${campaignId} not found, creating new campaign...`);
    const newCampaign = {
      id: campaignId,
      name: `Campaign ${campaignId}`,
      status: "active",
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date(),
      emails: [
        {
          email,
          coupon,
          submittedAt: /* @__PURE__ */ new Date()
        }
      ],
      // Default campaign settings
      settings: {
        autoCreated: true,
        source: "email-submission"
      },
      // Basic campaign structure
      layout: {
        showFloatingButton: true,
        floatingButtonPosition: "bottomRight",
        floatingButtonText: "SPIN & WIN",
        floatingButtonHasText: true
      },
      primaryColor: "#fe5300",
      // Campaign stats
      stats: {
        totalEmails: 1,
        totalSpins: 0,
        conversionRate: 0
      }
    };
    const insertResult = await db.collection("campaigns").insertOne(newCampaign);
    if (insertResult.acknowledged) {
      console.log(
        `Successfully created new campaign ${campaignId} and saved email`
      );
      return json(
        {
          success: true,
          message: "New campaign created and email saved",
          campaignId,
          campaignCreated: true
        },
        { headers: corsHeaders }
      );
    } else {
      throw new Error("Failed to create new campaign");
    }
  } catch (error) {
    console.error("Error saving email:", error);
    return json(
      {
        success: false,
        error: "Failed to save email",
        message: error.message
      },
      { status: 500, headers: corsHeaders }
    );
  }
}
const route28 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$e,
  loader: loader$n
}, Symbol.toStringTag, { value: "Module" }));
async function getEffectiveShopName$2(request) {
  try {
    const { session } = await authenticate.admin(request);
    const shopName = session.shop;
    console.log("Using shop name from session:", shopName);
    setShopName(shopName);
    return shopName;
  } catch (authError) {
    console.log("Authentication failed:", authError.message);
    const url = new URL(request.url);
    const shopFromRequest = url.searchParams.get("shop") || request.headers.get("x-shopify-shop-domain");
    const shopName = shopFromRequest || getShopName() || "wheel-of-wonders.myshopify.com";
    console.log("Using shop name from fallback:", shopName);
    if (shopFromRequest) {
      setShopName(shopFromRequest);
    }
    return shopName;
  }
}
async function loader$m({ request }) {
  try {
    const shopName = await getEffectiveShopName$2(request);
    const { db, dbName } = await connectToDatabase(shopName);
    console.log(`Fetching campaigns from database: ${dbName}`);
    const campaigns = await db.collection("campaigns").find({}).toArray();
    return json({
      campaigns,
      shop: shopName,
      dbName
    });
  } catch (error) {
    console.error("Error fetching campaigns:", error);
    return json({ error: error.message }, { status: 500 });
  }
}
async function action$d({ request }) {
  try {
    const campaignData = await request.json();
    const shopName = await getEffectiveShopName$2(request);
    const { _id, ...campaignToCreate } = campaignData;
    if (!campaignToCreate.shop) {
      campaignToCreate.shop = shopName;
    }
    const { db, dbName } = await connectToDatabase(shopName);
    console.log(`Creating campaign in database: ${dbName}`);
    const result = await db.collection("campaigns").insertOne(campaignToCreate);
    return json(
      {
        ...campaignToCreate,
        _id: result.insertedId,
        shop: shopName,
        dbName
      },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error creating campaign:", error);
    return json({ error: error.message }, { status: 500 });
  }
}
const route29 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$d,
  loader: loader$m
}, Symbol.toStringTag, { value: "Module" }));
async function getEffectiveShopName$1(request) {
  try {
    const { authenticate: authenticate2 } = await Promise.resolve().then(() => shopify_server);
    const { session } = await authenticate2.admin(request);
    const shopName = session.shop;
    console.log("Using shop name from session:", shopName);
    return shopName;
  } catch (authError) {
    console.log("Authentication failed:", authError.message);
    let shopName = null;
    if (request.method === "POST") {
      try {
        const formData = await request.formData();
        shopName = formData.get("shop");
        if (shopName) {
          console.log("Using shop name from form data:", shopName);
          return shopName;
        }
      } catch (e) {
        console.log("Not form data, trying other sources");
      }
    }
    const url = new URL(request.url);
    shopName = url.searchParams.get("shop") || request.headers.get("x-shopify-shop-domain");
    if (shopName) {
      console.log("Using shop name from URL/headers:", shopName);
      return shopName;
    }
    console.log("Using default shop name");
    return "wheel-of-wonders.myshopify.com";
  }
}
async function action$c({ request, params }) {
  if (request.method !== "POST") {
    return json({ error: "Method not allowed" }, { status: 405 });
  }
  try {
    const campaignId = params.id;
    if (!campaignId) {
      return json({ error: "Campaign ID is required" }, { status: 400 });
    }
    let formData;
    try {
      formData = await request.formData();
    } catch (e) {
      return json({ error: "Invalid form data" }, { status: 400 });
    }
    const newStatus = formData.get("status");
    if (!newStatus) {
      return json({ error: "Status is required" }, { status: 400 });
    }
    const shopName = await getEffectiveShopName$1(request);
    console.log("Updating campaign", campaignId, "in database:", shopName);
    const { db } = await connectToDatabase(shopName);
    if (!db) {
      return json({ error: "Database connection failed" }, { status: 500 });
    }
    if (newStatus === "active") {
      try {
        await db.collection("campaigns").updateMany(
          {
            id: { $ne: campaignId },
            status: "active"
          },
          {
            $set: {
              status: "draft",
              updatedAt: (/* @__PURE__ */ new Date()).toISOString()
            }
          }
        );
        console.log("Set all other active campaigns to draft");
      } catch (error) {
        console.error("Error deactivating other campaigns:", error);
      }
    }
    try {
      const result = await db.collection("campaigns").updateOne(
        { id: campaignId },
        {
          $set: {
            status: newStatus,
            updatedAt: (/* @__PURE__ */ new Date()).toISOString()
          }
        }
      );
      if (result.matchedCount === 0) {
        try {
          const objId = new ObjectId(campaignId);
          const result2 = await db.collection("campaigns").updateOne(
            { _id: objId },
            {
              $set: {
                status: newStatus,
                updatedAt: (/* @__PURE__ */ new Date()).toISOString()
              }
            }
          );
          if (result2.matchedCount === 0) {
            return json({ error: "Campaign not found" }, { status: 404 });
          }
        } catch (e) {
          return json({ error: "Campaign not found" }, { status: 404 });
        }
      }
    } catch (error) {
      console.error("Error updating campaign:", error);
      return json({ error: "Failed to update campaign" }, { status: 500 });
    }
    let syncResult = {
      success: false,
      message: "Metafield sync not attempted"
    };
    try {
      const { authenticate: authenticate2 } = await Promise.resolve().then(() => shopify_server);
      const { admin } = await authenticate2.admin(request);
      if (admin == null ? void 0 : admin.graphql) {
        const campaign = await db.collection("campaigns").findOne({ id: campaignId });
        if (campaign) {
          if (newStatus === "active") {
            syncResult = {
              success: true,
              message: "Campaign synced to metafields"
            };
          } else {
            syncResult = { success: true, message: "Metafields cleared" };
          }
        }
      }
    } catch (error) {
      console.log("Metafield sync skipped due to authentication");
    }
    return json({
      success: true,
      status: newStatus,
      message: `Campaign ${newStatus === "active" ? "activated" : "deactivated"} successfully`,
      syncResult
    });
  } catch (error) {
    console.error("Error in campaign status update:", error);
    return json({ error: "Internal server error" }, { status: 500 });
  }
}
async function loader$l({ request, params }) {
  return json({ message: "Use POST to update campaign status" });
}
const route30 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$c,
  loader: loader$l
}, Symbol.toStringTag, { value: "Module" }));
async function action$b({ request }) {
  var _a2, _b;
  try {
    const { authenticate: authenticate2 } = await Promise.resolve().then(() => shopify_server);
    const { connectToDatabase: connectToDatabase2 } = await Promise.resolve().then(() => mongodb_server);
    const { syncActiveCampaignToMetafields: syncActiveCampaignToMetafields2 } = await Promise.resolve().then(() => Subscription_server);
    const { admin, session } = await authenticate2.admin(request);
    const shopName = session.shop;
    const graphql = admin.graphql;
    console.log("Campaign Toggle - Authenticated for shop:", shopName);
    const formData = await request.formData();
    const campaignId = formData.get("campaignId");
    const action2 = formData.get("action");
    if (!campaignId) {
      return json(
        { success: false, error: "Campaign ID is required" },
        { status: 400 }
      );
    }
    const { db } = await connectToDatabase2(shopName);
    const campaign = await db.collection("campaigns").findOne({ id: campaignId });
    if (!campaign) {
      return json(
        { success: false, error: "Campaign not found" },
        { status: 404 }
      );
    }
    const newStatus = action2 === "activate" ? "active" : "draft";
    if (newStatus === "active") {
      await db.collection("campaigns").updateMany(
        { id: { $ne: campaignId }, status: "active" },
        { $set: { status: "draft" } }
      );
      console.log("Campaign Toggle - Deactivated other active campaigns");
    }
    await db.collection("campaigns").updateOne({ id: campaignId }, { $set: { status: newStatus } });
    console.log(
      `Campaign Toggle - Updated campaign ${campaignId} to ${newStatus}`
    );
    if (newStatus === "active") {
      try {
        console.log("Campaign Toggle - Syncing to metafields...");
        const syncResult = await syncActiveCampaignToMetafields2(
          graphql,
          shopName
        );
        return json({
          success: true,
          message: "Campaign activated and synced to storefront successfully!",
          status: newStatus,
          campaignId,
          synced: true
        });
      } catch (syncError) {
        console.error("Campaign Toggle - Sync error:", syncError);
        return json({
          success: true,
          message: "Campaign activated successfully! Storefront sync will retry automatically.",
          status: newStatus,
          campaignId,
          synced: false,
          syncError: syncError.message
        });
      }
    } else {
      try {
        console.log("Campaign Toggle - Clearing metafields...");
        const appIdQuery = await graphql(`
          #graphql
          query {
            currentAppInstallation {
              id
            }
          }
        `);
        const appIdResult = await appIdQuery.json();
        if ((_b = (_a2 = appIdResult.data) == null ? void 0 : _a2.currentAppInstallation) == null ? void 0 : _b.id) {
          const appInstallationID = appIdResult.data.currentAppInstallation.id;
          const clearMetafields = [
            {
              namespace: "wheel-of-wonders",
              key: "activeCampaignId",
              type: "single_line_text_field",
              value: "",
              ownerId: appInstallationID
            },
            {
              namespace: "wheel-of-wonders",
              key: "showFloatingButton",
              type: "boolean",
              value: "false",
              ownerId: appInstallationID
            }
          ];
          await graphql(
            `
              mutation CreateAppDataMetafield(
                $metafields: [MetafieldsSetInput!]!
              ) {
                metafieldsSet(metafields: $metafields) {
                  metafields {
                    id
                    namespace
                    key
                    value
                  }
                  userErrors {
                    field
                    message
                  }
                }
              }
            `,
            { variables: { metafields: clearMetafields } }
          );
          console.log("Campaign Toggle - Metafields cleared successfully");
        }
      } catch (clearError) {
        console.error(
          "Campaign Toggle - Error clearing metafields:",
          clearError
        );
      }
      return json({
        success: true,
        message: "Campaign deactivated and removed from storefront successfully!",
        status: newStatus,
        campaignId
      });
    }
  } catch (error) {
    console.error("Campaign Toggle - Authentication error:", error);
    return json(
      {
        success: false,
        error: "Authentication failed. Please refresh the page.",
        authError: true
      },
      { status: 401 }
    );
  }
}
const route31 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$b
}, Symbol.toStringTag, { value: "Module" }));
async function getEffectiveShopName(request) {
  try {
    const { session } = await authenticate.admin(request);
    const shopName = session.shop;
    console.log("Using shop name from session:", shopName);
    setShopName(shopName);
    return shopName;
  } catch (authError) {
    console.log("Authentication failed:", authError.message);
    const url = new URL(request.url);
    const shopFromRequest = url.searchParams.get("shop") || request.headers.get("x-shopify-shop-domain");
    const shopName = shopFromRequest || getShopName() || "wheel-of-wonders.myshopify.com";
    console.log("Using shop name from fallback:", shopName);
    if (shopFromRequest) {
      setShopName(shopFromRequest);
    }
    return shopName;
  }
}
async function loader$k({ params, request }) {
  try {
    const { id } = params;
    const shopName = await getEffectiveShopName(request);
    const { db, dbName } = await connectToDatabase(shopName);
    console.log(`Fetching campaign ${id} from database: ${dbName}`);
    const campaign = await db.collection("campaigns").findOne({ id });
    if (!campaign) {
      return json({ error: "Campaign not found" }, { status: 404 });
    }
    return json({
      ...campaign,
      shop: shopName,
      dbName
    });
  } catch (error) {
    console.error("Error fetching campaign:", error);
    return json({ error: error.message }, { status: 500 });
  }
}
async function action$a({ request, params }) {
  const method = request.method.toLowerCase();
  const shopName = await getEffectiveShopName(request);
  const { db, dbName } = await connectToDatabase(shopName);
  if (method === "put") {
    try {
      const { id } = params;
      const campaignData = await request.json();
      const { _id, ...campaignToUpdate } = campaignData;
      if (!campaignToUpdate.shop) {
        campaignToUpdate.shop = shopName;
      }
      console.log(`Updating campaign ${id} in database: ${dbName}`);
      const result = await db.collection("campaigns").updateOne({ id }, { $set: campaignToUpdate });
      if (result.matchedCount === 0) {
        return json({ error: "Campaign not found" }, { status: 404 });
      }
      return json({
        ...campaignToUpdate,
        id,
        shop: shopName,
        dbName
      });
    } catch (error) {
      console.error("Error updating campaign:", error);
      return json({ error: error.message }, { status: 500 });
    }
  } else if (method === "delete") {
    try {
      const { id } = params;
      console.log(`Deleting campaign ${id} from database: ${dbName}`);
      const result = await db.collection("campaigns").deleteOne({ id });
      if (result.deletedCount === 0) {
        return json({ error: "Campaign not found" }, { status: 404 });
      }
      return json({
        success: true,
        shop: shopName,
        dbName
      });
    } catch (error) {
      console.error("Error deleting campaign:", error);
      return json({ error: error.message }, { status: 500 });
    }
  }
  return json({ error: "Method not allowed" }, { status: 405 });
}
const route32 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$a,
  loader: loader$k
}, Symbol.toStringTag, { value: "Module" }));
async function loader$j({ request }) {
  try {
    let shopName = null;
    try {
      const { session } = await authenticate.admin(request);
      shopName = session.shop;
      console.log("Using shop name for database:", shopName);
    } catch (authError) {
      const url = new URL(request.url);
      const shop = url.searchParams.get("shop") || request.headers.get("x-shopify-shop-domain") || "wheel-of-wonders.myshopify.com";
      shopName = shop;
      console.log("Authentication failed, using shop from request:", shopName);
    }
    const { client: client2, db } = await connectToDatabase(shopName);
    await db.command({ ping: 1 });
    return json({
      connected: true,
      message: "Successfully connected to MongoDB",
      dbName: db.databaseName,
      shop: shopName
    });
  } catch (error) {
    console.error("Database connection error:", error);
    return json({
      connected: false,
      error: error.message,
      message: "Failed to connect to MongoDB"
    });
  }
}
const route33 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  loader: loader$j
}, Symbol.toStringTag, { value: "Module" }));
async function loader$i({ request }) {
  try {
    const url = new URL(request.url);
    const id = url.searchParams.get("id");
    const shop = url.searchParams.get("shop");
    if (!id) {
      return json(
        { error: "Campaign ID parameter is required" },
        { status: 400 }
      );
    }
    if (!shop) {
      return json({ error: "Shop parameter is required" }, { status: 400 });
    }
    const headers2 = {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type"
    };
    if (request.method === "OPTIONS") {
      return new Response(null, {
        status: 200,
        headers: headers2
      });
    }
    const { db } = await connectToDatabase(shop);
    const campaignsCollection = db.collection("campaigns");
    const campaign = await campaignsCollection.findOne({ id });
    if (!campaign) {
      return json({ error: "Campaign not found" }, { status: 404, headers: headers2 });
    }
    return json(campaign, { headers: headers2 });
  } catch (error) {
    console.error("Error fetching campaign:", error);
    return json({ error: "Failed to fetch campaign" }, { status: 500 });
  }
}
const route34 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  loader: loader$i
}, Symbol.toStringTag, { value: "Module" }));
const action$9 = async ({ request }) => {
  console.log("SHOP_REDACT webhook received");
  try {
    const shopifyHmac = request.headers.get("x-shopify-hmac-sha256");
    const secret = process.env.SHOPIFY_API_SECRET;
    if (!secret) {
      console.error("SHOPIFY_API_SECRET is not defined");
      return new Response("Server configuration error", { status: 500 });
    }
    if (!shopifyHmac) {
      console.error("Missing HMAC header");
      return new Response("Unauthorized - Missing HMAC", { status: 401 });
    }
    const body = await request.text();
    const calculatedHmac = crypto.createHmac("sha256", secret).update(body, "utf8").digest("base64");
    const hmacValid = crypto.timingSafeEqual(Buffer.from(calculatedHmac), Buffer.from(shopifyHmac));
    if (!hmacValid) {
      console.error("SHOP_REDACT: HMAC verification failed");
      return new Response("Unauthorized - Invalid HMAC", { status: 401 });
    }
    console.log("SHOP_REDACT: HMAC verification successful");
    const payload = JSON.parse(body);
    console.log("SHOP_REDACT payload:", payload);
    console.log(`Processing SHOP_REDACT for shop: ${payload.shop_domain}`);
    return new Response("SHOP_REDACT processed successfully", { status: 200 });
  } catch (error) {
    console.error("SHOP_REDACT error:", error);
    return new Response("Internal server error", { status: 500 });
  }
};
const loader$h = async () => {
  return new Response("Method not allowed", { status: 405 });
};
const route35 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$9,
  loader: loader$h
}, Symbol.toStringTag, { value: "Module" }));
let Key;
(function(Key2) {
  Key2[Key2["Backspace"] = 8] = "Backspace";
  Key2[Key2["Tab"] = 9] = "Tab";
  Key2[Key2["Enter"] = 13] = "Enter";
  Key2[Key2["Shift"] = 16] = "Shift";
  Key2[Key2["Ctrl"] = 17] = "Ctrl";
  Key2[Key2["Alt"] = 18] = "Alt";
  Key2[Key2["Pause"] = 19] = "Pause";
  Key2[Key2["CapsLock"] = 20] = "CapsLock";
  Key2[Key2["Escape"] = 27] = "Escape";
  Key2[Key2["Space"] = 32] = "Space";
  Key2[Key2["PageUp"] = 33] = "PageUp";
  Key2[Key2["PageDown"] = 34] = "PageDown";
  Key2[Key2["End"] = 35] = "End";
  Key2[Key2["Home"] = 36] = "Home";
  Key2[Key2["LeftArrow"] = 37] = "LeftArrow";
  Key2[Key2["UpArrow"] = 38] = "UpArrow";
  Key2[Key2["RightArrow"] = 39] = "RightArrow";
  Key2[Key2["DownArrow"] = 40] = "DownArrow";
  Key2[Key2["Insert"] = 45] = "Insert";
  Key2[Key2["Delete"] = 46] = "Delete";
  Key2[Key2["Key0"] = 48] = "Key0";
  Key2[Key2["Key1"] = 49] = "Key1";
  Key2[Key2["Key2"] = 50] = "Key2";
  Key2[Key2["Key3"] = 51] = "Key3";
  Key2[Key2["Key4"] = 52] = "Key4";
  Key2[Key2["Key5"] = 53] = "Key5";
  Key2[Key2["Key6"] = 54] = "Key6";
  Key2[Key2["Key7"] = 55] = "Key7";
  Key2[Key2["Key8"] = 56] = "Key8";
  Key2[Key2["Key9"] = 57] = "Key9";
  Key2[Key2["KeyA"] = 65] = "KeyA";
  Key2[Key2["KeyB"] = 66] = "KeyB";
  Key2[Key2["KeyC"] = 67] = "KeyC";
  Key2[Key2["KeyD"] = 68] = "KeyD";
  Key2[Key2["KeyE"] = 69] = "KeyE";
  Key2[Key2["KeyF"] = 70] = "KeyF";
  Key2[Key2["KeyG"] = 71] = "KeyG";
  Key2[Key2["KeyH"] = 72] = "KeyH";
  Key2[Key2["KeyI"] = 73] = "KeyI";
  Key2[Key2["KeyJ"] = 74] = "KeyJ";
  Key2[Key2["KeyK"] = 75] = "KeyK";
  Key2[Key2["KeyL"] = 76] = "KeyL";
  Key2[Key2["KeyM"] = 77] = "KeyM";
  Key2[Key2["KeyN"] = 78] = "KeyN";
  Key2[Key2["KeyO"] = 79] = "KeyO";
  Key2[Key2["KeyP"] = 80] = "KeyP";
  Key2[Key2["KeyQ"] = 81] = "KeyQ";
  Key2[Key2["KeyR"] = 82] = "KeyR";
  Key2[Key2["KeyS"] = 83] = "KeyS";
  Key2[Key2["KeyT"] = 84] = "KeyT";
  Key2[Key2["KeyU"] = 85] = "KeyU";
  Key2[Key2["KeyV"] = 86] = "KeyV";
  Key2[Key2["KeyW"] = 87] = "KeyW";
  Key2[Key2["KeyX"] = 88] = "KeyX";
  Key2[Key2["KeyY"] = 89] = "KeyY";
  Key2[Key2["KeyZ"] = 90] = "KeyZ";
  Key2[Key2["LeftMeta"] = 91] = "LeftMeta";
  Key2[Key2["RightMeta"] = 92] = "RightMeta";
  Key2[Key2["Select"] = 93] = "Select";
  Key2[Key2["Numpad0"] = 96] = "Numpad0";
  Key2[Key2["Numpad1"] = 97] = "Numpad1";
  Key2[Key2["Numpad2"] = 98] = "Numpad2";
  Key2[Key2["Numpad3"] = 99] = "Numpad3";
  Key2[Key2["Numpad4"] = 100] = "Numpad4";
  Key2[Key2["Numpad5"] = 101] = "Numpad5";
  Key2[Key2["Numpad6"] = 102] = "Numpad6";
  Key2[Key2["Numpad7"] = 103] = "Numpad7";
  Key2[Key2["Numpad8"] = 104] = "Numpad8";
  Key2[Key2["Numpad9"] = 105] = "Numpad9";
  Key2[Key2["Multiply"] = 106] = "Multiply";
  Key2[Key2["Add"] = 107] = "Add";
  Key2[Key2["Subtract"] = 109] = "Subtract";
  Key2[Key2["Decimal"] = 110] = "Decimal";
  Key2[Key2["Divide"] = 111] = "Divide";
  Key2[Key2["F1"] = 112] = "F1";
  Key2[Key2["F2"] = 113] = "F2";
  Key2[Key2["F3"] = 114] = "F3";
  Key2[Key2["F4"] = 115] = "F4";
  Key2[Key2["F5"] = 116] = "F5";
  Key2[Key2["F6"] = 117] = "F6";
  Key2[Key2["F7"] = 118] = "F7";
  Key2[Key2["F8"] = 119] = "F8";
  Key2[Key2["F9"] = 120] = "F9";
  Key2[Key2["F10"] = 121] = "F10";
  Key2[Key2["F11"] = 122] = "F11";
  Key2[Key2["F12"] = 123] = "F12";
  Key2[Key2["NumLock"] = 144] = "NumLock";
  Key2[Key2["ScrollLock"] = 145] = "ScrollLock";
  Key2[Key2["Semicolon"] = 186] = "Semicolon";
  Key2[Key2["Equals"] = 187] = "Equals";
  Key2[Key2["Comma"] = 188] = "Comma";
  Key2[Key2["Dash"] = 189] = "Dash";
  Key2[Key2["Period"] = 190] = "Period";
  Key2[Key2["ForwardSlash"] = 191] = "ForwardSlash";
  Key2[Key2["GraveAccent"] = 192] = "GraveAccent";
  Key2[Key2["OpenBracket"] = 219] = "OpenBracket";
  Key2[Key2["BackSlash"] = 220] = "BackSlash";
  Key2[Key2["CloseBracket"] = 221] = "CloseBracket";
  Key2[Key2["SingleQuote"] = 222] = "SingleQuote";
})(Key || (Key = {}));
const scrollable = {
  props: {
    "data-polaris-scrollable": true
  },
  selector: "[data-polaris-scrollable]"
};
const overlay = {
  props: {
    "data-polaris-overlay": true
  }
};
const layer = {
  props: {
    "data-polaris-layer": true
  },
  selector: "[data-polaris-layer]"
};
const unstyled = {
  props: {
    "data-polaris-unstyled": true
  }
};
const dataPolarisTopBar = {
  props: {
    "data-polaris-top-bar": true
  },
  selector: "[data-polaris-top-bar]"
};
const headerCell = {
  props: {
    "data-polaris-header-cell": true
  },
  selector: "[data-polaris-header-cell]"
};
const portal = {
  selector: "[data-portal-id]"
};
const ThemeContext = /* @__PURE__ */ createContext(null);
const ThemeNameContext = /* @__PURE__ */ createContext(null);
function getTheme(themeName) {
  return themes[themeName];
}
function useTheme() {
  const theme = useContext(ThemeContext);
  if (!theme) {
    throw new Error("No theme was provided. Your application must be wrapped in an <AppProvider> or <ThemeProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
  }
  return theme;
}
function useThemeName() {
  const themeName = useContext(ThemeNameContext);
  if (!themeName) {
    throw new Error("No themeName was provided. Your application must be wrapped in an <AppProvider> or <ThemeProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
  }
  return themeName;
}
function UseTheme(props) {
  const theme = useTheme();
  return props.children(theme);
}
function isObject(value) {
  const type = typeof value;
  return value != null && (type === "object" || type === "function");
}
function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}
function variationName(name, value) {
  return `${name}${value.charAt(0).toUpperCase()}${value.slice(1)}`;
}
function sanitizeCustomProperties(styles2) {
  const nonNullValues = Object.entries(styles2).filter(([_, value]) => value != null);
  return nonNullValues.length ? Object.fromEntries(nonNullValues) : void 0;
}
function getResponsiveProps(componentName, componentProp, tokenSubgroup, responsiveProp) {
  if (!responsiveProp) return {};
  let result;
  if (!isObject(responsiveProp)) {
    result = {
      [breakpointsAliases[0]]: `var(--p-${tokenSubgroup}-${responsiveProp})`
    };
  } else {
    result = Object.fromEntries(Object.entries(responsiveProp).map(([breakpointAlias, aliasOrScale]) => [breakpointAlias, `var(--p-${tokenSubgroup}-${aliasOrScale})`]));
  }
  return Object.fromEntries(Object.entries(result).map(([breakpointAlias, value]) => [`--pc-${componentName}-${componentProp}-${breakpointAlias}`, value]));
}
function getResponsiveValue(componentName, componentProp, responsiveProp) {
  if (!responsiveProp) return {};
  if (!isObject(responsiveProp)) {
    return {
      [`--pc-${componentName}-${componentProp}-${breakpointsAliases[0]}`]: responsiveProp
    };
  }
  return Object.fromEntries(Object.entries(responsiveProp).map(([breakpointAlias, responsiveValue]) => [`--pc-${componentName}-${componentProp}-${breakpointAlias}`, responsiveValue]));
}
var styles$13 = {
  "themeContainer": "Polaris-ThemeProvider--themeContainer"
};
const themeNamesLocal = ["light", "dark-experimental"];
const isThemeNameLocal = (name) => themeNamesLocal.includes(name);
function ThemeProvider(props) {
  const {
    as: ThemeContainer = "div",
    children,
    className,
    theme: themeName = themeNameDefault
  } = props;
  return /* @__PURE__ */ React.createElement(ThemeNameContext.Provider, {
    value: themeName
  }, /* @__PURE__ */ React.createElement(ThemeContext.Provider, {
    value: getTheme(themeName)
  }, /* @__PURE__ */ React.createElement(ThemeContainer, {
    "data-portal-id": props["data-portal-id"],
    className: classNames(createThemeClassName(themeName), styles$13.themeContainer, className)
  }, children)));
}
const WithinContentContext = /* @__PURE__ */ createContext(false);
const isServer = typeof window === "undefined" || typeof document === "undefined";
const useIsomorphicLayoutEffect = isServer ? useEffect : useLayoutEffect;
function useEventListener(eventName, handler2, target, options2) {
  const handlerRef = useRef(handler2);
  const optionsRef = useRef(options2);
  useIsomorphicLayoutEffect(() => {
    handlerRef.current = handler2;
  }, [handler2]);
  useIsomorphicLayoutEffect(() => {
    optionsRef.current = options2;
  }, [options2]);
  useEffect(() => {
    if (!(typeof eventName === "string" && target !== null)) return;
    let targetElement;
    if (typeof target === "undefined") {
      targetElement = window;
    } else if ("current" in target) {
      if (target.current === null) return;
      targetElement = target.current;
    } else {
      targetElement = target;
    }
    const eventOptions = optionsRef.current;
    const eventListener = (event) => handlerRef.current(event);
    targetElement.addEventListener(eventName, eventListener, eventOptions);
    return () => {
      targetElement.removeEventListener(eventName, eventListener, eventOptions);
    };
  }, [eventName, target]);
}
const Breakpoints = {
  // TODO: Update to smDown
  navigationBarCollapsed: "767.95px",
  // TODO: Update to lgDown
  stackedContent: "1039.95px"
};
const noWindowMatches = {
  media: "",
  addListener: noop$6,
  removeListener: noop$6,
  matches: false,
  onchange: noop$6,
  addEventListener: noop$6,
  removeEventListener: noop$6,
  dispatchEvent: (_) => true
};
function noop$6() {
}
function navigationBarCollapsed() {
  return typeof window === "undefined" ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.navigationBarCollapsed})`);
}
function stackedContent() {
  return typeof window === "undefined" ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.stackedContent})`);
}
const breakpointsQueryEntries = getBreakpointsQueryEntries(themeDefault.breakpoints);
function getMatches(defaults, forceDefaults) {
  if (!isServer && !forceDefaults) {
    return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias, query]) => [directionAlias, window.matchMedia(query).matches]));
  }
  return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, false]));
}
function useBreakpoints(options2) {
  const [breakpoints, setBreakpoints] = useState(getMatches(options2 == null ? void 0 : options2.defaults, true));
  useIsomorphicLayoutEffect(() => {
    const mediaQueryLists = breakpointsQueryEntries.map(([_, query]) => window.matchMedia(query));
    const handler2 = () => setBreakpoints(getMatches());
    mediaQueryLists.forEach((mql) => {
      if (mql.addListener) {
        mql.addListener(handler2);
      } else {
        mql.addEventListener("change", handler2);
      }
    });
    handler2();
    return () => {
      mediaQueryLists.forEach((mql) => {
        if (mql.removeListener) {
          mql.removeListener(handler2);
        } else {
          mql.removeEventListener("change", handler2);
        }
      });
    };
  }, []);
  return breakpoints;
}
function getBreakpointsQueryEntries(breakpoints) {
  const mediaConditionEntries = Object.entries(getMediaConditions(breakpoints));
  return mediaConditionEntries.map(([breakpointsToken, mediaConditions]) => Object.entries(mediaConditions).map(([direction, mediaCondition]) => {
    const breakpointsAlias = breakpointsToken.split("-")[1];
    const directionAlias = `${breakpointsAlias}${capitalize(direction)}`;
    return [directionAlias, mediaCondition];
  })).flat();
}
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function debounce(func, waitArg, options2) {
  let lastArgs;
  let lastThis;
  let maxWait;
  let result;
  let timerId;
  let lastCallTime;
  let lastInvokeTime = 0;
  let leading = false;
  let maxing = false;
  let trailing = true;
  const useRAF = !waitArg && waitArg !== 0;
  if (typeof func !== "function") {
    throw new TypeError("Expected a function");
  }
  const wait = waitArg || 0;
  if (typeof options2 === "object") {
    leading = Boolean(options2.leading);
    maxing = "maxWait" in options2;
    maxWait = maxing ? Math.max(Number(options2.maxWait) || 0, wait) : void 0;
    trailing = "trailing" in options2 ? Boolean(options2.trailing) : trailing;
  }
  function invokeFunc(time) {
    const args = lastArgs;
    const thisArg = lastThis;
    lastArgs = void 0;
    lastThis = void 0;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }
  function startTimer(pendingFunc, wait2) {
    if (useRAF) {
      cancelAnimationFrame(timerId);
      return requestAnimationFrame(pendingFunc);
    }
    return setTimeout(pendingFunc, wait2);
  }
  function cancelTimer(id) {
    if (useRAF) {
      return cancelAnimationFrame(id);
    }
    clearTimeout(id);
  }
  function leadingEdge(time) {
    lastInvokeTime = time;
    timerId = startTimer(timerExpired, wait);
    return leading ? invokeFunc(time) : result;
  }
  function remainingWait(time) {
    const timeSinceLastCall = time - lastCallTime;
    const timeSinceLastInvoke = time - lastInvokeTime;
    const timeWaiting = wait - timeSinceLastCall;
    return maxing && maxWait ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time) {
    const timeSinceLastCall = time - lastCallTime;
    const timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && maxWait && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    const time = Date.now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    timerId = startTimer(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      cancelTimer(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(Date.now());
  }
  function pending() {
    return timerId !== void 0;
  }
  function debounced(...args) {
    const time = Date.now();
    const isInvoking = shouldInvoke(time);
    lastArgs = args;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        timerId = startTimer(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = startTimer(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  debounced.pending = pending;
  return debounced;
}
class Rect {
  static get zero() {
    return new Rect();
  }
  constructor({
    top = 0,
    left = 0,
    width = 0,
    height = 0
  } = {}) {
    this.top = top;
    this.left = left;
    this.width = width;
    this.height = height;
  }
  get center() {
    return {
      x: this.left + this.width / 2,
      y: this.top + this.height / 2
    };
  }
}
function getRectForNode(node) {
  if (!(node instanceof Element)) {
    return new Rect({
      width: window.innerWidth,
      height: window.innerHeight
    });
  }
  const rect = node.getBoundingClientRect();
  return new Rect({
    top: rect.top,
    left: rect.left,
    width: rect.width,
    height: rect.height
  });
}
const SIXTY_FPS = 1e3 / 60;
class StickyManager {
  constructor(container) {
    this.stickyItems = [];
    this.stuckItems = [];
    this.container = null;
    this.topBarOffset = 0;
    this.handleResize = debounce(() => {
      this.manageStickyItems();
    }, SIXTY_FPS, {
      leading: true,
      trailing: true,
      maxWait: SIXTY_FPS
    });
    this.handleScroll = debounce(() => {
      this.manageStickyItems();
    }, SIXTY_FPS, {
      leading: true,
      trailing: true,
      maxWait: SIXTY_FPS
    });
    if (container) {
      this.setContainer(container);
    }
  }
  registerStickyItem(stickyItem) {
    this.stickyItems.push(stickyItem);
  }
  unregisterStickyItem(nodeToRemove) {
    const nodeIndex = this.stickyItems.findIndex(({
      stickyNode
    }) => nodeToRemove === stickyNode);
    this.stickyItems.splice(nodeIndex, 1);
  }
  setContainer(el) {
    this.container = el;
    if (isDocument$1(el)) {
      this.setTopBarOffset(el);
    }
    this.container.addEventListener("scroll", this.handleScroll);
    window.addEventListener("resize", this.handleResize);
    this.manageStickyItems();
  }
  removeScrollListener() {
    if (this.container) {
      this.container.removeEventListener("scroll", this.handleScroll);
      window.removeEventListener("resize", this.handleResize);
    }
  }
  manageStickyItems() {
    if (this.stickyItems.length <= 0) {
      return;
    }
    const scrollTop = this.container ? scrollTopFor(this.container) : 0;
    const containerTop = getRectForNode(this.container).top + this.topBarOffset;
    this.stickyItems.forEach((stickyItem) => {
      const {
        handlePositioning
      } = stickyItem;
      const {
        sticky,
        top,
        left,
        width
      } = this.evaluateStickyItem(stickyItem, scrollTop, containerTop);
      this.updateStuckItems(stickyItem, sticky);
      handlePositioning(sticky, top, left, width);
    });
  }
  evaluateStickyItem(stickyItem, scrollTop, containerTop) {
    var _a2;
    const {
      stickyNode,
      placeHolderNode,
      boundingElement,
      offset,
      disableWhenStacked
    } = stickyItem;
    if (disableWhenStacked && stackedContent().matches) {
      return {
        sticky: false,
        top: 0,
        left: 0,
        width: "auto"
      };
    }
    const stickyOffset = offset ? this.getOffset(stickyNode) + parseInt(
      // Important: This will not update when the active theme changes.
      // Update this to `useTheme` once converted to a function component.
      themeDefault.space["space-500"],
      10
    ) : this.getOffset(stickyNode);
    const scrollPosition2 = scrollTop + stickyOffset;
    const placeHolderNodeCurrentTop = placeHolderNode.getBoundingClientRect().top - containerTop + scrollTop;
    const top = containerTop + stickyOffset;
    const width = placeHolderNode.getBoundingClientRect().width;
    const left = placeHolderNode.getBoundingClientRect().left;
    let sticky;
    if (boundingElement == null) {
      sticky = scrollPosition2 >= placeHolderNodeCurrentTop;
    } else {
      const stickyItemHeight = stickyNode.getBoundingClientRect().height || ((_a2 = stickyNode.firstElementChild) == null ? void 0 : _a2.getBoundingClientRect().height) || 0;
      const stickyItemBottomPosition = boundingElement.getBoundingClientRect().bottom - stickyItemHeight + scrollTop - containerTop;
      sticky = scrollPosition2 >= placeHolderNodeCurrentTop && scrollPosition2 < stickyItemBottomPosition;
    }
    return {
      sticky,
      top,
      left,
      width
    };
  }
  updateStuckItems(item, sticky) {
    const {
      stickyNode
    } = item;
    if (sticky && !this.isNodeStuck(stickyNode)) {
      this.addStuckItem(item);
    } else if (!sticky && this.isNodeStuck(stickyNode)) {
      this.removeStuckItem(item);
    }
  }
  addStuckItem(stickyItem) {
    this.stuckItems.push(stickyItem);
  }
  removeStuckItem(stickyItem) {
    const {
      stickyNode: nodeToRemove
    } = stickyItem;
    const nodeIndex = this.stuckItems.findIndex(({
      stickyNode
    }) => nodeToRemove === stickyNode);
    this.stuckItems.splice(nodeIndex, 1);
  }
  getOffset(node) {
    if (this.stuckItems.length === 0) {
      return 0;
    }
    let offset = 0;
    let count = 0;
    const stuckNodesLength = this.stuckItems.length;
    const nodeRect = getRectForNode(node);
    while (count < stuckNodesLength) {
      const stuckNode = this.stuckItems[count].stickyNode;
      if (stuckNode !== node) {
        const stuckNodeRect = getRectForNode(stuckNode);
        if (!horizontallyOverlaps(nodeRect, stuckNodeRect)) {
          offset += getRectForNode(stuckNode).height;
        }
      } else {
        break;
      }
      count++;
    }
    return offset;
  }
  isNodeStuck(node) {
    const nodeFound = this.stuckItems.findIndex(({
      stickyNode
    }) => node === stickyNode);
    return nodeFound >= 0;
  }
  setTopBarOffset(container) {
    const topbarElement = container.querySelector(`:not(${scrollable.selector}) ${dataPolarisTopBar.selector}`);
    this.topBarOffset = topbarElement ? topbarElement.clientHeight : 0;
  }
}
function isDocument$1(node) {
  return node === document;
}
function scrollTopFor(container) {
  return isDocument$1(container) ? document.body.scrollTop || document.documentElement.scrollTop : container.scrollTop;
}
function horizontallyOverlaps(rect1, rect2) {
  const rect1Left = rect1.left;
  const rect1Right = rect1.left + rect1.width;
  const rect2Left = rect2.left;
  const rect2Right = rect2.left + rect2.width;
  return rect2Right < rect1Left || rect1Right < rect2Left;
}
const SCROLL_LOCKING_ATTRIBUTE = "data-lock-scrolling";
const SCROLL_LOCKING_HIDDEN_ATTRIBUTE = "data-lock-scrolling-hidden";
const SCROLL_LOCKING_WRAPPER_ATTRIBUTE = "data-lock-scrolling-wrapper";
let scrollPosition = 0;
function isScrollBarVisible() {
  const {
    body
  } = document;
  return body.scrollHeight > body.clientHeight;
}
class ScrollLockManager {
  constructor() {
    this.scrollLocks = 0;
    this.locked = false;
  }
  registerScrollLock() {
    this.scrollLocks += 1;
    this.handleScrollLocking();
  }
  unregisterScrollLock() {
    this.scrollLocks -= 1;
    this.handleScrollLocking();
  }
  handleScrollLocking() {
    if (isServer) return;
    const {
      scrollLocks
    } = this;
    const {
      body
    } = document;
    const wrapper = body.firstElementChild;
    if (scrollLocks === 0) {
      body.removeAttribute(SCROLL_LOCKING_ATTRIBUTE);
      body.removeAttribute(SCROLL_LOCKING_HIDDEN_ATTRIBUTE);
      if (wrapper) {
        wrapper.removeAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE);
      }
      window.scroll(0, scrollPosition);
      this.locked = false;
    } else if (scrollLocks > 0 && !this.locked) {
      scrollPosition = window.pageYOffset;
      body.setAttribute(SCROLL_LOCKING_ATTRIBUTE, "");
      if (!isScrollBarVisible()) {
        body.setAttribute(SCROLL_LOCKING_HIDDEN_ATTRIBUTE, "");
      }
      if (wrapper) {
        wrapper.setAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE, "");
        wrapper.scrollTop = scrollPosition;
      }
      this.locked = true;
    }
  }
  resetScrollPosition() {
    scrollPosition = 0;
  }
}
const OBJECT_NOTATION_MATCHER = /\[(.*?)\]|(\w+)/g;
function get(obj, keypath, defaultValue) {
  if (obj == null) return void 0;
  const keys = Array.isArray(keypath) ? keypath : getKeypath(keypath);
  let acc = obj;
  for (let i = 0; i < keys.length; i++) {
    const val = acc[keys[i]];
    if (val === void 0) return defaultValue;
    acc = val;
  }
  return acc;
}
function getKeypath(str) {
  const path = [];
  let result;
  while (result = OBJECT_NOTATION_MATCHER.exec(str)) {
    const [, first, second] = result;
    path.push(first || second);
  }
  return path;
}
function merge(...objs) {
  let final = {};
  for (const obj of objs) {
    final = mergeRecursively(final, obj);
  }
  return final;
}
function mergeRecursively(inputObjA, objB) {
  const objA = Array.isArray(inputObjA) ? [...inputObjA] : {
    ...inputObjA
  };
  for (const key in objB) {
    if (!Object.prototype.hasOwnProperty.call(objB, key)) {
      continue;
    } else if (isMergeableValue(objB[key]) && isMergeableValue(objA[key])) {
      objA[key] = mergeRecursively(objA[key], objB[key]);
    } else {
      objA[key] = objB[key];
    }
  }
  return objA;
}
function isMergeableValue(value) {
  return value !== null && typeof value === "object";
}
const REPLACE_REGEX$1 = /{([^}]*)}/g;
class I18n {
  /**
   * @param translation A locale object or array of locale objects that overrides default translations. If specifying an array then your desired language dictionary should come first, followed by your fallback language dictionaries
   */
  constructor(translation) {
    this.translation = {};
    this.translation = Array.isArray(translation) ? merge(...translation.slice().reverse()) : translation;
  }
  translate(id, replacements) {
    const text = get(this.translation, id, "");
    if (!text) {
      return "";
    }
    if (replacements) {
      return text.replace(REPLACE_REGEX$1, (match) => {
        const replacement = match.substring(1, match.length - 1);
        if (replacements[replacement] === void 0) {
          const replacementData = JSON.stringify(replacements);
          throw new Error(`Error in translation for key '${id}'. No replacement found for key '${replacement}'. The following replacements were passed: '${replacementData}'`);
        }
        return replacements[replacement];
      });
    }
    return text;
  }
  translationKeyExists(path) {
    return Boolean(get(this.translation, path));
  }
}
const FeaturesContext = /* @__PURE__ */ createContext(void 0);
const I18nContext = /* @__PURE__ */ createContext(void 0);
const ScrollLockManagerContext = /* @__PURE__ */ createContext(void 0);
const StickyManagerContext = /* @__PURE__ */ createContext(void 0);
const LinkContext = /* @__PURE__ */ createContext(void 0);
const MediaQueryContext = /* @__PURE__ */ createContext(void 0);
class EventListener extends PureComponent {
  componentDidMount() {
    this.attachListener();
  }
  componentDidUpdate({
    passive,
    ...detachProps
  }) {
    this.detachListener(detachProps);
    this.attachListener();
  }
  componentWillUnmount() {
    this.detachListener();
  }
  render() {
    return null;
  }
  attachListener() {
    const {
      event,
      handler: handler2,
      capture,
      passive
    } = this.props;
    window.addEventListener(event, handler2, {
      capture,
      passive
    });
  }
  detachListener(prevProps) {
    const {
      event,
      handler: handler2,
      capture
    } = prevProps || this.props;
    window.removeEventListener(event, handler2, capture);
  }
}
const MediaQueryProvider = function MediaQueryProvider2({
  children
}) {
  const [isNavigationCollapsed, setIsNavigationCollapsed] = useState(navigationBarCollapsed().matches);
  const handleResize = useCallback(debounce(() => {
    if (isNavigationCollapsed !== navigationBarCollapsed().matches) {
      setIsNavigationCollapsed(!isNavigationCollapsed);
    }
  }, 40, {
    trailing: true,
    leading: true,
    maxWait: 40
  }), [isNavigationCollapsed]);
  useEffect(() => {
    setIsNavigationCollapsed(navigationBarCollapsed().matches);
  }, []);
  const context = useMemo(() => ({
    isNavigationCollapsed
  }), [isNavigationCollapsed]);
  return /* @__PURE__ */ React.createElement(MediaQueryContext.Provider, {
    value: context
  }, /* @__PURE__ */ React.createElement(EventListener, {
    event: "resize",
    handler: handleResize
  }), children);
};
function useIsAfterInitialMount() {
  const [isAfterInitialMount, setIsAfterInitialMount] = useState(false);
  useEffect(() => {
    setIsAfterInitialMount(true);
  }, []);
  return isAfterInitialMount;
}
const PortalsManagerContext = /* @__PURE__ */ createContext(void 0);
function PortalsContainerComponent(_props, ref) {
  return /* @__PURE__ */ React.createElement("div", {
    id: "PolarisPortalsContainer",
    ref
  });
}
const PortalsContainer = /* @__PURE__ */ forwardRef(PortalsContainerComponent);
function PortalsManager({
  children,
  container
}) {
  const isMounted = useIsAfterInitialMount();
  const ref = useRef(null);
  const contextValue = useMemo(() => {
    if (container) {
      return {
        container
      };
    } else if (isMounted) {
      return {
        container: ref.current
      };
    } else {
      return {
        container: null
      };
    }
  }, [container, isMounted]);
  return /* @__PURE__ */ React.createElement(PortalsManagerContext.Provider, {
    value: contextValue
  }, children, container ? null : /* @__PURE__ */ React.createElement(PortalsContainer, {
    ref
  }));
}
const FocusManagerContext = /* @__PURE__ */ createContext(void 0);
function FocusManager({
  children
}) {
  const [trapFocusList, setTrapFocusList] = useState([]);
  const add = useCallback((id) => {
    setTrapFocusList((list) => [...list, id]);
  }, []);
  const remove = useCallback((id) => {
    let removed = true;
    setTrapFocusList((list) => {
      const clone = [...list];
      const index = clone.indexOf(id);
      if (index === -1) {
        removed = false;
      } else {
        clone.splice(index, 1);
      }
      return clone;
    });
    return removed;
  }, []);
  const value = useMemo(() => ({
    trapFocusList,
    add,
    remove
  }), [add, trapFocusList, remove]);
  return /* @__PURE__ */ React.createElement(FocusManagerContext.Provider, {
    value
  }, children);
}
const EphemeralPresenceManagerContext = /* @__PURE__ */ createContext(void 0);
const defaultState = {
  tooltip: 0,
  hovercard: 0
};
function EphemeralPresenceManager({
  children
}) {
  const [presenceCounter, setPresenceCounter] = useState(defaultState);
  const addPresence = useCallback((key) => {
    setPresenceCounter((prevList) => ({
      ...prevList,
      [key]: prevList[key] + 1
    }));
  }, []);
  const removePresence = useCallback((key) => {
    setPresenceCounter((prevList) => ({
      ...prevList,
      [key]: prevList[key] - 1
    }));
  }, []);
  const value = useMemo(() => ({
    presenceList: Object.entries(presenceCounter).reduce((previousValue, currentValue) => {
      const [key, value2] = currentValue;
      return {
        ...previousValue,
        [key]: value2 >= 1
      };
    }, {}),
    presenceCounter,
    addPresence,
    removePresence
  }), [addPresence, removePresence, presenceCounter]);
  return /* @__PURE__ */ React.createElement(EphemeralPresenceManagerContext.Provider, {
    value
  }, children);
}
const MAX_SCROLLBAR_WIDTH = 20;
const SCROLLBAR_TEST_ELEMENT_PARENT_SIZE = 30;
const SCROLLBAR_TEST_ELEMENT_CHILD_SIZE = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE + 10;
function measureScrollbars() {
  var _a2;
  const parentEl = document.createElement("div");
  parentEl.setAttribute("style", `position: absolute; opacity: 0; transform: translate3d(-9999px, -9999px, 0); pointer-events: none; width:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px; height:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px;`);
  const child = document.createElement("div");
  child.setAttribute("style", `width:100%; height: ${SCROLLBAR_TEST_ELEMENT_CHILD_SIZE}; overflow:scroll; scrollbar-width: thin;`);
  parentEl.appendChild(child);
  document.body.appendChild(parentEl);
  const scrollbarWidth = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE - (((_a2 = parentEl.firstElementChild) == null ? void 0 : _a2.clientWidth) ?? 0);
  const scrollbarWidthWithSafetyHatch = Math.min(scrollbarWidth, MAX_SCROLLBAR_WIDTH);
  document.documentElement.style.setProperty("--pc-app-provider-scrollbar-width", `${scrollbarWidthWithSafetyHatch}px`);
  document.body.removeChild(parentEl);
}
class AppProvider extends Component {
  constructor(props) {
    super(props);
    this.setBodyStyles = () => {
      document.body.style.backgroundColor = "var(--p-color-bg)";
      document.body.style.color = "var(--p-color-text)";
    };
    this.setRootAttributes = () => {
      const activeThemeName = this.getThemeName();
      themeNames.forEach((themeName) => {
        document.documentElement.classList.toggle(createThemeClassName(themeName), themeName === activeThemeName);
      });
    };
    this.getThemeName = () => this.props.theme ?? themeNameDefault;
    this.stickyManager = new StickyManager();
    this.scrollLockManager = new ScrollLockManager();
    const {
      i18n,
      linkComponent
    } = this.props;
    this.state = {
      link: linkComponent,
      intl: new I18n(i18n)
    };
  }
  componentDidMount() {
    if (document != null) {
      this.stickyManager.setContainer(document);
      this.setBodyStyles();
      this.setRootAttributes();
      const isSafari16 = navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome") && (navigator.userAgent.includes("Version/16.1") || navigator.userAgent.includes("Version/16.2") || navigator.userAgent.includes("Version/16.3"));
      const isMobileApp16 = navigator.userAgent.includes("Shopify Mobile/iOS") && (navigator.userAgent.includes("OS 16_1") || navigator.userAgent.includes("OS 16_2") || navigator.userAgent.includes("OS 16_3"));
      if (isSafari16 || isMobileApp16) {
        document.documentElement.classList.add("Polaris-Safari-16-Font-Optical-Sizing-Patch");
      }
    }
    measureScrollbars();
  }
  componentDidUpdate({
    i18n: prevI18n,
    linkComponent: prevLinkComponent
  }) {
    const {
      i18n,
      linkComponent
    } = this.props;
    this.setRootAttributes();
    if (i18n === prevI18n && linkComponent === prevLinkComponent) {
      return;
    }
    this.setState({
      link: linkComponent,
      intl: new I18n(i18n)
    });
  }
  render() {
    const {
      children,
      features
    } = this.props;
    const themeName = this.getThemeName();
    const {
      intl,
      link
    } = this.state;
    return /* @__PURE__ */ React.createElement(ThemeNameContext.Provider, {
      value: themeName
    }, /* @__PURE__ */ React.createElement(ThemeContext.Provider, {
      value: getTheme(themeName)
    }, /* @__PURE__ */ React.createElement(FeaturesContext.Provider, {
      value: features
    }, /* @__PURE__ */ React.createElement(I18nContext.Provider, {
      value: intl
    }, /* @__PURE__ */ React.createElement(ScrollLockManagerContext.Provider, {
      value: this.scrollLockManager
    }, /* @__PURE__ */ React.createElement(StickyManagerContext.Provider, {
      value: this.stickyManager
    }, /* @__PURE__ */ React.createElement(LinkContext.Provider, {
      value: link
    }, /* @__PURE__ */ React.createElement(MediaQueryProvider, null, /* @__PURE__ */ React.createElement(PortalsManager, null, /* @__PURE__ */ React.createElement(FocusManager, null, /* @__PURE__ */ React.createElement(EphemeralPresenceManager, null, children)))))))))));
  }
}
function isElementInViewport(element) {
  const {
    top,
    left,
    bottom,
    right
  } = element.getBoundingClientRect();
  return top >= 0 && right <= window.innerWidth && bottom <= window.innerHeight && left >= 0;
}
const FOCUSABLE_SELECTOR = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]';
const KEYBOARD_FOCUSABLE_SELECTORS = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]:not([tabindex="-1"])';
const MENUITEM_FOCUSABLE_SELECTORS = 'a[role="menuitem"],frame[role="menuitem"],iframe[role="menuitem"],input[role="menuitem"]:not([type=hidden]):not(:disabled),select[role="menuitem"]:not(:disabled),textarea[role="menuitem"]:not(:disabled),button[role="menuitem"]:not(:disabled),*[tabindex]:not([tabindex="-1"])';
const handleMouseUpByBlurring = ({
  currentTarget
}) => currentTarget.blur();
function nextFocusableNode(node, filter) {
  const allFocusableElements = [...document.querySelectorAll(FOCUSABLE_SELECTOR)];
  const sliceLocation = allFocusableElements.indexOf(node) + 1;
  const focusableElementsAfterNode = allFocusableElements.slice(sliceLocation);
  for (const focusableElement of focusableElementsAfterNode) {
    if (isElementInViewport(focusableElement) && (!filter || filter && filter(focusableElement))) {
      return focusableElement;
    }
  }
  return null;
}
function findFirstFocusableNode(element, onlyDescendants = true) {
  if (!onlyDescendants && matches(element, FOCUSABLE_SELECTOR)) {
    return element;
  }
  return element.querySelector(FOCUSABLE_SELECTOR);
}
function findFirstFocusableNodeIncludingDisabled(element) {
  const focusableSelector = `a,button,frame,iframe,input:not([type=hidden]),select,textarea,*[tabindex]`;
  if (matches(element, focusableSelector)) {
    return element;
  }
  return element.querySelector(focusableSelector);
}
function focusFirstFocusableNode(element, onlyDescendants = true) {
  var _a2;
  (_a2 = findFirstFocusableNode(element, onlyDescendants)) == null ? void 0 : _a2.focus();
}
function focusNextFocusableNode(node, filter) {
  const nextFocusable = nextFocusableNode(node, filter);
  if (nextFocusable && nextFocusable instanceof HTMLElement) {
    nextFocusable.focus();
    return true;
  }
  return false;
}
function findFirstKeyboardFocusableNode(element, onlyDescendants = true) {
  if (!onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS)) {
    return element;
  }
  return element.querySelector(KEYBOARD_FOCUSABLE_SELECTORS);
}
function focusFirstKeyboardFocusableNode(element, onlyDescendants = true) {
  const firstFocusable = findFirstKeyboardFocusableNode(element, onlyDescendants);
  if (firstFocusable) {
    firstFocusable.focus();
    return true;
  }
  return false;
}
function findLastKeyboardFocusableNode(element, onlyDescendants = true) {
  if (!onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS)) {
    return element;
  }
  const allFocusable = element.querySelectorAll(KEYBOARD_FOCUSABLE_SELECTORS);
  return allFocusable[allFocusable.length - 1];
}
function focusLastKeyboardFocusableNode(element, onlyDescendants = true) {
  const lastFocusable = findLastKeyboardFocusableNode(element, onlyDescendants);
  if (lastFocusable) {
    lastFocusable.focus();
    return true;
  }
  return false;
}
function wrapFocusPreviousFocusableMenuItem(parentElement, currentFocusedElement) {
  const allFocusableChildren = getMenuFocusableDescendants(parentElement);
  const currentItemIdx = getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement);
  if (currentItemIdx === -1) {
    allFocusableChildren[0].focus();
  } else {
    allFocusableChildren[(currentItemIdx - 1 + allFocusableChildren.length) % allFocusableChildren.length].focus();
  }
}
function wrapFocusNextFocusableMenuItem(parentElement, currentFocusedElement) {
  const allFocusableChildren = getMenuFocusableDescendants(parentElement);
  const currentItemIdx = getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement);
  if (currentItemIdx === -1) {
    allFocusableChildren[0].focus();
  } else {
    allFocusableChildren[(currentItemIdx + 1) % allFocusableChildren.length].focus();
  }
}
function getMenuFocusableDescendants(element) {
  return element.querySelectorAll(MENUITEM_FOCUSABLE_SELECTORS);
}
function getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement) {
  let currentItemIdx = 0;
  for (const focusableChild of allFocusableChildren) {
    if (focusableChild === currentFocusedElement) {
      break;
    }
    currentItemIdx++;
  }
  return currentItemIdx === allFocusableChildren.length ? -1 : currentItemIdx;
}
function matches(node, selector) {
  if (node.matches) {
    return node.matches(selector);
  }
  const matches2 = (node.ownerDocument || document).querySelectorAll(selector);
  let i = matches2.length;
  while (--i >= 0 && matches2.item(i) !== node) return i > -1;
}
var styles$12 = {
  "Button": "Polaris-Button",
  "disabled": "Polaris-Button--disabled",
  "pressed": "Polaris-Button--pressed",
  "variantPrimary": "Polaris-Button--variantPrimary",
  "variantSecondary": "Polaris-Button--variantSecondary",
  "variantTertiary": "Polaris-Button--variantTertiary",
  "variantPlain": "Polaris-Button--variantPlain",
  "removeUnderline": "Polaris-Button--removeUnderline",
  "variantMonochromePlain": "Polaris-Button--variantMonochromePlain",
  "toneSuccess": "Polaris-Button--toneSuccess",
  "toneCritical": "Polaris-Button--toneCritical",
  "sizeMicro": "Polaris-Button--sizeMicro",
  "sizeSlim": "Polaris-Button--sizeSlim",
  "sizeMedium": "Polaris-Button--sizeMedium",
  "sizeLarge": "Polaris-Button--sizeLarge",
  "textAlignCenter": "Polaris-Button--textAlignCenter",
  "textAlignStart": "Polaris-Button--textAlignStart",
  "textAlignLeft": "Polaris-Button--textAlignLeft",
  "textAlignEnd": "Polaris-Button--textAlignEnd",
  "textAlignRight": "Polaris-Button--textAlignRight",
  "fullWidth": "Polaris-Button--fullWidth",
  "iconOnly": "Polaris-Button--iconOnly",
  "iconWithText": "Polaris-Button--iconWithText",
  "disclosure": "Polaris-Button--disclosure",
  "loading": "Polaris-Button--loading",
  "pressable": "Polaris-Button--pressable",
  "hidden": "Polaris-Button--hidden",
  "Icon": "Polaris-Button__Icon",
  "Spinner": "Polaris-Button__Spinner"
};
var styles$11 = {
  "Icon": "Polaris-Icon",
  "toneInherit": "Polaris-Icon--toneInherit",
  "toneBase": "Polaris-Icon--toneBase",
  "toneSubdued": "Polaris-Icon--toneSubdued",
  "toneCaution": "Polaris-Icon--toneCaution",
  "toneWarning": "Polaris-Icon--toneWarning",
  "toneCritical": "Polaris-Icon--toneCritical",
  "toneInteractive": "Polaris-Icon--toneInteractive",
  "toneInfo": "Polaris-Icon--toneInfo",
  "toneSuccess": "Polaris-Icon--toneSuccess",
  "tonePrimary": "Polaris-Icon--tonePrimary",
  "toneEmphasis": "Polaris-Icon--toneEmphasis",
  "toneMagic": "Polaris-Icon--toneMagic",
  "toneTextCaution": "Polaris-Icon--toneTextCaution",
  "toneTextWarning": "Polaris-Icon--toneTextWarning",
  "toneTextCritical": "Polaris-Icon--toneTextCritical",
  "toneTextInfo": "Polaris-Icon--toneTextInfo",
  "toneTextPrimary": "Polaris-Icon--toneTextPrimary",
  "toneTextSuccess": "Polaris-Icon--toneTextSuccess",
  "toneTextMagic": "Polaris-Icon--toneTextMagic",
  "Svg": "Polaris-Icon__Svg",
  "Img": "Polaris-Icon__Img",
  "Placeholder": "Polaris-Icon__Placeholder"
};
var styles$10 = {
  "root": "Polaris-Text--root",
  "block": "Polaris-Text--block",
  "truncate": "Polaris-Text--truncate",
  "visuallyHidden": "Polaris-Text--visuallyHidden",
  "start": "Polaris-Text--start",
  "center": "Polaris-Text--center",
  "end": "Polaris-Text--end",
  "justify": "Polaris-Text--justify",
  "base": "Polaris-Text--base",
  "inherit": "Polaris-Text--inherit",
  "disabled": "Polaris-Text--disabled",
  "success": "Polaris-Text--success",
  "critical": "Polaris-Text--critical",
  "caution": "Polaris-Text--caution",
  "subdued": "Polaris-Text--subdued",
  "magic": "Polaris-Text--magic",
  "magic-subdued": "Polaris-Text__magic--subdued",
  "text-inverse": "Polaris-Text__text--inverse",
  "text-inverse-secondary": "Polaris-Text--textInverseSecondary",
  "headingXs": "Polaris-Text--headingXs",
  "headingSm": "Polaris-Text--headingSm",
  "headingMd": "Polaris-Text--headingMd",
  "headingLg": "Polaris-Text--headingLg",
  "headingXl": "Polaris-Text--headingXl",
  "heading2xl": "Polaris-Text--heading2xl",
  "heading3xl": "Polaris-Text--heading3xl",
  "bodyXs": "Polaris-Text--bodyXs",
  "bodySm": "Polaris-Text--bodySm",
  "bodyMd": "Polaris-Text--bodyMd",
  "bodyLg": "Polaris-Text--bodyLg",
  "regular": "Polaris-Text--regular",
  "medium": "Polaris-Text--medium",
  "semibold": "Polaris-Text--semibold",
  "bold": "Polaris-Text--bold",
  "break": "Polaris-Text--break",
  "numeric": "Polaris-Text--numeric",
  "line-through": "Polaris-Text__line--through"
};
const deprecatedVariants = {
  heading3xl: "heading2xl"
};
const Text = ({
  alignment,
  as,
  breakWord,
  children,
  tone,
  fontWeight,
  id,
  numeric = false,
  truncate = false,
  variant,
  visuallyHidden = false,
  textDecorationLine
}) => {
  if (process.env.NODE_ENV === "development" && variant && Object.prototype.hasOwnProperty.call(deprecatedVariants, variant)) {
    console.warn(`Deprecation: <Text variant="${variant}" />. The value "${variant}" will be removed in a future major version of Polaris. Use "${deprecatedVariants[variant]}" instead.`);
  }
  const Component2 = as || (visuallyHidden ? "span" : "p");
  const className = classNames(styles$10.root, variant && styles$10[variant], fontWeight && styles$10[fontWeight], (alignment || truncate) && styles$10.block, alignment && styles$10[alignment], breakWord && styles$10.break, tone && styles$10[tone], numeric && styles$10.numeric, truncate && styles$10.truncate, visuallyHidden && styles$10.visuallyHidden, textDecorationLine && styles$10[textDecorationLine]);
  return /* @__PURE__ */ React.createElement(Component2, Object.assign({
    className
  }, id && {
    id
  }), children);
};
function Icon({
  source,
  tone,
  accessibilityLabel
}) {
  let sourceType;
  if (typeof source === "function") {
    sourceType = "function";
  } else if (source === "placeholder") {
    sourceType = "placeholder";
  } else {
    sourceType = "external";
  }
  if (tone && sourceType === "external" && process.env.NODE_ENV === "development") {
    console.warn("Recoloring external SVGs is not supported. Set the intended color on your SVG instead.");
  }
  const className = classNames(styles$11.Icon, tone && styles$11[variationName("tone", tone)]);
  const {
    mdDown
  } = useBreakpoints();
  const SourceComponent = source;
  const contentMarkup = {
    function: /* @__PURE__ */ React.createElement(SourceComponent, Object.assign({
      className: styles$11.Svg,
      focusable: "false",
      "aria-hidden": "true"
      // On Mobile we're scaling the viewBox to 18x18 to make the icons bigger
      // Also, we're setting the viewport origin to 1x1 to center the icon
      // We use this syntax so we don't override the existing viewBox value if we don't need to.
    }, mdDown ? {
      viewBox: "1 1 18 18"
    } : {})),
    placeholder: /* @__PURE__ */ React.createElement("div", {
      className: styles$11.Placeholder
    }),
    external: /* @__PURE__ */ React.createElement("img", {
      className: styles$11.Img,
      src: `data:image/svg+xml;utf8,${source}`,
      alt: "",
      "aria-hidden": "true"
    })
  };
  return /* @__PURE__ */ React.createElement("span", {
    className
  }, accessibilityLabel && /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, accessibilityLabel), contentMarkup[sourceType]);
}
var styles$$ = {
  "Spinner": "Polaris-Spinner",
  "sizeSmall": "Polaris-Spinner--sizeSmall",
  "sizeLarge": "Polaris-Spinner--sizeLarge"
};
function Spinner$1({
  size = "large",
  accessibilityLabel,
  hasFocusableParent
}) {
  const isAfterInitialMount = useIsAfterInitialMount();
  const className = classNames(styles$$.Spinner, size && styles$$[variationName("size", size)]);
  const spinnerSVGMarkup = size === "large" ? /* @__PURE__ */ React.createElement("svg", {
    viewBox: "0 0 44 44",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ React.createElement("path", {
    d: "M15.542 1.487A21.507 21.507 0 00.5 22c0 11.874 9.626 21.5 21.5 21.5 9.847 0 18.364-6.675 20.809-16.072a1.5 1.5 0 00-2.904-.756C37.803 34.755 30.473 40.5 22 40.5 11.783 40.5 3.5 32.217 3.5 22c0-8.137 5.3-15.247 12.942-17.65a1.5 1.5 0 10-.9-2.863z"
  })) : /* @__PURE__ */ React.createElement("svg", {
    viewBox: "0 0 20 20",
    xmlns: "http://www.w3.org/2000/svg"
  }, /* @__PURE__ */ React.createElement("path", {
    d: "M7.229 1.173a9.25 9.25 0 1011.655 11.412 1.25 1.25 0 10-2.4-.698 6.75 6.75 0 11-8.506-8.329 1.25 1.25 0 10-.75-2.385z"
  }));
  const spanAttributes = {
    ...!hasFocusableParent && {
      role: "status"
    }
  };
  const accessibilityLabelMarkup = (isAfterInitialMount || !hasFocusableParent) && /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, accessibilityLabel);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("span", {
    className
  }, spinnerSVGMarkup), /* @__PURE__ */ React.createElement("span", spanAttributes, accessibilityLabelMarkup));
}
function useDisableClick(disabled, handleClick) {
  const handleClickWrapper = useCallback((event) => {
    if (disabled) {
      event.preventDefault();
      event.stopPropagation();
    }
  }, [disabled]);
  if (!disabled) {
    return handleClick;
  }
  return handleClickWrapper;
}
function useLink() {
  return useContext(LinkContext);
}
const UnstyledLink = /* @__PURE__ */ memo(/* @__PURE__ */ forwardRef(function UnstyledLink2(props, _ref) {
  const LinkComponent = useLink();
  if (LinkComponent) {
    return /* @__PURE__ */ React.createElement(LinkComponent, Object.assign({}, unstyled.props, props, {
      ref: _ref
    }));
  }
  const {
    external,
    url,
    target: targetProp,
    ...rest
  } = props;
  let target;
  if (external) {
    target = "_blank";
  } else {
    target = targetProp ?? void 0;
  }
  const rel = target === "_blank" ? "noopener noreferrer" : void 0;
  return /* @__PURE__ */ React.createElement("a", Object.assign({
    target
  }, rest, {
    href: url,
    rel
  }, unstyled.props, {
    ref: _ref
  }));
}));
function UnstyledButton({
  id,
  children,
  className,
  url,
  external,
  target,
  download,
  submit,
  disabled,
  loading,
  pressed,
  accessibilityLabel,
  role,
  ariaControls,
  ariaExpanded,
  ariaDescribedBy,
  ariaChecked,
  onClick,
  onFocus,
  onBlur,
  onKeyDown,
  onKeyPress,
  onKeyUp,
  onMouseEnter,
  onTouchStart,
  ...rest
}) {
  let buttonMarkup;
  const commonProps = {
    id,
    className,
    "aria-label": accessibilityLabel
  };
  const interactiveProps = {
    ...commonProps,
    role,
    onClick,
    onFocus,
    onBlur,
    onMouseUp: handleMouseUpByBlurring,
    onMouseEnter,
    onTouchStart
  };
  const handleClick = useDisableClick(disabled, onClick);
  if (url) {
    buttonMarkup = disabled ? (
      // Render an `<a>` so toggling disabled/enabled state changes only the
      // `href` attribute instead of replacing the whole element.
      /* @__PURE__ */ React.createElement("a", commonProps, children)
    ) : /* @__PURE__ */ React.createElement(UnstyledLink, Object.assign({}, interactiveProps, {
      url,
      external,
      target,
      download
    }, rest), children);
  } else {
    buttonMarkup = /* @__PURE__ */ React.createElement("button", Object.assign({}, interactiveProps, {
      "aria-disabled": disabled,
      type: submit ? "submit" : "button",
      "aria-busy": loading ? true : void 0,
      "aria-controls": ariaControls,
      "aria-expanded": ariaExpanded,
      "aria-describedby": ariaDescribedBy,
      "aria-checked": ariaChecked,
      "aria-pressed": pressed,
      onKeyDown,
      onKeyUp,
      onKeyPress,
      onClick: handleClick,
      tabIndex: disabled ? -1 : void 0
    }, rest), children);
  }
  return buttonMarkup;
}
class MissingAppProviderError extends Error {
  constructor(message = "") {
    super(`${message ? `${message} ` : message}Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.`);
    this.name = "MissingAppProviderError";
  }
}
function useI18n() {
  const i18n = useContext(I18nContext);
  if (!i18n) {
    throw new MissingAppProviderError("No i18n was provided.");
  }
  return i18n;
}
function Button({
  id,
  children,
  url,
  disabled,
  external,
  download,
  target,
  submit,
  loading,
  pressed,
  accessibilityLabel,
  role,
  ariaControls,
  ariaExpanded,
  ariaDescribedBy,
  ariaChecked,
  onClick,
  onFocus,
  onBlur,
  onKeyDown,
  onKeyPress,
  onKeyUp,
  onMouseEnter,
  onTouchStart,
  onPointerDown,
  icon,
  disclosure,
  removeUnderline,
  size = "medium",
  textAlign = "center",
  fullWidth,
  dataPrimaryLink,
  tone,
  variant = "secondary"
}) {
  const i18n = useI18n();
  const isDisabled = disabled || loading;
  const {
    mdUp
  } = useBreakpoints();
  const className = classNames(styles$12.Button, styles$12.pressable, styles$12[variationName("variant", variant)], styles$12[variationName("size", size)], styles$12[variationName("textAlign", textAlign)], fullWidth && styles$12.fullWidth, disclosure && styles$12.disclosure, icon && children && styles$12.iconWithText, icon && children == null && styles$12.iconOnly, isDisabled && styles$12.disabled, loading && styles$12.loading, pressed && !disabled && !url && styles$12.pressed, removeUnderline && styles$12.removeUnderline, tone && styles$12[variationName("tone", tone)]);
  const disclosureMarkup = disclosure ? /* @__PURE__ */ React.createElement("span", {
    className: loading ? styles$12.hidden : styles$12.Icon
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: loading ? "placeholder" : getDisclosureIconSource(disclosure, ChevronUpIcon, ChevronDownIcon)
  })) : null;
  const iconSource = isIconSource(icon) ? /* @__PURE__ */ React.createElement(Icon, {
    source: loading ? "placeholder" : icon
  }) : icon;
  const iconMarkup = iconSource ? /* @__PURE__ */ React.createElement("span", {
    className: loading ? styles$12.hidden : styles$12.Icon
  }, iconSource) : null;
  const hasPlainText = ["plain", "monochromePlain"].includes(variant);
  let textFontWeight = "medium";
  if (hasPlainText) {
    textFontWeight = "regular";
  } else if (variant === "primary") {
    textFontWeight = mdUp ? "medium" : "semibold";
  }
  let textVariant = "bodySm";
  if (size === "large" || hasPlainText && size !== "micro") {
    textVariant = "bodyMd";
  }
  const childMarkup = children ? /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: textVariant,
    fontWeight: textFontWeight,
    key: disabled ? "text-disabled" : "text"
  }, children) : null;
  const spinnerSVGMarkup = loading ? /* @__PURE__ */ React.createElement("span", {
    className: styles$12.Spinner
  }, /* @__PURE__ */ React.createElement(Spinner$1, {
    size: "small",
    accessibilityLabel: i18n.translate("Polaris.Button.spinnerAccessibilityLabel")
  })) : null;
  const commonProps = {
    id,
    className,
    accessibilityLabel,
    ariaDescribedBy,
    role,
    onClick,
    onFocus,
    onBlur,
    onMouseUp: handleMouseUpByBlurring,
    onMouseEnter,
    onTouchStart,
    "data-primary-link": dataPrimaryLink
  };
  const linkProps = {
    url,
    external,
    download,
    target
  };
  const actionProps = {
    submit,
    disabled: isDisabled,
    loading,
    ariaControls,
    ariaExpanded,
    ariaChecked,
    pressed,
    onKeyDown,
    onKeyUp,
    onKeyPress,
    onPointerDown
  };
  const buttonMarkup = /* @__PURE__ */ React.createElement(UnstyledButton, Object.assign({}, commonProps, linkProps, actionProps), spinnerSVGMarkup, iconMarkup, childMarkup, disclosureMarkup);
  return buttonMarkup;
}
function isIconSource(x) {
  return typeof x === "string" || typeof x === "object" && x.body || typeof x === "function";
}
function getDisclosureIconSource(disclosure, upIcon, downIcon) {
  if (disclosure === "select") {
    return SelectIcon;
  }
  return disclosure === "up" ? upIcon : downIcon;
}
function buttonsFrom(actions, overrides = {}) {
  if (Array.isArray(actions)) {
    return actions.map((action2, index) => buttonFrom(action2, overrides, index));
  } else {
    const action2 = actions;
    return buttonFrom(action2, overrides);
  }
}
function buttonFrom({
  content,
  onAction,
  plain,
  destructive,
  ...action2
}, overrides, key) {
  const plainVariant = plain ? "plain" : void 0;
  const destructiveVariant = destructive ? "primary" : void 0;
  const tone = !(overrides == null ? void 0 : overrides.tone) && destructive ? "critical" : overrides == null ? void 0 : overrides.tone;
  return /* @__PURE__ */ React.createElement(Button, Object.assign({
    key,
    onClick: onAction,
    tone,
    variant: plainVariant || destructiveVariant
  }, action2, overrides), content);
}
var styles$_ = {
  "ShadowBevel": "Polaris-ShadowBevel"
};
function ShadowBevel(props) {
  const {
    as = "div",
    bevel = true,
    borderRadius,
    boxShadow,
    children,
    zIndex = "0"
  } = props;
  const Component2 = as;
  return /* @__PURE__ */ React.createElement(Component2, {
    className: styles$_.ShadowBevel,
    style: {
      "--pc-shadow-bevel-z-index": zIndex,
      ...getResponsiveValue("shadow-bevel", "content", mapResponsiveProp(bevel, (bevel2) => bevel2 ? '""' : "none")),
      ...getResponsiveValue("shadow-bevel", "box-shadow", mapResponsiveProp(bevel, (bevel2) => bevel2 ? `var(--p-shadow-${boxShadow})` : "none")),
      ...getResponsiveValue("shadow-bevel", "border-radius", mapResponsiveProp(bevel, (bevel2) => bevel2 ? `var(--p-border-radius-${borderRadius})` : "var(--p-border-radius-0)"))
    }
  }, children);
}
function mapResponsiveProp(responsiveProp, callback) {
  if (typeof responsiveProp === "boolean") {
    return callback(responsiveProp);
  }
  return Object.fromEntries(Object.entries(responsiveProp).map(([breakpointsAlias, value]) => [breakpointsAlias, callback(value)]));
}
var styles$Z = {
  "listReset": "Polaris-Box--listReset",
  "Box": "Polaris-Box",
  "visuallyHidden": "Polaris-Box--visuallyHidden",
  "printHidden": "Polaris-Box--printHidden"
};
const Box = /* @__PURE__ */ forwardRef(({
  as = "div",
  background,
  borderColor,
  borderStyle,
  borderWidth,
  borderBlockStartWidth,
  borderBlockEndWidth,
  borderInlineStartWidth,
  borderInlineEndWidth,
  borderRadius,
  borderEndStartRadius,
  borderEndEndRadius,
  borderStartStartRadius,
  borderStartEndRadius,
  children,
  color,
  id,
  minHeight,
  minWidth,
  maxWidth,
  overflowX,
  overflowY,
  outlineColor,
  outlineStyle,
  outlineWidth,
  padding,
  paddingBlock,
  paddingBlockStart,
  paddingBlockEnd,
  paddingInline,
  paddingInlineStart,
  paddingInlineEnd,
  role,
  shadow,
  tabIndex,
  width,
  printHidden,
  visuallyHidden,
  position,
  insetBlockStart,
  insetBlockEnd,
  insetInlineStart,
  insetInlineEnd,
  zIndex,
  opacity,
  ...restProps
}, ref) => {
  const borderStyleValue = borderStyle ? borderStyle : borderColor || borderWidth || borderBlockStartWidth || borderBlockEndWidth || borderInlineStartWidth || borderInlineEndWidth ? "solid" : void 0;
  const outlineStyleValue = outlineStyle ? outlineStyle : outlineColor || outlineWidth ? "solid" : void 0;
  const style = {
    "--pc-box-color": color ? `var(--p-color-${color})` : void 0,
    "--pc-box-background": background ? `var(--p-color-${background})` : void 0,
    // eslint-disable-next-line no-nested-ternary
    "--pc-box-border-color": borderColor ? borderColor === "transparent" ? "transparent" : `var(--p-color-${borderColor})` : void 0,
    "--pc-box-border-style": borderStyleValue,
    "--pc-box-border-radius": borderRadius ? `var(--p-border-radius-${borderRadius})` : void 0,
    "--pc-box-border-end-start-radius": borderEndStartRadius ? `var(--p-border-radius-${borderEndStartRadius})` : void 0,
    "--pc-box-border-end-end-radius": borderEndEndRadius ? `var(--p-border-radius-${borderEndEndRadius})` : void 0,
    "--pc-box-border-start-start-radius": borderStartStartRadius ? `var(--p-border-radius-${borderStartStartRadius})` : void 0,
    "--pc-box-border-start-end-radius": borderStartEndRadius ? `var(--p-border-radius-${borderStartEndRadius})` : void 0,
    "--pc-box-border-width": borderWidth ? `var(--p-border-width-${borderWidth})` : void 0,
    "--pc-box-border-block-start-width": borderBlockStartWidth ? `var(--p-border-width-${borderBlockStartWidth})` : void 0,
    "--pc-box-border-block-end-width": borderBlockEndWidth ? `var(--p-border-width-${borderBlockEndWidth})` : void 0,
    "--pc-box-border-inline-start-width": borderInlineStartWidth ? `var(--p-border-width-${borderInlineStartWidth})` : void 0,
    "--pc-box-border-inline-end-width": borderInlineEndWidth ? `var(--p-border-width-${borderInlineEndWidth})` : void 0,
    "--pc-box-min-height": minHeight,
    "--pc-box-min-width": minWidth,
    "--pc-box-max-width": maxWidth,
    "--pc-box-outline-color": outlineColor ? `var(--p-color-${outlineColor})` : void 0,
    "--pc-box-outline-style": outlineStyleValue,
    "--pc-box-outline-width": outlineWidth ? `var(--p-border-width-${outlineWidth})` : void 0,
    "--pc-box-overflow-x": overflowX,
    "--pc-box-overflow-y": overflowY,
    ...getResponsiveProps("box", "padding-block-start", "space", paddingBlockStart || paddingBlock || padding),
    ...getResponsiveProps("box", "padding-block-end", "space", paddingBlockEnd || paddingBlock || padding),
    ...getResponsiveProps("box", "padding-inline-start", "space", paddingInlineStart || paddingInline || padding),
    ...getResponsiveProps("box", "padding-inline-end", "space", paddingInlineEnd || paddingInline || padding),
    "--pc-box-shadow": shadow ? `var(--p-shadow-${shadow})` : void 0,
    "--pc-box-width": width,
    position,
    "--pc-box-inset-block-start": insetBlockStart ? `var(--p-space-${insetBlockStart})` : void 0,
    "--pc-box-inset-block-end": insetBlockEnd ? `var(--p-space-${insetBlockEnd})` : void 0,
    "--pc-box-inset-inline-start": insetInlineStart ? `var(--p-space-${insetInlineStart})` : void 0,
    "--pc-box-inset-inline-end": insetInlineEnd ? `var(--p-space-${insetInlineEnd})` : void 0,
    zIndex,
    opacity
  };
  const className = classNames(styles$Z.Box, visuallyHidden && styles$Z.visuallyHidden, printHidden && styles$Z.printHidden, as === "ul" && styles$Z.listReset);
  return /* @__PURE__ */ React.createElement(as, {
    className,
    id,
    ref,
    style: sanitizeCustomProperties(style),
    role,
    tabIndex,
    ...restProps
  }, children);
});
Box.displayName = "Box";
const Card = ({
  children,
  background = "bg-surface",
  padding = {
    xs: "400"
  },
  roundedAbove = "sm"
}) => {
  const breakpoints = useBreakpoints();
  const defaultBorderRadius = "300";
  const hasBorderRadius = Boolean(breakpoints[`${roundedAbove}Up`]);
  return /* @__PURE__ */ React.createElement(WithinContentContext.Provider, {
    value: true
  }, /* @__PURE__ */ React.createElement(ShadowBevel, {
    boxShadow: "100",
    borderRadius: hasBorderRadius ? defaultBorderRadius : "0",
    zIndex: "32"
  }, /* @__PURE__ */ React.createElement(Box, {
    background,
    padding,
    overflowX: "clip",
    overflowY: "clip",
    minHeight: "100%"
  }, children)));
};
var styles$Y = {
  "InlineStack": "Polaris-InlineStack"
};
const InlineStack = function InlineStack2({
  as: Element2 = "div",
  align,
  direction = "row",
  blockAlign,
  gap,
  wrap = true,
  children
}) {
  const style = {
    "--pc-inline-stack-align": align,
    "--pc-inline-stack-block-align": blockAlign,
    "--pc-inline-stack-wrap": wrap ? "wrap" : "nowrap",
    ...getResponsiveProps("inline-stack", "gap", "space", gap),
    ...getResponsiveValue("inline-stack", "flex-direction", direction)
  };
  return /* @__PURE__ */ React.createElement(Element2, {
    className: styles$Y.InlineStack,
    style
  }, children);
};
var styles$X = {
  "BlockStack": "Polaris-BlockStack",
  "listReset": "Polaris-BlockStack--listReset",
  "fieldsetReset": "Polaris-BlockStack--fieldsetReset"
};
const BlockStack = ({
  as = "div",
  children,
  align,
  inlineAlign,
  gap,
  id,
  reverseOrder = false,
  ...restProps
}) => {
  const className = classNames(styles$X.BlockStack, (as === "ul" || as === "ol") && styles$X.listReset, as === "fieldset" && styles$X.fieldsetReset);
  const style = {
    "--pc-block-stack-align": align ? `${align}` : null,
    "--pc-block-stack-inline-align": inlineAlign ? `${inlineAlign}` : null,
    "--pc-block-stack-order": reverseOrder ? "column-reverse" : "column",
    ...getResponsiveProps("block-stack", "gap", "space", gap)
  };
  return /* @__PURE__ */ React.createElement(as, {
    className,
    id,
    style: sanitizeCustomProperties(style),
    ...restProps
  }, children);
};
var styles$W = {
  "Avatar": "Polaris-Avatar",
  "imageHasLoaded": "Polaris-Avatar--imageHasLoaded",
  "Text": "Polaris-Avatar__Text",
  "long": "Polaris-Avatar--long",
  "hidden": "Polaris-Avatar--hidden",
  "sizeXs": "Polaris-Avatar--sizeXs",
  "sizeSm": "Polaris-Avatar--sizeSm",
  "sizeMd": "Polaris-Avatar--sizeMd",
  "sizeLg": "Polaris-Avatar--sizeLg",
  "sizeXl": "Polaris-Avatar--sizeXl",
  "styleOne": "Polaris-Avatar--styleOne",
  "styleTwo": "Polaris-Avatar--styleTwo",
  "styleThree": "Polaris-Avatar--styleThree",
  "styleFour": "Polaris-Avatar--styleFour",
  "styleFive": "Polaris-Avatar--styleFive",
  "styleSix": "Polaris-Avatar--styleSix",
  "styleSeven": "Polaris-Avatar--styleSeven",
  "Image": "Polaris-Avatar__Image",
  "Initials": "Polaris-Avatar__Initials",
  "Svg": "Polaris-Avatar__Svg"
};
function Image({
  alt,
  sourceSet,
  source,
  crossOrigin,
  onLoad,
  className,
  ...rest
}) {
  const finalSourceSet = sourceSet ? sourceSet.map(({
    source: subSource,
    descriptor
  }) => `${subSource} ${descriptor}`).join(",") : null;
  const handleLoad = useCallback(() => {
    if (onLoad) onLoad();
  }, [onLoad]);
  return /* @__PURE__ */ React.createElement("img", Object.assign({
    alt,
    src: source,
    crossOrigin,
    className,
    onLoad: handleLoad
  }, finalSourceSet ? {
    srcSet: finalSourceSet
  } : {}, rest));
}
var Status;
(function(Status2) {
  Status2["Pending"] = "PENDING";
  Status2["Loaded"] = "LOADED";
  Status2["Errored"] = "ERRORED";
})(Status || (Status = {}));
const STYLE_CLASSES = ["one", "two", "three", "four", "five", "six", "seven"];
const avatarStrokeWidth = {
  xs: "3",
  sm: "2.5",
  md: "2.5",
  lg: "2.5",
  xl: "2"
};
function xorHash(str) {
  let hash = 0;
  for (const char of str) {
    hash ^= char.charCodeAt(0);
  }
  return hash;
}
function styleClass(name) {
  return name ? STYLE_CLASSES[xorHash(name) % STYLE_CLASSES.length] : STYLE_CLASSES[0];
}
function Avatar({
  name,
  source,
  onError,
  initials,
  customer,
  size = "md",
  accessibilityLabel
}) {
  const i18n = useI18n();
  const isAfterInitialMount = useIsAfterInitialMount();
  const [status, setStatus] = useState(Status.Pending);
  useEffect(() => {
    setStatus(Status.Pending);
  }, [source]);
  const handleError = useCallback(() => {
    setStatus(Status.Errored);
    if (onError) {
      onError();
    }
  }, [onError]);
  const handleLoad = useCallback(() => {
    setStatus(Status.Loaded);
  }, []);
  const hasImage = source && status !== Status.Errored;
  const nameString = name || initials;
  let label;
  if (accessibilityLabel) {
    label = accessibilityLabel;
  } else if (name) {
    label = name;
  } else if (initials) {
    const splitInitials = initials.split("").join(" ");
    label = i18n.translate("Polaris.Avatar.labelWithInitials", {
      initials: splitInitials
    });
  }
  const className = classNames(styles$W.Avatar, size && styles$W[variationName("size", size)], hasImage && status === Status.Loaded && styles$W.imageHasLoaded, !customer && !hasImage && styles$W[variationName("style", styleClass(nameString))]);
  const textClassName = classNames(styles$W.Text, ((initials == null ? void 0 : initials.length) || 0) > 2 && styles$W.long);
  const imageClassName = classNames(styles$W.Image, status !== Status.Loaded && styles$W.hidden);
  const imageMarkUp = source && isAfterInitialMount && status !== Status.Errored ? /* @__PURE__ */ React.createElement(Image, {
    className: imageClassName,
    source,
    alt: "",
    role: "presentation",
    onLoad: handleLoad,
    onError: handleError
  }) : null;
  const verticalOffset = "0.35em";
  const avatarPath = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("path", {
    fill: "none",
    d: "M25.5 13.5C25.5 16.5376 23.0376 19 20 19C16.9624 19 14.5 16.5376 14.5 13.5C14.5 10.4624 16.9624 8 20 8C23.0376 8 25.5 10.4624 25.5 13.5Z",
    stroke: "currentColor",
    strokeWidth: avatarStrokeWidth[size]
  }), /* @__PURE__ */ React.createElement("path", {
    fill: "none",
    d: "M10.3433 29.682L9.47 31.254C9.03481 32.0373 9.60125 33 10.4974 33H29.5026C30.3988 33 30.9652 32.0373 30.53 31.254L29.6567 29.682C27.7084 26.175 24.0119 24 20 24C15.9882 24 12.2916 26.175 10.3433 29.682Z",
    stroke: "currentColor",
    strokeWidth: avatarStrokeWidth[size],
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }));
  const avatarBody = customer || !initials ? avatarPath : /* @__PURE__ */ React.createElement("text", {
    className: textClassName,
    x: "50%",
    y: "50%",
    dy: verticalOffset,
    fill: "currentColor",
    textAnchor: "middle"
  }, initials);
  const svgMarkup = hasImage ? null : /* @__PURE__ */ React.createElement("span", {
    className: styles$W.Initials
  }, /* @__PURE__ */ React.createElement("svg", {
    className: styles$W.Svg,
    viewBox: "0 0 40 40"
  }, avatarBody));
  return /* @__PURE__ */ React.createElement("span", {
    "aria-label": label,
    role: label ? "img" : "presentation",
    className
  }, svgMarkup, imageMarkUp);
}
const FilterActionsContext = /* @__PURE__ */ createContext(false);
function FilterActionsProvider({
  children,
  filterActions
}) {
  return /* @__PURE__ */ React.createElement(FilterActionsContext.Provider, {
    value: filterActions
  }, children);
}
var styles$V = {
  "Item": "Polaris-ActionList__Item",
  "default": "Polaris-ActionList--default",
  "active": "Polaris-ActionList--active",
  "destructive": "Polaris-ActionList--destructive",
  "disabled": "Polaris-ActionList--disabled",
  "Prefix": "Polaris-ActionList__Prefix",
  "Suffix": "Polaris-ActionList__Suffix",
  "indented": "Polaris-ActionList--indented",
  "menu": "Polaris-ActionList--menu",
  "Text": "Polaris-ActionList__Text"
};
const WithinFilterContext = /* @__PURE__ */ createContext(false);
var styles$U = {
  "Badge": "Polaris-Badge",
  "toneSuccess": "Polaris-Badge--toneSuccess",
  "toneSuccess-strong": "Polaris-Badge__toneSuccess--strong",
  "toneInfo": "Polaris-Badge--toneInfo",
  "toneInfo-strong": "Polaris-Badge__toneInfo--strong",
  "toneAttention": "Polaris-Badge--toneAttention",
  "toneAttention-strong": "Polaris-Badge__toneAttention--strong",
  "toneWarning": "Polaris-Badge--toneWarning",
  "toneWarning-strong": "Polaris-Badge__toneWarning--strong",
  "toneCritical": "Polaris-Badge--toneCritical",
  "toneCritical-strong": "Polaris-Badge__toneCritical--strong",
  "toneNew": "Polaris-Badge--toneNew",
  "toneMagic": "Polaris-Badge--toneMagic",
  "toneRead-only": "Polaris-Badge__toneRead--only",
  "toneEnabled": "Polaris-Badge--toneEnabled",
  "sizeLarge": "Polaris-Badge--sizeLarge",
  "withinFilter": "Polaris-Badge--withinFilter",
  "Icon": "Polaris-Badge__Icon",
  "PipContainer": "Polaris-Badge__PipContainer"
};
let ToneValue;
(function(ToneValue2) {
  ToneValue2["Info"] = "info";
  ToneValue2["Success"] = "success";
  ToneValue2["Warning"] = "warning";
  ToneValue2["Critical"] = "critical";
  ToneValue2["Attention"] = "attention";
  ToneValue2["New"] = "new";
  ToneValue2["Magic"] = "magic";
  ToneValue2["InfoStrong"] = "info-strong";
  ToneValue2["SuccessStrong"] = "success-strong";
  ToneValue2["WarningStrong"] = "warning-strong";
  ToneValue2["CriticalStrong"] = "critical-strong";
  ToneValue2["AttentionStrong"] = "attention-strong";
  ToneValue2["ReadOnly"] = "read-only";
  ToneValue2["Enabled"] = "enabled";
})(ToneValue || (ToneValue = {}));
let ProgressValue;
(function(ProgressValue2) {
  ProgressValue2["Incomplete"] = "incomplete";
  ProgressValue2["PartiallyComplete"] = "partiallyComplete";
  ProgressValue2["Complete"] = "complete";
})(ProgressValue || (ProgressValue = {}));
function getDefaultAccessibilityLabel(i18n, progress, tone) {
  let progressLabel = "";
  let toneLabel = "";
  if (!progress && !tone) {
    return "";
  }
  switch (progress) {
    case ProgressValue.Incomplete:
      progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.incomplete");
      break;
    case ProgressValue.PartiallyComplete:
      progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.partiallyComplete");
      break;
    case ProgressValue.Complete:
      progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.complete");
      break;
  }
  switch (tone) {
    case ToneValue.Info:
    case ToneValue.InfoStrong:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.info");
      break;
    case ToneValue.Success:
    case ToneValue.SuccessStrong:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.success");
      break;
    case ToneValue.Warning:
    case ToneValue.WarningStrong:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.warning");
      break;
    case ToneValue.Critical:
    case ToneValue.CriticalStrong:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.critical");
      break;
    case ToneValue.Attention:
    case ToneValue.AttentionStrong:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.attention");
      break;
    case ToneValue.New:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.new");
      break;
    case ToneValue.ReadOnly:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.readOnly");
      break;
    case ToneValue.Enabled:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.enabled");
      break;
  }
  if (!tone && progress) {
    return progressLabel;
  } else if (tone && !progress) {
    return toneLabel;
  } else {
    return i18n.translate("Polaris.Badge.progressAndTone", {
      progressLabel,
      toneLabel
    });
  }
}
var styles$T = {
  "Pip": "Polaris-Badge-Pip",
  "toneInfo": "Polaris-Badge-Pip--toneInfo",
  "toneSuccess": "Polaris-Badge-Pip--toneSuccess",
  "toneNew": "Polaris-Badge-Pip--toneNew",
  "toneAttention": "Polaris-Badge-Pip--toneAttention",
  "toneWarning": "Polaris-Badge-Pip--toneWarning",
  "toneCritical": "Polaris-Badge-Pip--toneCritical",
  "progressIncomplete": "Polaris-Badge-Pip--progressIncomplete",
  "progressPartiallyComplete": "Polaris-Badge-Pip--progressPartiallyComplete",
  "progressComplete": "Polaris-Badge-Pip--progressComplete"
};
function Pip({
  tone,
  progress = "complete",
  accessibilityLabelOverride
}) {
  const i18n = useI18n();
  const className = classNames(styles$T.Pip, tone && styles$T[variationName("tone", tone)], progress && styles$T[variationName("progress", progress)]);
  const accessibilityLabel = accessibilityLabelOverride ? accessibilityLabelOverride : getDefaultAccessibilityLabel(i18n, progress, tone);
  return /* @__PURE__ */ React.createElement("span", {
    className
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, accessibilityLabel));
}
const DEFAULT_SIZE = "medium";
const progressIconMap = {
  complete: () => /* @__PURE__ */ React.createElement("svg", {
    viewBox: "0 0 20 20"
  }, /* @__PURE__ */ React.createElement("path", {
    d: "M6 10c0-.93 0-1.395.102-1.776a3 3 0 0 1 2.121-2.122C8.605 6 9.07 6 10 6c.93 0 1.395 0 1.776.102a3 3 0 0 1 2.122 2.122C14 8.605 14 9.07 14 10s0 1.395-.102 1.777a3 3 0 0 1-2.122 2.12C11.395 14 10.93 14 10 14s-1.395 0-1.777-.102a3 3 0 0 1-2.12-2.121C6 11.395 6 10.93 6 10Z"
  })),
  partiallyComplete: () => /* @__PURE__ */ React.createElement("svg", {
    viewBox: "0 0 20 20"
  }, /* @__PURE__ */ React.createElement("path", {
    fillRule: "evenodd",
    d: "m8.888 6.014-.017-.018-.02.02c-.253.013-.45.038-.628.086a3 3 0 0 0-2.12 2.122C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.121 2.12C8.605 14 9.07 14 10 14c.93 0 1.395 0 1.776-.102a3 3 0 0 0 2.122-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.122-2.122C11.395 6 10.93 6 10 6c-.475 0-.829 0-1.112.014ZM8.446 7.34a1.75 1.75 0 0 0-1.041.94l4.314 4.315c.443-.2.786-.576.941-1.042L8.446 7.34Zm4.304 2.536L10.124 7.25c.908.001 1.154.013 1.329.06a1.75 1.75 0 0 1 1.237 1.237c.047.175.059.42.06 1.329ZM8.547 12.69c.182.05.442.06 1.453.06h.106L7.25 9.894V10c0 1.01.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237Z"
  })),
  incomplete: () => /* @__PURE__ */ React.createElement("svg", {
    viewBox: "0 0 20 20"
  }, /* @__PURE__ */ React.createElement("path", {
    fillRule: "evenodd",
    d: "M8.547 12.69c.183.05.443.06 1.453.06s1.27-.01 1.453-.06a1.75 1.75 0 0 0 1.237-1.237c.05-.182.06-.443.06-1.453s-.01-1.27-.06-1.453a1.75 1.75 0 0 0-1.237-1.237c-.182-.05-.443-.06-1.453-.06s-1.27.01-1.453.06A1.75 1.75 0 0 0 7.31 8.547c-.05.183-.06.443-.06 1.453s.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237ZM6.102 8.224C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.122 2.12C8.605 14 9.07 14 10 14s1.395 0 1.777-.102a3 3 0 0 0 2.12-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.121-2.122C11.395 6 10.93 6 10 6c-.93 0-1.395 0-1.776.102a3 3 0 0 0-2.122 2.122Z"
  }))
};
function Badge({
  children,
  tone,
  progress,
  icon,
  size = DEFAULT_SIZE,
  toneAndProgressLabelOverride
}) {
  const i18n = useI18n();
  const withinFilter = useContext(WithinFilterContext);
  const className = classNames(styles$U.Badge, tone && styles$U[variationName("tone", tone)], size && size !== DEFAULT_SIZE && styles$U[variationName("size", size)], withinFilter && styles$U.withinFilter);
  const accessibilityLabel = toneAndProgressLabelOverride ? toneAndProgressLabelOverride : getDefaultAccessibilityLabel(i18n, progress, tone);
  let accessibilityMarkup = Boolean(accessibilityLabel) && /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, accessibilityLabel);
  if (progress && !icon) {
    accessibilityMarkup = /* @__PURE__ */ React.createElement("span", {
      className: styles$U.Icon
    }, /* @__PURE__ */ React.createElement(Icon, {
      accessibilityLabel,
      source: progressIconMap[progress]
    }));
  }
  return /* @__PURE__ */ React.createElement("span", {
    className
  }, accessibilityMarkup, icon && /* @__PURE__ */ React.createElement("span", {
    className: styles$U.Icon
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: icon
  })), children && /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "bodySm",
    fontWeight: tone === "new" ? "medium" : void 0
  }, children));
}
Badge.Pip = Pip;
function useToggle(initialState) {
  const [value, setState] = useState(initialState);
  return {
    value,
    toggle: useCallback(() => setState((state) => !state), []),
    setTrue: useCallback(() => setState(true), []),
    setFalse: useCallback(() => setState(false), [])
  };
}
var styles$S = {
  "TooltipContainer": "Polaris-Tooltip__TooltipContainer",
  "HasUnderline": "Polaris-Tooltip__HasUnderline"
};
function useEphemeralPresenceManager() {
  const ephemeralPresenceManager = useContext(EphemeralPresenceManagerContext);
  if (!ephemeralPresenceManager) {
    throw new Error("No ephemeral presence manager was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
  }
  return ephemeralPresenceManager;
}
function usePortalsManager() {
  const portalsManager = useContext(PortalsManagerContext);
  if (!portalsManager) {
    throw new Error("No portals manager was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
  }
  return portalsManager;
}
function Portal({
  children,
  idPrefix = "",
  onPortalCreated = noop$5
}) {
  const themeName = useThemeName();
  const {
    container
  } = usePortalsManager();
  const uniqueId = useId();
  const portalId = idPrefix !== "" ? `${idPrefix}-${uniqueId}` : uniqueId;
  useEffect(() => {
    onPortalCreated();
  }, [onPortalCreated]);
  return container ? /* @__PURE__ */ createPortal(/* @__PURE__ */ React.createElement(ThemeProvider, {
    theme: isThemeNameLocal(themeName) ? themeName : themeNameDefault,
    "data-portal-id": portalId
  }, children), container) : null;
}
function noop$5() {
}
var styles$R = {
  "TooltipOverlay": "Polaris-Tooltip-TooltipOverlay",
  "Tail": "Polaris-Tooltip-TooltipOverlay__Tail",
  "positionedAbove": "Polaris-Tooltip-TooltipOverlay--positionedAbove",
  "measuring": "Polaris-Tooltip-TooltipOverlay--measuring",
  "measured": "Polaris-Tooltip-TooltipOverlay--measured",
  "instant": "Polaris-Tooltip-TooltipOverlay--instant",
  "Content": "Polaris-Tooltip-TooltipOverlay__Content",
  "default": "Polaris-Tooltip-TooltipOverlay--default",
  "wide": "Polaris-Tooltip-TooltipOverlay--wide"
};
function calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset = 0) {
  const activatorTop = activatorRect.top;
  const activatorBottom = activatorTop + activatorRect.height;
  const spaceAbove = activatorRect.top - topBarOffset;
  const spaceBelow = containerRect.height - activatorRect.top - activatorRect.height;
  const desiredHeight = overlayRect.height;
  const verticalMargins = overlayMargins.activator + overlayMargins.container;
  const minimumSpaceToScroll = overlayMargins.container;
  const distanceToTopScroll = activatorRect.top - Math.max(scrollableContainerRect.top, 0);
  const distanceToBottomScroll = containerRect.top + Math.min(containerRect.height, scrollableContainerRect.top + scrollableContainerRect.height) - (activatorRect.top + activatorRect.height);
  const enoughSpaceFromTopScroll = distanceToTopScroll >= minimumSpaceToScroll;
  const enoughSpaceFromBottomScroll = distanceToBottomScroll >= minimumSpaceToScroll;
  const heightIfAbove = Math.min(spaceAbove, desiredHeight);
  const heightIfBelow = Math.min(spaceBelow, desiredHeight);
  const heightIfAboveCover = Math.min(spaceAbove + activatorRect.height, desiredHeight);
  const heightIfBelowCover = Math.min(spaceBelow + activatorRect.height, desiredHeight);
  const containerRectTop = fixed ? 0 : containerRect.top;
  const positionIfAbove = {
    height: heightIfAbove - verticalMargins,
    top: activatorTop + containerRectTop - heightIfAbove,
    positioning: "above"
  };
  const positionIfBelow = {
    height: heightIfBelow - verticalMargins,
    top: activatorBottom + containerRectTop,
    positioning: "below"
  };
  const positionIfCoverBelow = {
    height: heightIfBelowCover - verticalMargins,
    top: activatorTop + containerRectTop,
    positioning: "cover"
  };
  const positionIfCoverAbove = {
    height: heightIfAboveCover - verticalMargins,
    top: activatorTop + containerRectTop - heightIfAbove + activatorRect.height + verticalMargins,
    positioning: "cover"
  };
  if (preferredPosition === "above") {
    return (enoughSpaceFromTopScroll || distanceToTopScroll >= distanceToBottomScroll && !enoughSpaceFromBottomScroll) && (spaceAbove > desiredHeight || spaceAbove > spaceBelow) ? positionIfAbove : positionIfBelow;
  }
  if (preferredPosition === "below") {
    return (enoughSpaceFromBottomScroll || distanceToBottomScroll >= distanceToTopScroll && !enoughSpaceFromTopScroll) && (spaceBelow > desiredHeight || spaceBelow > spaceAbove) ? positionIfBelow : positionIfAbove;
  }
  if (preferredPosition === "cover") {
    return (enoughSpaceFromBottomScroll || distanceToBottomScroll >= distanceToTopScroll && !enoughSpaceFromTopScroll) && (spaceBelow + activatorRect.height > desiredHeight || spaceBelow > spaceAbove) ? positionIfCoverBelow : positionIfCoverAbove;
  }
  if (enoughSpaceFromTopScroll && enoughSpaceFromBottomScroll) {
    return spaceAbove > spaceBelow ? positionIfAbove : positionIfBelow;
  }
  return distanceToTopScroll > minimumSpaceToScroll ? positionIfAbove : positionIfBelow;
}
function calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment) {
  const maximum = containerRect.width - overlayRect.width;
  if (preferredAlignment === "left") {
    return Math.min(maximum, Math.max(0, activatorRect.left - overlayMargins.horizontal));
  } else if (preferredAlignment === "right") {
    const activatorRight = containerRect.width - (activatorRect.left + activatorRect.width);
    return Math.min(maximum, Math.max(0, activatorRight - overlayMargins.horizontal));
  }
  return Math.min(maximum, Math.max(0, activatorRect.center.x - overlayRect.width / 2));
}
function rectIsOutsideOfRect(inner, outer) {
  const {
    center
  } = inner;
  return center.y < outer.top || center.y > outer.top + outer.height;
}
function intersectionWithViewport(rect, viewport = windowRect()) {
  const top = Math.max(rect.top, 0);
  const left = Math.max(rect.left, 0);
  const bottom = Math.min(rect.top + rect.height, viewport.height);
  const right = Math.min(rect.left + rect.width, viewport.width);
  return new Rect({
    top,
    left,
    height: bottom - top,
    width: right - left
  });
}
function windowRect() {
  return new Rect({
    top: window.scrollY,
    left: window.scrollX,
    height: window.innerHeight,
    width: document.body.clientWidth
  });
}
var styles$Q = {
  "PositionedOverlay": "Polaris-PositionedOverlay",
  "fixed": "Polaris-PositionedOverlay--fixed",
  "preventInteraction": "Polaris-PositionedOverlay--preventInteraction"
};
const UNIQUE_IDENTIFIER = Symbol("unique_identifier");
function useLazyRef(initialValue) {
  const lazyRef = useRef(UNIQUE_IDENTIFIER);
  if (lazyRef.current === UNIQUE_IDENTIFIER) {
    lazyRef.current = initialValue();
  }
  return lazyRef;
}
function useComponentDidMount(callback) {
  const isAfterInitialMount = useIsAfterInitialMount();
  const hasInvokedLifeCycle = useRef(false);
  if (isAfterInitialMount && !hasInvokedLifeCycle.current) {
    hasInvokedLifeCycle.current = true;
    return callback();
  }
}
const ScrollableContext = /* @__PURE__ */ createContext(void 0);
var styles$P = {
  "Scrollable": "Polaris-Scrollable",
  "hasTopShadow": "Polaris-Scrollable--hasTopShadow",
  "hasBottomShadow": "Polaris-Scrollable--hasBottomShadow",
  "horizontal": "Polaris-Scrollable--horizontal",
  "vertical": "Polaris-Scrollable--vertical",
  "scrollbarWidthThin": "Polaris-Scrollable--scrollbarWidthThin",
  "scrollbarWidthNone": "Polaris-Scrollable--scrollbarWidthNone",
  "scrollbarWidthAuto": "Polaris-Scrollable--scrollbarWidthAuto",
  "scrollbarGutterStable": "Polaris-Scrollable--scrollbarGutterStable",
  "scrollbarGutterStableboth-edges": "Polaris-Scrollable__scrollbarGutterStableboth--edges"
};
function ScrollTo() {
  const anchorNode = useRef(null);
  const scrollToPosition = useContext(ScrollableContext);
  useEffect(() => {
    if (!scrollToPosition || !anchorNode.current) {
      return;
    }
    scrollToPosition(anchorNode.current.offsetTop);
  }, [scrollToPosition]);
  const id = useId();
  return /* @__PURE__ */ React.createElement("a", {
    id,
    ref: anchorNode
  });
}
const MAX_SCROLL_HINT_DISTANCE = 100;
const LOW_RES_BUFFER = 2;
const ScrollableComponent = /* @__PURE__ */ forwardRef(({
  children,
  className,
  horizontal = true,
  vertical = true,
  shadow,
  hint,
  focusable,
  scrollbarWidth = "thin",
  scrollbarGutter,
  onScrolledToBottom,
  ...rest
}, forwardedRef) => {
  const [topShadow, setTopShadow] = useState(false);
  const [bottomShadow, setBottomShadow] = useState(false);
  const stickyManager = useLazyRef(() => new StickyManager());
  const scrollArea = useRef(null);
  const scrollTo = useCallback((scrollY, options2 = {}) => {
    var _a2;
    const optionsBehavior = options2.behavior || "smooth";
    const behavior = prefersReducedMotion() ? "auto" : optionsBehavior;
    (_a2 = scrollArea.current) == null ? void 0 : _a2.scrollTo({
      top: scrollY,
      behavior
    });
  }, []);
  const defaultRef = useRef();
  useImperativeHandle(forwardedRef || defaultRef, () => ({
    scrollTo
  }));
  const handleScroll = useCallback(() => {
    const currentScrollArea = scrollArea.current;
    if (!currentScrollArea) {
      return;
    }
    requestAnimationFrame(() => {
      const {
        scrollTop,
        clientHeight,
        scrollHeight
      } = currentScrollArea;
      const canScroll = Boolean(scrollHeight > clientHeight);
      const isBelowTopOfScroll = Boolean(scrollTop > 0);
      const isAtBottomOfScroll = Boolean(scrollTop + clientHeight >= scrollHeight - LOW_RES_BUFFER);
      setTopShadow(isBelowTopOfScroll);
      setBottomShadow(!isAtBottomOfScroll);
      if (canScroll && isAtBottomOfScroll && onScrolledToBottom) {
        onScrolledToBottom();
      }
    });
  }, [onScrolledToBottom]);
  useComponentDidMount(() => {
    handleScroll();
    if (hint) {
      requestAnimationFrame(() => performScrollHint(scrollArea.current));
    }
  });
  useEffect(() => {
    var _a2;
    const currentScrollArea = scrollArea.current;
    if (!currentScrollArea) {
      return;
    }
    const handleResize = debounce(handleScroll, 50, {
      trailing: true
    });
    (_a2 = stickyManager.current) == null ? void 0 : _a2.setContainer(currentScrollArea);
    currentScrollArea.addEventListener("scroll", handleScroll);
    globalThis.addEventListener("resize", handleResize);
    return () => {
      currentScrollArea.removeEventListener("scroll", handleScroll);
      globalThis.removeEventListener("resize", handleResize);
    };
  }, [stickyManager, handleScroll]);
  const finalClassName = classNames(className, styles$P.Scrollable, vertical && styles$P.vertical, horizontal && styles$P.horizontal, shadow && topShadow && styles$P.hasTopShadow, shadow && bottomShadow && styles$P.hasBottomShadow, scrollbarWidth && styles$P[variationName("scrollbarWidth", scrollbarWidth)], scrollbarGutter && styles$P[variationName("scrollbarGutter", scrollbarGutter.replace(" ", ""))]);
  return /* @__PURE__ */ React.createElement(ScrollableContext.Provider, {
    value: scrollTo
  }, /* @__PURE__ */ React.createElement(StickyManagerContext.Provider, {
    value: stickyManager.current
  }, /* @__PURE__ */ React.createElement("div", Object.assign({
    className: finalClassName
  }, scrollable.props, rest, {
    ref: scrollArea,
    tabIndex: focusable ? 0 : void 0
  }), children)));
});
ScrollableComponent.displayName = "Scrollable";
function prefersReducedMotion() {
  try {
    return window.matchMedia("(prefers-reduced-motion: reduce)").matches;
  } catch (err) {
    return false;
  }
}
function performScrollHint(elem) {
  if (!elem || prefersReducedMotion()) {
    return;
  }
  const scrollableDistance = elem.scrollHeight - elem.clientHeight;
  const distanceToPeek = Math.min(MAX_SCROLL_HINT_DISTANCE, scrollableDistance) - LOW_RES_BUFFER;
  const goBackToTop = () => {
    requestAnimationFrame(() => {
      if (elem.scrollTop >= distanceToPeek) {
        elem.removeEventListener("scroll", goBackToTop);
        elem.scrollTo({
          top: 0,
          behavior: "smooth"
        });
      }
    });
  };
  elem.addEventListener("scroll", goBackToTop);
  elem.scrollTo({
    top: MAX_SCROLL_HINT_DISTANCE,
    behavior: "smooth"
  });
}
const forNode = (node) => {
  const closestElement = node.closest(scrollable.selector);
  return closestElement instanceof HTMLElement ? closestElement : document;
};
const Scrollable = ScrollableComponent;
Scrollable.ScrollTo = ScrollTo;
Scrollable.forNode = forNode;
const OBSERVER_CONFIG = {
  childList: true,
  subtree: true,
  characterData: true,
  attributeFilter: ["style"]
};
class PositionedOverlay extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      measuring: true,
      activatorRect: getRectForNode(this.props.activator),
      right: void 0,
      left: void 0,
      top: 0,
      height: 0,
      width: null,
      positioning: "below",
      zIndex: null,
      outsideScrollableContainer: false,
      lockPosition: false,
      chevronOffset: 0
    };
    this.overlay = null;
    this.scrollableContainers = [];
    this.overlayDetails = () => {
      const {
        measuring,
        left,
        right,
        positioning,
        height,
        activatorRect,
        chevronOffset
      } = this.state;
      return {
        measuring,
        left,
        right,
        desiredHeight: height,
        positioning,
        activatorRect,
        chevronOffset
      };
    };
    this.setOverlay = (node) => {
      this.overlay = node;
    };
    this.setScrollableContainers = () => {
      const containers = [];
      let scrollableContainer = Scrollable.forNode(this.props.activator);
      if (scrollableContainer) {
        containers.push(scrollableContainer);
        while (scrollableContainer == null ? void 0 : scrollableContainer.parentElement) {
          scrollableContainer = Scrollable.forNode(scrollableContainer.parentElement);
          containers.push(scrollableContainer);
        }
      }
      this.scrollableContainers = containers;
    };
    this.registerScrollHandlers = () => {
      this.scrollableContainers.forEach((node) => {
        node.addEventListener("scroll", this.handleMeasurement);
      });
    };
    this.unregisterScrollHandlers = () => {
      this.scrollableContainers.forEach((node) => {
        node.removeEventListener("scroll", this.handleMeasurement);
      });
    };
    this.handleMeasurement = () => {
      const {
        lockPosition,
        top
      } = this.state;
      this.observer.disconnect();
      this.setState(({
        left,
        top: top2,
        right
      }) => ({
        left,
        right,
        top: top2,
        height: 0,
        positioning: "below",
        measuring: true
      }), () => {
        if (this.overlay == null || this.firstScrollableContainer == null) {
          return;
        }
        const {
          activator,
          preferredPosition = "below",
          preferredAlignment = "center",
          onScrollOut,
          fullWidth,
          fixed,
          preferInputActivator = true
        } = this.props;
        const preferredActivator = preferInputActivator ? activator.querySelector("input") || activator : activator;
        const activatorRect = getRectForNode(preferredActivator);
        const currentOverlayRect = getRectForNode(this.overlay);
        const scrollableElement = isDocument(this.firstScrollableContainer) ? document.body : this.firstScrollableContainer;
        const scrollableContainerRect = getRectForNode(scrollableElement);
        const overlayRect = fullWidth || preferredPosition === "cover" ? new Rect({
          ...currentOverlayRect,
          width: activatorRect.width
        }) : currentOverlayRect;
        if (scrollableElement === document.body) {
          scrollableContainerRect.height = document.body.scrollHeight;
        }
        let topBarOffset = 0;
        const topBarElement = scrollableElement.querySelector(`${dataPolarisTopBar.selector}`);
        if (topBarElement) {
          topBarOffset = topBarElement.clientHeight;
        }
        const overlayMargins = this.overlay.firstElementChild && this.overlay.firstChild instanceof HTMLElement ? getMarginsForNode(this.overlay.firstElementChild) : {
          activator: 0,
          container: 0,
          horizontal: 0
        };
        const containerRect = windowRect();
        const zIndexForLayer = getZIndexForLayerFromNode(activator);
        const zIndex = zIndexForLayer == null ? zIndexForLayer : zIndexForLayer + 1;
        const verticalPosition = calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset);
        const horizontalPosition = calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment);
        const chevronOffset = activatorRect.center.x - horizontalPosition + overlayMargins.horizontal * 2;
        this.setState({
          measuring: false,
          activatorRect: getRectForNode(activator),
          left: preferredAlignment !== "right" ? horizontalPosition : void 0,
          right: preferredAlignment === "right" ? horizontalPosition : void 0,
          top: lockPosition ? top : verticalPosition.top,
          lockPosition: Boolean(fixed),
          height: verticalPosition.height || 0,
          width: fullWidth || preferredPosition === "cover" ? overlayRect.width : null,
          positioning: verticalPosition.positioning,
          outsideScrollableContainer: onScrollOut != null && rectIsOutsideOfRect(activatorRect, intersectionWithViewport(scrollableContainerRect)),
          zIndex,
          chevronOffset
        }, () => {
          if (!this.overlay) return;
          this.observer.observe(this.overlay, OBSERVER_CONFIG);
          this.observer.observe(activator, OBSERVER_CONFIG);
        });
      });
    };
    this.observer = new MutationObserver(this.handleMeasurement);
  }
  componentDidMount() {
    this.setScrollableContainers();
    if (this.scrollableContainers.length && !this.props.fixed) {
      this.registerScrollHandlers();
    }
    this.handleMeasurement();
  }
  componentWillUnmount() {
    this.observer.disconnect();
    if (this.scrollableContainers.length && !this.props.fixed) {
      this.unregisterScrollHandlers();
    }
  }
  componentDidUpdate() {
    const {
      outsideScrollableContainer,
      top
    } = this.state;
    const {
      onScrollOut,
      active
    } = this.props;
    if (active && onScrollOut != null && top !== 0 && outsideScrollableContainer) {
      onScrollOut();
    }
  }
  render() {
    const {
      left,
      right,
      top,
      zIndex,
      width
    } = this.state;
    const {
      render,
      fixed,
      preventInteraction,
      classNames: propClassNames,
      zIndexOverride
    } = this.props;
    const style = {
      top: top == null || isNaN(top) ? void 0 : top,
      left: left == null || isNaN(left) ? void 0 : left,
      right: right == null || isNaN(right) ? void 0 : right,
      width: width == null || isNaN(width) ? void 0 : width,
      zIndex: zIndexOverride || zIndex || void 0
    };
    const className = classNames(styles$Q.PositionedOverlay, fixed && styles$Q.fixed, preventInteraction && styles$Q.preventInteraction, propClassNames);
    return /* @__PURE__ */ React.createElement("div", {
      className,
      style,
      ref: this.setOverlay
    }, /* @__PURE__ */ React.createElement(EventListener, {
      event: "resize",
      handler: this.handleMeasurement
    }), render(this.overlayDetails()));
  }
  get firstScrollableContainer() {
    return this.scrollableContainers[0] ?? null;
  }
  forceUpdatePosition() {
    requestAnimationFrame(this.handleMeasurement);
  }
}
function getMarginsForNode(node) {
  const nodeStyles = window.getComputedStyle(node);
  return {
    activator: parseFloat(nodeStyles.marginTop || "0"),
    container: parseFloat(nodeStyles.marginBottom || "0"),
    horizontal: parseFloat(nodeStyles.marginLeft || "0")
  };
}
function getZIndexForLayerFromNode(node) {
  const layerNode = node.closest(layer.selector) || document.body;
  const zIndex = layerNode === document.body ? "auto" : parseInt(window.getComputedStyle(layerNode).zIndex || "0", 10);
  return zIndex === "auto" || isNaN(zIndex) ? null : zIndex;
}
function isDocument(node) {
  return node === document;
}
const tailUpPaths = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("path", {
  d: "M18.829 8.171 11.862.921A3 3 0 0 0 7.619.838L0 8.171h1.442l6.87-6.612a2 2 0 0 1 2.83.055l6.3 6.557h1.387Z",
  fill: "var(--p-color-tooltip-tail-up-border-experimental)"
}), /* @__PURE__ */ React.createElement("path", {
  d: "M17.442 10.171h-16v-2l6.87-6.612a2 2 0 0 1 2.83.055l6.3 6.557v2Z",
  fill: "var(--p-color-bg-surface)"
}));
const tailDownPaths = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("path", {
  d: "m0 2 6.967 7.25a3 3 0 0 0 4.243.083L18.829 2h-1.442l-6.87 6.612a2 2 0 0 1-2.83-.055L1.387 2H0Z",
  fill: "var(--p-color-tooltip-tail-down-border-experimental)"
}), /* @__PURE__ */ React.createElement("path", {
  d: "M1.387 0h16v2l-6.87 6.612a2 2 0 0 1-2.83-.055L1.387 2V0Z",
  fill: "var(--p-color-bg-surface)"
}));
function TooltipOverlay({
  active,
  activator,
  preferredPosition = "above",
  preventInteraction,
  id,
  children,
  accessibilityLabel,
  width,
  padding,
  borderRadius,
  zIndexOverride,
  instant
}) {
  const i18n = useI18n();
  const markup = active ? /* @__PURE__ */ React.createElement(PositionedOverlay, {
    active,
    activator,
    preferredPosition,
    preventInteraction,
    render: renderTooltip,
    zIndexOverride
  }) : null;
  return markup;
  function renderTooltip(overlayDetails) {
    const {
      measuring,
      desiredHeight,
      positioning,
      chevronOffset
    } = overlayDetails;
    const containerClassName = classNames(styles$R.TooltipOverlay, measuring && styles$R.measuring, !measuring && styles$R.measured, instant && styles$R.instant, positioning === "above" && styles$R.positionedAbove);
    const contentClassName = classNames(styles$R.Content, width && styles$R[width]);
    const contentStyles = measuring ? void 0 : {
      minHeight: desiredHeight
    };
    const style = {
      "--pc-tooltip-chevron-x-pos": `${chevronOffset}px`,
      "--pc-tooltip-border-radius": borderRadius ? `var(--p-border-radius-${borderRadius})` : void 0,
      "--pc-tooltip-padding": padding && padding === "default" ? "var(--p-space-100) var(--p-space-200)" : `var(--p-space-${padding})`
    };
    return /* @__PURE__ */ React.createElement("div", Object.assign({
      style,
      className: containerClassName
    }, layer.props), /* @__PURE__ */ React.createElement("svg", {
      className: styles$R.Tail,
      width: "19",
      height: "11",
      fill: "none"
    }, positioning === "above" ? tailDownPaths : tailUpPaths), /* @__PURE__ */ React.createElement("div", {
      id,
      role: "tooltip",
      className: contentClassName,
      style: {
        ...contentStyles,
        ...style
      },
      "aria-label": accessibilityLabel ? i18n.translate("Polaris.TooltipOverlay.accessibilityLabel", {
        label: accessibilityLabel
      }) : void 0
    }, children));
  }
}
const HOVER_OUT_TIMEOUT = 150;
function Tooltip({
  children,
  content,
  dismissOnMouseOut,
  active: originalActive,
  hoverDelay,
  preferredPosition = "above",
  activatorWrapper = "span",
  accessibilityLabel,
  width = "default",
  padding = "default",
  borderRadius: borderRadiusProp,
  zIndexOverride,
  hasUnderline,
  persistOnClick,
  onOpen,
  onClose
}) {
  const borderRadius = borderRadiusProp || "200";
  const WrapperComponent = activatorWrapper;
  const {
    value: active,
    setTrue: setActiveTrue,
    setFalse: handleBlur
  } = useToggle(Boolean(originalActive));
  const {
    value: persist,
    toggle: togglePersisting
  } = useToggle(Boolean(originalActive) && Boolean(persistOnClick));
  const [activatorNode, setActivatorNode] = useState(null);
  const {
    presenceList,
    addPresence,
    removePresence
  } = useEphemeralPresenceManager();
  const id = useId();
  const activatorContainer = useRef(null);
  const mouseEntered = useRef(false);
  const [shouldAnimate, setShouldAnimate] = useState(Boolean(!originalActive));
  const hoverDelayTimeout = useRef(null);
  const hoverOutTimeout = useRef(null);
  const handleFocus = useCallback(() => {
    if (originalActive !== false) {
      setActiveTrue();
    }
  }, [originalActive, setActiveTrue]);
  useEffect(() => {
    const firstFocusable = activatorContainer.current ? findFirstFocusableNode(activatorContainer.current) : null;
    const accessibilityNode = firstFocusable || activatorContainer.current;
    if (!accessibilityNode) return;
    accessibilityNode.tabIndex = 0;
    accessibilityNode.setAttribute("aria-describedby", id);
    accessibilityNode.setAttribute("data-polaris-tooltip-activator", "true");
  }, [id, children]);
  useEffect(() => {
    return () => {
      if (hoverDelayTimeout.current) {
        clearTimeout(hoverDelayTimeout.current);
      }
      if (hoverOutTimeout.current) {
        clearTimeout(hoverOutTimeout.current);
      }
    };
  }, []);
  const handleOpen = useCallback(() => {
    setShouldAnimate(!presenceList.tooltip && !active);
    onOpen == null ? void 0 : onOpen();
    addPresence("tooltip");
  }, [addPresence, presenceList.tooltip, onOpen, active]);
  const handleClose = useCallback(() => {
    onClose == null ? void 0 : onClose();
    setShouldAnimate(false);
    hoverOutTimeout.current = setTimeout(() => {
      removePresence("tooltip");
    }, HOVER_OUT_TIMEOUT);
  }, [removePresence, onClose]);
  const handleKeyUp = useCallback((event) => {
    if (event.key !== "Escape") return;
    handleClose == null ? void 0 : handleClose();
    handleBlur();
    persistOnClick && togglePersisting();
  }, [handleBlur, handleClose, persistOnClick, togglePersisting]);
  useEffect(() => {
    if (originalActive === false && active) {
      handleClose();
      handleBlur();
    }
  }, [originalActive, active, handleClose, handleBlur]);
  const portal2 = activatorNode ? /* @__PURE__ */ React.createElement(Portal, {
    idPrefix: "tooltip"
  }, /* @__PURE__ */ React.createElement(TooltipOverlay, {
    id,
    preferredPosition,
    activator: activatorNode,
    active,
    accessibilityLabel,
    onClose: noop$4,
    preventInteraction: dismissOnMouseOut,
    width,
    padding,
    borderRadius,
    zIndexOverride,
    instant: !shouldAnimate
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "bodyMd"
  }, content))) : null;
  const wrapperClassNames = classNames(activatorWrapper === "div" && styles$S.TooltipContainer, hasUnderline && styles$S.HasUnderline);
  return /* @__PURE__ */ React.createElement(WrapperComponent, {
    onFocus: () => {
      handleOpen();
      handleFocus();
    },
    onBlur: () => {
      handleClose();
      handleBlur();
      if (persistOnClick) {
        togglePersisting();
      }
    },
    onMouseLeave: handleMouseLeave,
    onMouseOver: handleMouseEnterFix,
    onMouseDown: persistOnClick ? togglePersisting : void 0,
    ref: setActivator,
    onKeyUp: handleKeyUp,
    className: wrapperClassNames
  }, children, portal2);
  function setActivator(node) {
    const activatorContainerRef = activatorContainer;
    if (node == null) {
      activatorContainerRef.current = null;
      setActivatorNode(null);
      return;
    }
    node.firstElementChild instanceof HTMLElement && setActivatorNode(node.firstElementChild);
    activatorContainerRef.current = node;
  }
  function handleMouseEnter() {
    mouseEntered.current = true;
    if (hoverDelay && !presenceList.tooltip) {
      hoverDelayTimeout.current = setTimeout(() => {
        handleOpen();
        handleFocus();
      }, hoverDelay);
    } else {
      handleOpen();
      handleFocus();
    }
  }
  function handleMouseLeave() {
    if (hoverDelayTimeout.current) {
      clearTimeout(hoverDelayTimeout.current);
      hoverDelayTimeout.current = null;
    }
    mouseEntered.current = false;
    handleClose();
    if (!persist) {
      handleBlur();
    }
  }
  function handleMouseEnterFix() {
    !mouseEntered.current && handleMouseEnter();
  }
}
function noop$4() {
}
function Item$7({
  id,
  badge,
  content,
  accessibilityLabel,
  helpText,
  url,
  onAction,
  onMouseEnter,
  icon,
  image,
  prefix,
  suffix,
  disabled,
  external,
  destructive,
  ellipsis,
  truncate,
  active,
  role,
  variant = "default"
}) {
  const className = classNames(styles$V.Item, disabled && styles$V.disabled, destructive && styles$V.destructive, active && styles$V.active, variant === "default" && styles$V.default, variant === "indented" && styles$V.indented, variant === "menu" && styles$V.menu);
  let prefixMarkup = null;
  if (prefix) {
    prefixMarkup = /* @__PURE__ */ React.createElement("span", {
      className: styles$V.Prefix
    }, prefix);
  } else if (icon) {
    prefixMarkup = /* @__PURE__ */ React.createElement("span", {
      className: styles$V.Prefix
    }, /* @__PURE__ */ React.createElement(Icon, {
      source: icon
    }));
  } else if (image) {
    prefixMarkup = /* @__PURE__ */ React.createElement("span", {
      role: "presentation",
      className: styles$V.Prefix,
      style: {
        backgroundImage: `url(${image}`
      }
    });
  }
  let contentText = content || "";
  if (truncate && content) {
    contentText = /* @__PURE__ */ React.createElement(TruncateText, null, content);
  } else if (ellipsis) {
    contentText = `${content}…`;
  }
  const contentMarkup = helpText ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Box, null, contentText), /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "bodySm",
    tone: active || disabled ? void 0 : "subdued"
  }, helpText)) : /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "bodyMd",
    fontWeight: active ? "semibold" : "regular"
  }, contentText);
  const badgeMarkup = badge && /* @__PURE__ */ React.createElement("span", {
    className: styles$V.Suffix
  }, /* @__PURE__ */ React.createElement(Badge, {
    tone: badge.tone
  }, badge.content));
  const suffixMarkup = suffix && /* @__PURE__ */ React.createElement(Box, null, /* @__PURE__ */ React.createElement("span", {
    className: styles$V.Suffix
  }, suffix));
  const textMarkup = /* @__PURE__ */ React.createElement("span", {
    className: styles$V.Text
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "bodyMd",
    fontWeight: active ? "semibold" : "regular"
  }, contentMarkup));
  const contentElement = /* @__PURE__ */ React.createElement(InlineStack, {
    blockAlign: "center",
    gap: "150",
    wrap: false
  }, prefixMarkup, textMarkup, badgeMarkup, suffixMarkup);
  const contentWrapper = /* @__PURE__ */ React.createElement(Box, {
    width: "100%"
  }, contentElement);
  const scrollMarkup = active ? /* @__PURE__ */ React.createElement(Scrollable.ScrollTo, null) : null;
  const control = url ? /* @__PURE__ */ React.createElement(UnstyledLink, {
    id,
    url: disabled ? null : url,
    className,
    external,
    "aria-label": accessibilityLabel,
    onClick: disabled ? null : onAction,
    role
  }, contentWrapper) : /* @__PURE__ */ React.createElement("button", {
    id,
    type: "button",
    className,
    disabled,
    "aria-label": accessibilityLabel,
    onClick: onAction,
    onMouseUp: handleMouseUpByBlurring,
    role,
    onMouseEnter
  }, contentWrapper);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, scrollMarkup, control);
}
const TruncateText = ({
  children
}) => {
  const theme = useTheme();
  const textRef = useRef(null);
  const [isOverflowing, setIsOverflowing] = useState(false);
  useIsomorphicLayoutEffect(() => {
    if (textRef.current) {
      setIsOverflowing(textRef.current.scrollWidth > textRef.current.offsetWidth);
    }
  }, [children]);
  const text = /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    truncate: true
  }, /* @__PURE__ */ React.createElement(Box, {
    width: "100%",
    ref: textRef
  }, children));
  return isOverflowing ? /* @__PURE__ */ React.createElement(Tooltip, {
    zIndexOverride: Number(theme.zIndex["z-index-11"]),
    preferredPosition: "above",
    hoverDelay: 1e3,
    content: children,
    dismissOnMouseOut: true
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    truncate: true
  }, children)) : text;
};
function Section$4({
  section,
  hasMultipleSections,
  isFirst,
  actionRole,
  onActionAnyItem
}) {
  const handleAction = (itemOnAction) => {
    return () => {
      if (itemOnAction) {
        itemOnAction();
      }
      if (onActionAnyItem) {
        onActionAnyItem();
      }
    };
  };
  const actionMarkup = section.items.map(({
    content,
    helpText,
    onAction,
    ...item
  }, index) => {
    const itemMarkup = /* @__PURE__ */ React.createElement(Item$7, Object.assign({
      content,
      helpText,
      role: actionRole,
      onAction: handleAction(onAction)
    }, item));
    return /* @__PURE__ */ React.createElement(Box, {
      as: "li",
      key: `${content}-${index}`,
      role: actionRole === "menuitem" ? "presentation" : void 0
    }, /* @__PURE__ */ React.createElement(InlineStack, {
      wrap: false
    }, itemMarkup));
  });
  let titleMarkup = null;
  if (section.title) {
    titleMarkup = typeof section.title === "string" ? /* @__PURE__ */ React.createElement(Box, {
      paddingBlockStart: "300",
      paddingBlockEnd: "100",
      paddingInlineStart: "300",
      paddingInlineEnd: "300"
    }, /* @__PURE__ */ React.createElement(Text, {
      as: "p",
      variant: "headingSm"
    }, section.title)) : /* @__PURE__ */ React.createElement(Box, {
      padding: "200",
      paddingInlineEnd: "150"
    }, section.title);
  }
  let sectionRole;
  switch (actionRole) {
    case "option":
      sectionRole = "presentation";
      break;
    case "menuitem":
      sectionRole = !hasMultipleSections ? "menu" : "presentation";
      break;
    default:
      sectionRole = void 0;
      break;
  }
  const sectionMarkup = /* @__PURE__ */ React.createElement(React.Fragment, null, titleMarkup, /* @__PURE__ */ React.createElement(Box, Object.assign({
    as: "div",
    padding: "150"
  }, hasMultipleSections && {
    paddingBlockStart: "0"
  }, {
    tabIndex: !hasMultipleSections ? -1 : void 0
  }), /* @__PURE__ */ React.createElement(BlockStack, Object.assign({
    gap: "050",
    as: "ul"
  }, sectionRole && {
    role: sectionRole
  }), actionMarkup)));
  return hasMultipleSections ? /* @__PURE__ */ React.createElement(Box, Object.assign({
    as: "li",
    role: "presentation",
    borderColor: "border-secondary"
  }, !isFirst && {
    borderBlockStartWidth: "025"
  }, !section.title && {
    paddingBlockStart: "150"
  }), sectionMarkup) : sectionMarkup;
}
function KeypressListener({
  keyCode,
  handler: handler2,
  keyEvent = "keyup",
  options: options2,
  useCapture
}) {
  const tracked = useRef({
    handler: handler2,
    keyCode
  });
  useIsomorphicLayoutEffect(() => {
    tracked.current = {
      handler: handler2,
      keyCode
    };
  }, [handler2, keyCode]);
  const handleKeyEvent = useCallback((event) => {
    const {
      handler: handler3,
      keyCode: keyCode2
    } = tracked.current;
    if (event.keyCode === keyCode2) {
      handler3(event);
    }
  }, []);
  useEffect(() => {
    document.addEventListener(keyEvent, handleKeyEvent, useCapture || options2);
    return () => {
      document.removeEventListener(keyEvent, handleKeyEvent, useCapture || options2);
    };
  }, [keyEvent, handleKeyEvent, useCapture, options2]);
  return null;
}
var styles$O = {
  "TextField": "Polaris-TextField",
  "ClearButton": "Polaris-TextField__ClearButton",
  "Loading": "Polaris-TextField__Loading",
  "disabled": "Polaris-TextField--disabled",
  "error": "Polaris-TextField--error",
  "readOnly": "Polaris-TextField--readOnly",
  "Input": "Polaris-TextField__Input",
  "Backdrop": "Polaris-TextField__Backdrop",
  "multiline": "Polaris-TextField--multiline",
  "hasValue": "Polaris-TextField--hasValue",
  "focus": "Polaris-TextField--focus",
  "VerticalContent": "Polaris-TextField__VerticalContent",
  "InputAndSuffixWrapper": "Polaris-TextField__InputAndSuffixWrapper",
  "toneMagic": "Polaris-TextField--toneMagic",
  "Prefix": "Polaris-TextField__Prefix",
  "Suffix": "Polaris-TextField__Suffix",
  "AutoSizeWrapper": "Polaris-TextField__AutoSizeWrapper",
  "AutoSizeWrapperWithSuffix": "Polaris-TextField__AutoSizeWrapperWithSuffix",
  "suggestion": "Polaris-TextField--suggestion",
  "borderless": "Polaris-TextField--borderless",
  "slim": "Polaris-TextField--slim",
  "Input-hasClearButton": "Polaris-TextField__Input--hasClearButton",
  "Input-suffixed": "Polaris-TextField__Input--suffixed",
  "Input-alignRight": "Polaris-TextField__Input--alignRight",
  "Input-alignLeft": "Polaris-TextField__Input--alignLeft",
  "Input-alignCenter": "Polaris-TextField__Input--alignCenter",
  "Input-autoSize": "Polaris-TextField__Input--autoSize",
  "PrefixIcon": "Polaris-TextField__PrefixIcon",
  "CharacterCount": "Polaris-TextField__CharacterCount",
  "AlignFieldBottom": "Polaris-TextField__AlignFieldBottom",
  "Spinner": "Polaris-TextField__Spinner",
  "SpinnerIcon": "Polaris-TextField__SpinnerIcon",
  "Resizer": "Polaris-TextField__Resizer",
  "DummyInput": "Polaris-TextField__DummyInput",
  "Segment": "Polaris-TextField__Segment",
  "monospaced": "Polaris-TextField--monospaced"
};
const Spinner = /* @__PURE__ */ React.forwardRef(function Spinner2({
  onChange,
  onClick,
  onMouseDown,
  onMouseUp,
  onBlur
}, ref) {
  function handleStep(step) {
    return () => onChange(step);
  }
  function handleMouseDown(onChange2) {
    return (event) => {
      if (event.button !== 0) return;
      onMouseDown == null ? void 0 : onMouseDown(onChange2);
    };
  }
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$O.Spinner,
    onClick,
    "aria-hidden": true,
    ref
  }, /* @__PURE__ */ React.createElement("div", {
    role: "button",
    className: styles$O.Segment,
    tabIndex: -1,
    onClick: handleStep(1),
    onMouseDown: handleMouseDown(handleStep(1)),
    onMouseUp,
    onBlur
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$O.SpinnerIcon
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: ChevronUpIcon
  }))), /* @__PURE__ */ React.createElement("div", {
    role: "button",
    className: styles$O.Segment,
    tabIndex: -1,
    onClick: handleStep(-1),
    onMouseDown: handleMouseDown(handleStep(-1)),
    onMouseUp,
    onBlur
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$O.SpinnerIcon
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: ChevronDownIcon
  }))));
});
var styles$N = {
  "hidden": "Polaris-Labelled--hidden",
  "LabelWrapper": "Polaris-Labelled__LabelWrapper",
  "disabled": "Polaris-Labelled--disabled",
  "HelpText": "Polaris-Labelled__HelpText",
  "readOnly": "Polaris-Labelled--readOnly",
  "Error": "Polaris-Labelled__Error",
  "Action": "Polaris-Labelled__Action"
};
var styles$M = {
  "InlineError": "Polaris-InlineError",
  "Icon": "Polaris-InlineError__Icon"
};
function InlineError({
  message,
  fieldID
}) {
  if (!message) {
    return null;
  }
  return /* @__PURE__ */ React.createElement("div", {
    id: errorTextID(fieldID),
    className: styles$M.InlineError
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$M.Icon
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: AlertCircleIcon
  })), /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "bodyMd"
  }, message));
}
function errorTextID(id) {
  return `${id}Error`;
}
var styles$L = {
  "Label": "Polaris-Label",
  "hidden": "Polaris-Label--hidden",
  "Text": "Polaris-Label__Text",
  "RequiredIndicator": "Polaris-Label__RequiredIndicator"
};
function labelID(id) {
  return `${id}Label`;
}
function Label({
  children,
  id,
  hidden,
  requiredIndicator
}) {
  const className = classNames(styles$L.Label, hidden && styles$L.hidden);
  return /* @__PURE__ */ React.createElement("div", {
    className
  }, /* @__PURE__ */ React.createElement("label", {
    id: labelID(id),
    htmlFor: id,
    className: classNames(styles$L.Text, requiredIndicator && styles$L.RequiredIndicator)
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "bodyMd"
  }, children)));
}
function Labelled({
  id,
  label,
  error,
  action: action2,
  helpText,
  children,
  labelHidden,
  requiredIndicator,
  disabled,
  readOnly,
  ...rest
}) {
  const className = classNames(labelHidden && styles$N.hidden, disabled && styles$N.disabled, readOnly && styles$N.readOnly);
  const actionMarkup = action2 ? /* @__PURE__ */ React.createElement("div", {
    className: styles$N.Action
  }, buttonFrom(action2, {
    variant: "plain"
  })) : null;
  const helpTextMarkup = helpText ? /* @__PURE__ */ React.createElement("div", {
    className: styles$N.HelpText,
    id: helpTextID(id),
    "aria-disabled": disabled
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    tone: "subdued",
    variant: "bodyMd",
    breakWord: true
  }, helpText)) : null;
  const errorMarkup = error && typeof error !== "boolean" && /* @__PURE__ */ React.createElement("div", {
    className: styles$N.Error
  }, /* @__PURE__ */ React.createElement(InlineError, {
    message: error,
    fieldID: id
  }));
  const labelMarkup = label ? /* @__PURE__ */ React.createElement("div", {
    className: styles$N.LabelWrapper
  }, /* @__PURE__ */ React.createElement(Label, Object.assign({
    id,
    requiredIndicator
  }, rest, {
    hidden: false
  }), label), actionMarkup) : null;
  return /* @__PURE__ */ React.createElement("div", {
    className
  }, labelMarkup, children, errorMarkup, helpTextMarkup);
}
function helpTextID(id) {
  return `${id}HelpText`;
}
var styles$K = {
  "Connected": "Polaris-Connected",
  "Item": "Polaris-Connected__Item",
  "Item-primary": "Polaris-Connected__Item--primary",
  "Item-focused": "Polaris-Connected__Item--focused"
};
function Item$6({
  children,
  position
}) {
  const {
    value: focused,
    setTrue: forceTrueFocused,
    setFalse: forceFalseFocused
  } = useToggle(false);
  const className = classNames(styles$K.Item, focused && styles$K["Item-focused"], position === "primary" ? styles$K["Item-primary"] : styles$K["Item-connection"]);
  return /* @__PURE__ */ React.createElement("div", {
    onBlur: forceFalseFocused,
    onFocus: forceTrueFocused,
    className
  }, children);
}
function Connected({
  children,
  left,
  right
}) {
  const leftConnectionMarkup = left ? /* @__PURE__ */ React.createElement(Item$6, {
    position: "left"
  }, left) : null;
  const rightConnectionMarkup = right ? /* @__PURE__ */ React.createElement(Item$6, {
    position: "right"
  }, right) : null;
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$K.Connected
  }, leftConnectionMarkup, /* @__PURE__ */ React.createElement(Item$6, {
    position: "primary"
  }, children), rightConnectionMarkup);
}
function Resizer({
  contents,
  currentHeight: currentHeightProp = null,
  minimumLines,
  onHeightChange
}) {
  const contentNode = useRef(null);
  const minimumLinesNode = useRef(null);
  const animationFrame = useRef();
  const currentHeight = useRef(currentHeightProp);
  if (currentHeightProp !== currentHeight.current) {
    currentHeight.current = currentHeightProp;
  }
  useEffect(() => {
    return () => {
      if (animationFrame.current) {
        cancelAnimationFrame(animationFrame.current);
      }
    };
  }, []);
  const minimumLinesMarkup = minimumLines ? /* @__PURE__ */ React.createElement("div", {
    ref: minimumLinesNode,
    className: styles$O.DummyInput,
    dangerouslySetInnerHTML: {
      __html: getContentsForMinimumLines(minimumLines)
    }
  }) : null;
  const handleHeightCheck = useCallback(() => {
    if (animationFrame.current) {
      cancelAnimationFrame(animationFrame.current);
    }
    animationFrame.current = requestAnimationFrame(() => {
      if (!contentNode.current || !minimumLinesNode.current) {
        return;
      }
      const newHeight = Math.max(contentNode.current.offsetHeight, minimumLinesNode.current.offsetHeight);
      if (newHeight !== currentHeight.current) {
        onHeightChange(newHeight);
      }
    });
  }, [onHeightChange]);
  useIsomorphicLayoutEffect(() => {
    handleHeightCheck();
  });
  return /* @__PURE__ */ React.createElement("div", {
    "aria-hidden": true,
    className: styles$O.Resizer
  }, /* @__PURE__ */ React.createElement(EventListener, {
    event: "resize",
    handler: handleHeightCheck
  }), /* @__PURE__ */ React.createElement("div", {
    ref: contentNode,
    className: styles$O.DummyInput,
    dangerouslySetInnerHTML: {
      __html: getFinalContents(contents)
    }
  }), minimumLinesMarkup);
}
const ENTITIES_TO_REPLACE = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  "\n": "<br>",
  "\r": ""
};
const REPLACE_REGEX = new RegExp(`[${Object.keys(ENTITIES_TO_REPLACE).join()}]`, "g");
function replaceEntity(entity) {
  return ENTITIES_TO_REPLACE[entity];
}
function getContentsForMinimumLines(minimumLines) {
  let content = "";
  for (let line = 0; line < minimumLines; line++) {
    content += "<br>";
  }
  return content;
}
function getFinalContents(contents) {
  return contents ? `${contents.replace(REPLACE_REGEX, replaceEntity)}<br>` : "<br>";
}
function TextField({
  prefix,
  suffix,
  verticalContent,
  placeholder,
  value = "",
  helpText,
  label,
  labelAction,
  labelHidden,
  disabled,
  clearButton,
  readOnly,
  autoFocus,
  focused,
  multiline,
  error,
  connectedRight,
  connectedLeft,
  type = "text",
  name,
  id: idProp,
  role,
  step,
  largeStep,
  autoComplete,
  max,
  maxLength,
  maxHeight,
  min,
  minLength,
  pattern,
  inputMode,
  spellCheck,
  ariaOwns,
  ariaControls,
  ariaExpanded,
  ariaActiveDescendant,
  ariaAutocomplete,
  showCharacterCount,
  align,
  requiredIndicator,
  monospaced,
  selectTextOnFocus,
  suggestion,
  variant = "inherit",
  size = "medium",
  onClearButtonClick,
  onChange,
  onSpinnerChange,
  onFocus,
  onBlur,
  tone,
  autoSize,
  loading
}) {
  const i18n = useI18n();
  const [height, setHeight] = useState(null);
  const [focus, setFocus] = useState(Boolean(focused));
  const isAfterInitial = useIsAfterInitialMount();
  const uniqId = useId();
  const id = idProp ?? uniqId;
  const textFieldRef = useRef(null);
  const inputRef = useRef(null);
  const textAreaRef = useRef(null);
  const prefixRef = useRef(null);
  const suffixRef = useRef(null);
  const loadingRef = useRef(null);
  const verticalContentRef = useRef(null);
  const buttonPressTimer = useRef();
  const spinnerRef = useRef(null);
  const getInputRef = useCallback(() => {
    return multiline ? textAreaRef.current : inputRef.current;
  }, [multiline]);
  useEffect(() => {
    const input2 = getInputRef();
    if (!input2 || focused === void 0) return;
    focused ? input2.focus() : input2.blur();
  }, [focused, verticalContent, getInputRef]);
  useEffect(() => {
    const input2 = inputRef.current;
    const isSupportedInputType = type === "text" || type === "tel" || type === "search" || type === "url" || type === "password";
    if (!input2 || !isSupportedInputType || !suggestion) {
      return;
    }
    input2.setSelectionRange(value.length, suggestion.length);
  }, [focus, value, type, suggestion]);
  const normalizedValue = suggestion ? suggestion : value;
  const normalizedStep = step != null ? step : 1;
  const normalizedMax = max != null ? max : Infinity;
  const normalizedMin = min != null ? min : -Infinity;
  const className = classNames(styles$O.TextField, Boolean(normalizedValue) && styles$O.hasValue, disabled && styles$O.disabled, readOnly && styles$O.readOnly, error && styles$O.error, tone && styles$O[variationName("tone", tone)], multiline && styles$O.multiline, focus && !disabled && styles$O.focus, variant !== "inherit" && styles$O[variant], size === "slim" && styles$O.slim);
  const inputType = type === "currency" ? "text" : type;
  const isNumericType = type === "number" || type === "integer";
  const iconPrefix = /* @__PURE__ */ React.isValidElement(prefix) && prefix.type === Icon;
  const prefixMarkup = prefix ? /* @__PURE__ */ React.createElement("div", {
    className: classNames(styles$O.Prefix, iconPrefix && styles$O.PrefixIcon),
    id: `${id}-Prefix`,
    ref: prefixRef
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "bodyMd"
  }, prefix)) : null;
  const suffixMarkup = suffix ? /* @__PURE__ */ React.createElement("div", {
    className: styles$O.Suffix,
    id: `${id}-Suffix`,
    ref: suffixRef
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "bodyMd"
  }, suffix)) : null;
  const loadingMarkup = loading ? /* @__PURE__ */ React.createElement("div", {
    className: styles$O.Loading,
    id: `${id}-Loading`,
    ref: loadingRef
  }, /* @__PURE__ */ React.createElement(Spinner$1, {
    size: "small"
  })) : null;
  let characterCountMarkup = null;
  if (showCharacterCount) {
    const characterCount = normalizedValue.length;
    const characterCountLabel = maxLength ? i18n.translate("Polaris.TextField.characterCountWithMaxLength", {
      count: characterCount,
      limit: maxLength
    }) : i18n.translate("Polaris.TextField.characterCount", {
      count: characterCount
    });
    const characterCountClassName = classNames(styles$O.CharacterCount, multiline && styles$O.AlignFieldBottom);
    const characterCountText = !maxLength ? characterCount : `${characterCount}/${maxLength}`;
    characterCountMarkup = /* @__PURE__ */ React.createElement("div", {
      id: `${id}-CharacterCounter`,
      className: characterCountClassName,
      "aria-label": characterCountLabel,
      "aria-live": focus ? "polite" : "off",
      "aria-atomic": "true",
      onClick: handleClickChild
    }, /* @__PURE__ */ React.createElement(Text, {
      as: "span",
      variant: "bodyMd"
    }, characterCountText));
  }
  const clearButtonVisible = normalizedValue !== "";
  const clearButtonMarkup = clearButton && clearButtonVisible ? /* @__PURE__ */ React.createElement("button", {
    type: "button",
    className: styles$O.ClearButton,
    onClick: handleClearButtonPress,
    disabled
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, i18n.translate("Polaris.Common.clear")), /* @__PURE__ */ React.createElement(Icon, {
    source: XCircleIcon,
    tone: "base"
  })) : null;
  const handleNumberChange = useCallback((steps, stepAmount = normalizedStep) => {
    if (onChange == null && onSpinnerChange == null) {
      return;
    }
    const dpl = (num) => (num.toString().split(".")[1] || []).length;
    const numericValue = value ? parseFloat(value) : 0;
    if (isNaN(numericValue)) {
      return;
    }
    const decimalPlaces = type === "integer" ? 0 : Math.max(dpl(numericValue), dpl(stepAmount));
    const newValue = Math.min(Number(normalizedMax), Math.max(numericValue + steps * stepAmount, Number(normalizedMin)));
    if (onSpinnerChange != null) {
      onSpinnerChange(String(newValue.toFixed(decimalPlaces)), id);
    } else if (onChange != null) {
      onChange(String(newValue.toFixed(decimalPlaces)), id);
    }
  }, [id, normalizedMax, normalizedMin, onChange, onSpinnerChange, normalizedStep, type, value]);
  const handleSpinnerButtonRelease = useCallback(() => {
    clearTimeout(buttonPressTimer.current);
  }, []);
  const handleSpinnerButtonPress = useCallback((onChange2) => {
    const minInterval = 50;
    const decrementBy = 10;
    let interval = 200;
    const onChangeInterval = () => {
      if (interval > minInterval) interval -= decrementBy;
      onChange2(0);
      buttonPressTimer.current = window.setTimeout(onChangeInterval, interval);
    };
    buttonPressTimer.current = window.setTimeout(onChangeInterval, interval);
    document.addEventListener("mouseup", handleSpinnerButtonRelease, {
      once: true
    });
  }, [handleSpinnerButtonRelease]);
  const spinnerMarkup = isNumericType && step !== 0 && !disabled && !readOnly ? /* @__PURE__ */ React.createElement(Spinner, {
    onClick: handleClickChild,
    onChange: handleNumberChange,
    onMouseDown: handleSpinnerButtonPress,
    onMouseUp: handleSpinnerButtonRelease,
    ref: spinnerRef,
    onBlur: handleOnBlur
  }) : null;
  const style = multiline && height ? {
    height,
    maxHeight
  } : null;
  const handleExpandingResize = useCallback((height2) => {
    setHeight(height2);
  }, []);
  const resizer = multiline && isAfterInitial ? /* @__PURE__ */ React.createElement(Resizer, {
    contents: normalizedValue || placeholder,
    currentHeight: height,
    minimumLines: typeof multiline === "number" ? multiline : 1,
    onHeightChange: handleExpandingResize
  }) : null;
  const describedBy = [];
  if (error) {
    describedBy.push(`${id}Error`);
  }
  if (helpText) {
    describedBy.push(helpTextID(id));
  }
  if (showCharacterCount) {
    describedBy.push(`${id}-CharacterCounter`);
  }
  const labelledBy = [];
  if (prefix) {
    labelledBy.push(`${id}-Prefix`);
  }
  if (suffix) {
    labelledBy.push(`${id}-Suffix`);
  }
  if (verticalContent) {
    labelledBy.push(`${id}-VerticalContent`);
  }
  labelledBy.unshift(labelID(id));
  const inputClassName = classNames(styles$O.Input, align && styles$O[variationName("Input-align", align)], suffix && styles$O["Input-suffixed"], clearButton && styles$O["Input-hasClearButton"], monospaced && styles$O.monospaced, suggestion && styles$O.suggestion, autoSize && styles$O["Input-autoSize"]);
  const handleOnFocus = (event) => {
    setFocus(true);
    if (selectTextOnFocus && !suggestion) {
      const input2 = getInputRef();
      input2 == null ? void 0 : input2.select();
    }
    if (onFocus) {
      onFocus(event);
    }
  };
  useEventListener("wheel", handleOnWheel, inputRef);
  function handleOnWheel(event) {
    if (document.activeElement === event.target && isNumericType) {
      event.stopPropagation();
    }
  }
  const input = /* @__PURE__ */ createElement(multiline ? "textarea" : "input", {
    name,
    id,
    disabled,
    readOnly,
    role,
    autoFocus,
    value: normalizedValue,
    placeholder,
    style,
    autoComplete,
    className: inputClassName,
    ref: multiline ? textAreaRef : inputRef,
    min,
    max,
    step,
    minLength,
    maxLength,
    spellCheck,
    pattern,
    inputMode,
    type: inputType,
    rows: getRows(multiline),
    size: autoSize ? 1 : void 0,
    "aria-describedby": describedBy.length ? describedBy.join(" ") : void 0,
    "aria-labelledby": labelledBy.join(" "),
    "aria-invalid": Boolean(error),
    "aria-owns": ariaOwns,
    "aria-activedescendant": ariaActiveDescendant,
    "aria-autocomplete": ariaAutocomplete,
    "aria-controls": ariaControls,
    "aria-expanded": ariaExpanded,
    "aria-required": requiredIndicator,
    ...normalizeAriaMultiline(multiline),
    onFocus: handleOnFocus,
    onBlur: handleOnBlur,
    onClick: handleClickChild,
    onKeyPress: handleKeyPress,
    onKeyDown: handleKeyDown2,
    onChange: !suggestion ? handleChange : void 0,
    onInput: suggestion ? handleChange : void 0,
    // 1Password disable data attribute
    "data-1p-ignore": autoComplete === "off" || void 0,
    // LastPass disable data attribute
    "data-lpignore": autoComplete === "off" || void 0,
    // Dashlane disable data attribute
    "data-form-type": autoComplete === "off" ? "other" : void 0
  });
  const inputWithVerticalContentMarkup = verticalContent ? /* @__PURE__ */ React.createElement("div", {
    className: styles$O.VerticalContent,
    id: `${id}-VerticalContent`,
    ref: verticalContentRef,
    onClick: handleClickChild
  }, verticalContent, input) : null;
  const inputMarkup = verticalContent ? inputWithVerticalContentMarkup : input;
  const backdropMarkup = /* @__PURE__ */ React.createElement("div", {
    className: classNames(styles$O.Backdrop, connectedLeft && styles$O["Backdrop-connectedLeft"], connectedRight && styles$O["Backdrop-connectedRight"])
  });
  const inputAndSuffixMarkup = autoSize ? /* @__PURE__ */ React.createElement("div", {
    className: styles$O.InputAndSuffixWrapper
  }, /* @__PURE__ */ React.createElement("div", {
    className: classNames(styles$O.AutoSizeWrapper, suffix && styles$O.AutoSizeWrapperWithSuffix),
    "data-auto-size-value": value || placeholder
  }, inputMarkup), suffixMarkup) : /* @__PURE__ */ React.createElement(React.Fragment, null, inputMarkup, suffixMarkup);
  return /* @__PURE__ */ React.createElement(Labelled, {
    label,
    id,
    error,
    action: labelAction,
    labelHidden,
    helpText,
    requiredIndicator,
    disabled,
    readOnly
  }, /* @__PURE__ */ React.createElement(Connected, {
    left: connectedLeft,
    right: connectedRight
  }, /* @__PURE__ */ React.createElement("div", {
    className,
    onClick: handleClick,
    ref: textFieldRef
  }, prefixMarkup, inputAndSuffixMarkup, characterCountMarkup, loadingMarkup, clearButtonMarkup, spinnerMarkup, backdropMarkup, resizer)));
  function handleChange(event) {
    onChange && onChange(event.currentTarget.value, id);
  }
  function handleClick(event) {
    var _a2, _b, _c;
    const {
      target
    } = event;
    const inputRefRole = (_a2 = inputRef == null ? void 0 : inputRef.current) == null ? void 0 : _a2.getAttribute("role");
    if (target === inputRef.current && inputRefRole === "combobox") {
      (_b = inputRef.current) == null ? void 0 : _b.focus();
      handleOnFocus(event);
      return;
    }
    if (isPrefixOrSuffix(target) || isVerticalContent(target) || isInput(target) || isSpinner(target) || isLoadingSpinner(target) || focus) {
      return;
    }
    (_c = getInputRef()) == null ? void 0 : _c.focus();
  }
  function handleClickChild(event) {
    var _a2;
    if (!isSpinner(event.target) && !isInput(event.target)) {
      event.stopPropagation();
    }
    if (isPrefixOrSuffix(event.target) || isVerticalContent(event.target) || isInput(event.target) || isLoadingSpinner(event.target) || focus) {
      return;
    }
    setFocus(true);
    (_a2 = getInputRef()) == null ? void 0 : _a2.focus();
  }
  function handleClearButtonPress() {
    onClearButtonClick && onClearButtonClick(id);
  }
  function handleKeyPress(event) {
    const {
      key,
      which
    } = event;
    const numbersSpec = /[\d.,eE+-]$/;
    const integerSpec = /[\deE+-]$/;
    if (!isNumericType || which === Key.Enter || type === "number" && numbersSpec.test(key) || type === "integer" && integerSpec.test(key)) {
      return;
    }
    event.preventDefault();
  }
  function handleKeyDown2(event) {
    if (!isNumericType) {
      return;
    }
    const {
      key,
      which
    } = event;
    if (type === "integer" && (key === "ArrowUp" || which === Key.UpArrow)) {
      handleNumberChange(1);
      event.preventDefault();
    }
    if (type === "integer" && (key === "ArrowDown" || which === Key.DownArrow)) {
      handleNumberChange(-1);
      event.preventDefault();
    }
    if ((which === Key.Home || key === "Home") && min !== void 0) {
      if (onSpinnerChange != null) {
        onSpinnerChange(String(min), id);
      } else if (onChange != null) {
        onChange(String(min), id);
      }
    }
    if ((which === Key.End || key === "End") && max !== void 0) {
      if (onSpinnerChange != null) {
        onSpinnerChange(String(max), id);
      } else if (onChange != null) {
        onChange(String(max), id);
      }
    }
    if ((which === Key.PageUp || key === "PageUp") && largeStep !== void 0) {
      handleNumberChange(1, largeStep);
    }
    if ((which === Key.PageDown || key === "PageDown") && largeStep !== void 0) {
      handleNumberChange(-1, largeStep);
    }
  }
  function handleOnBlur(event) {
    var _a2;
    setFocus(false);
    if ((_a2 = textFieldRef.current) == null ? void 0 : _a2.contains(event == null ? void 0 : event.relatedTarget)) {
      return;
    }
    if (onBlur) {
      onBlur(event);
    }
  }
  function isInput(target) {
    const input2 = getInputRef();
    return target instanceof HTMLElement && input2 && (input2.contains(target) || input2.contains(document.activeElement));
  }
  function isPrefixOrSuffix(target) {
    return target instanceof Element && (prefixRef.current && prefixRef.current.contains(target) || suffixRef.current && suffixRef.current.contains(target));
  }
  function isSpinner(target) {
    return target instanceof Element && spinnerRef.current && spinnerRef.current.contains(target);
  }
  function isLoadingSpinner(target) {
    return target instanceof Element && loadingRef.current && loadingRef.current.contains(target);
  }
  function isVerticalContent(target) {
    return target instanceof Element && verticalContentRef.current && (verticalContentRef.current.contains(target) || verticalContentRef.current.contains(document.activeElement));
  }
}
function getRows(multiline) {
  if (!multiline) return void 0;
  return typeof multiline === "number" ? multiline : 1;
}
function normalizeAriaMultiline(multiline) {
  if (!multiline) return void 0;
  return Boolean(multiline) || typeof multiline === "number" && multiline > 0 ? {
    "aria-multiline": true
  } : void 0;
}
const FILTER_ACTIONS_THRESHOLD = 8;
function ActionList({
  items,
  sections = [],
  actionRole,
  allowFiltering,
  onActionAnyItem
}) {
  const i18n = useI18n();
  const filterActions = useContext(FilterActionsContext);
  let finalSections = [];
  const actionListRef = useRef(null);
  const [searchText, setSearchText] = useState("");
  if (items) {
    finalSections = [{
      items
    }, ...sections];
  } else if (sections) {
    finalSections = sections;
  }
  const isFilterable = finalSections == null ? void 0 : finalSections.some((section) => section.items.some((item) => typeof item.content === "string"));
  const hasMultipleSections = finalSections.length > 1;
  const elementRole = hasMultipleSections && actionRole === "menuitem" ? "menu" : void 0;
  const elementTabIndex = hasMultipleSections && actionRole === "menuitem" ? -1 : void 0;
  const filteredSections = finalSections == null ? void 0 : finalSections.map((section) => ({
    ...section,
    items: section.items.filter(({
      content
    }) => typeof content === "string" ? content == null ? void 0 : content.toLowerCase().includes(searchText.toLowerCase()) : content)
  }));
  const sectionMarkup = filteredSections.map((section, index) => {
    return section.items.length > 0 ? /* @__PURE__ */ React.createElement(Section$4, {
      key: typeof section.title === "string" ? section.title : index,
      section,
      hasMultipleSections,
      actionRole,
      onActionAnyItem,
      isFirst: index === 0
    }) : null;
  });
  const handleFocusPreviousItem = (evt) => {
    evt.preventDefault();
    if (actionListRef.current && evt.target) {
      if (actionListRef.current.contains(evt.target)) {
        wrapFocusPreviousFocusableMenuItem(actionListRef.current, evt.target);
      }
    }
  };
  const handleFocusNextItem = (evt) => {
    evt.preventDefault();
    if (actionListRef.current && evt.target) {
      if (actionListRef.current.contains(evt.target)) {
        wrapFocusNextFocusableMenuItem(actionListRef.current, evt.target);
      }
    }
  };
  const listeners = actionRole === "menuitem" ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(KeypressListener, {
    keyEvent: "keydown",
    keyCode: Key.DownArrow,
    handler: handleFocusNextItem
  }), /* @__PURE__ */ React.createElement(KeypressListener, {
    keyEvent: "keydown",
    keyCode: Key.UpArrow,
    handler: handleFocusPreviousItem
  })) : null;
  const totalFilteredActions = useMemo(() => {
    const totalSectionItems = (filteredSections == null ? void 0 : filteredSections.reduce((acc, section) => acc + section.items.length, 0)) || 0;
    return totalSectionItems;
  }, [filteredSections]);
  const totalActions = (finalSections == null ? void 0 : finalSections.reduce((acc, section) => acc + section.items.length, 0)) || 0;
  const hasManyActions = totalActions >= FILTER_ACTIONS_THRESHOLD;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, (allowFiltering || filterActions) && hasManyActions && isFilterable && /* @__PURE__ */ React.createElement(Box, {
    padding: "200",
    paddingBlockEnd: totalFilteredActions > 0 ? "0" : "200"
  }, /* @__PURE__ */ React.createElement(TextField, {
    clearButton: true,
    labelHidden: true,
    label: i18n.translate("Polaris.ActionList.SearchField.placeholder"),
    placeholder: i18n.translate("Polaris.ActionList.SearchField.placeholder"),
    autoComplete: "off",
    value: searchText,
    onChange: (value) => setSearchText(value),
    prefix: /* @__PURE__ */ React.createElement(Icon, {
      source: SearchIcon
    }),
    onClearButtonClick: () => setSearchText("")
  })), /* @__PURE__ */ React.createElement(Box, {
    as: hasMultipleSections ? "ul" : "div",
    ref: actionListRef,
    role: elementRole,
    tabIndex: elementTabIndex
  }, listeners, sectionMarkup));
}
ActionList.Item = Item$7;
var styles$J = {
  "ActionMenu": "Polaris-ActionMenu"
};
var styles$I = {
  "RollupActivator": "Polaris-ActionMenu-RollupActions__RollupActivator"
};
function setActivatorAttributes(activator, {
  id,
  active = false,
  ariaHaspopup,
  activatorDisabled = false
}) {
  if (!activatorDisabled) {
    activator.tabIndex = activator.tabIndex || 0;
  }
  activator.setAttribute("aria-controls", id);
  activator.setAttribute("aria-owns", id);
  activator.setAttribute("aria-expanded", String(active));
  activator.setAttribute("data-state", active ? "open" : "closed");
  if (ariaHaspopup != null) {
    activator.setAttribute("aria-haspopup", String(ariaHaspopup));
  }
}
function wrapWithComponent(element, Component2, props) {
  if (element == null) {
    return null;
  }
  return isElementOfType(element, Component2) ? element : /* @__PURE__ */ React.createElement(Component2, props, element);
}
const isComponent = process.env.NODE_ENV === "development" ? hotReloadComponentCheck : (AComponent, AnotherComponent) => AComponent === AnotherComponent;
function isElementOfType(element, Component2) {
  var _a2;
  if (element == null || !/* @__PURE__ */ isValidElement(element) || typeof element.type === "string") {
    return false;
  }
  const {
    type: defaultType
  } = element;
  const overrideType = (_a2 = element.props) == null ? void 0 : _a2.__type__;
  const type = overrideType || defaultType;
  const Components = Array.isArray(Component2) ? Component2 : [Component2];
  return Components.some((AComponent) => typeof type !== "string" && isComponent(AComponent, type));
}
function elementChildren(children, predicate = () => true) {
  return Children.toArray(children).filter((child) => /* @__PURE__ */ isValidElement(child) && predicate(child));
}
function ConditionalWrapper({
  condition,
  wrapper,
  children
}) {
  return condition ? wrapper(children) : children;
}
function ConditionalRender({
  condition,
  children
}) {
  return condition ? children : null;
}
function hotReloadComponentCheck(AComponent, AnotherComponent) {
  const componentName = AComponent.name;
  const anotherComponentName = AnotherComponent.displayName;
  return AComponent === AnotherComponent || Boolean(componentName) && componentName === anotherComponentName;
}
var styles$H = {
  "Popover": "Polaris-Popover",
  "PopoverOverlay": "Polaris-Popover__PopoverOverlay",
  "PopoverOverlay-noAnimation": "Polaris-Popover__PopoverOverlay--noAnimation",
  "PopoverOverlay-entering": "Polaris-Popover__PopoverOverlay--entering",
  "PopoverOverlay-open": "Polaris-Popover__PopoverOverlay--open",
  "measuring": "Polaris-Popover--measuring",
  "PopoverOverlay-exiting": "Polaris-Popover__PopoverOverlay--exiting",
  "fullWidth": "Polaris-Popover--fullWidth",
  "Content": "Polaris-Popover__Content",
  "positionedAbove": "Polaris-Popover--positionedAbove",
  "positionedCover": "Polaris-Popover--positionedCover",
  "ContentContainer": "Polaris-Popover__ContentContainer",
  "Content-fullHeight": "Polaris-Popover__Content--fullHeight",
  "Content-fluidContent": "Polaris-Popover__Content--fluidContent",
  "Pane": "Polaris-Popover__Pane",
  "Pane-fixed": "Polaris-Popover__Pane--fixed",
  "Pane-subdued": "Polaris-Popover__Pane--subdued",
  "Pane-captureOverscroll": "Polaris-Popover__Pane--captureOverscroll",
  "Section": "Polaris-Popover__Section",
  "FocusTracker": "Polaris-Popover__FocusTracker",
  "PopoverOverlay-hideOnPrint": "Polaris-Popover__PopoverOverlay--hideOnPrint"
};
function Section$3({
  children
}) {
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$H.Section
  }, /* @__PURE__ */ React.createElement(Box, {
    paddingInlineStart: "300",
    paddingInlineEnd: "300",
    paddingBlockStart: "200",
    paddingBlockEnd: "150"
  }, children));
}
function Pane({
  captureOverscroll = false,
  fixed,
  sectioned,
  children,
  height,
  subdued,
  onScrolledToBottom
}) {
  const className = classNames(styles$H.Pane, fixed && styles$H["Pane-fixed"], subdued && styles$H["Pane-subdued"], captureOverscroll && styles$H["Pane-captureOverscroll"]);
  const content = sectioned ? wrapWithComponent(children, Section$3, {}) : children;
  const style = height ? {
    height,
    maxHeight: height,
    minHeight: height
  } : void 0;
  return fixed ? /* @__PURE__ */ React.createElement("div", {
    style,
    className
  }, content) : /* @__PURE__ */ React.createElement(Scrollable, {
    shadow: true,
    className,
    style,
    onScrolledToBottom,
    scrollbarWidth: "thin"
  }, content);
}
let PopoverCloseSource;
(function(PopoverCloseSource2) {
  PopoverCloseSource2[PopoverCloseSource2["Click"] = 0] = "Click";
  PopoverCloseSource2[PopoverCloseSource2["EscapeKeypress"] = 1] = "EscapeKeypress";
  PopoverCloseSource2[PopoverCloseSource2["FocusOut"] = 2] = "FocusOut";
  PopoverCloseSource2[PopoverCloseSource2["ScrollOut"] = 3] = "ScrollOut";
})(PopoverCloseSource || (PopoverCloseSource = {}));
var TransitionStatus$1;
(function(TransitionStatus2) {
  TransitionStatus2["Entering"] = "entering";
  TransitionStatus2["Entered"] = "entered";
  TransitionStatus2["Exiting"] = "exiting";
  TransitionStatus2["Exited"] = "exited";
})(TransitionStatus$1 || (TransitionStatus$1 = {}));
class PopoverOverlay extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      transitionStatus: this.props.active ? TransitionStatus$1.Entering : TransitionStatus$1.Exited
    };
    this.contentNode = /* @__PURE__ */ createRef();
    this.renderPopover = (overlayDetails) => {
      const {
        measuring,
        desiredHeight,
        positioning
      } = overlayDetails;
      const {
        id,
        children,
        sectioned,
        fullWidth,
        fullHeight,
        fluidContent,
        hideOnPrint,
        autofocusTarget,
        captureOverscroll
      } = this.props;
      const isCovering = positioning === "cover";
      const className = classNames(styles$H.Popover, measuring && styles$H.measuring, (fullWidth || isCovering) && styles$H.fullWidth, hideOnPrint && styles$H["PopoverOverlay-hideOnPrint"], positioning && styles$H[variationName("positioned", positioning)]);
      const contentStyles = measuring ? void 0 : {
        height: desiredHeight
      };
      const contentClassNames = classNames(styles$H.Content, fullHeight && styles$H["Content-fullHeight"], fluidContent && styles$H["Content-fluidContent"]);
      return /* @__PURE__ */ React.createElement("div", Object.assign({
        className
      }, overlay.props), /* @__PURE__ */ React.createElement(EventListener, {
        event: "click",
        handler: this.handleClick
      }), /* @__PURE__ */ React.createElement(EventListener, {
        event: "touchstart",
        handler: this.handleClick
      }), /* @__PURE__ */ React.createElement(KeypressListener, {
        keyCode: Key.Escape,
        handler: this.handleEscape
      }), /* @__PURE__ */ React.createElement("div", {
        className: styles$H.FocusTracker,
        tabIndex: 0,
        onFocus: this.handleFocusFirstItem
      }), /* @__PURE__ */ React.createElement("div", {
        className: styles$H.ContentContainer
      }, /* @__PURE__ */ React.createElement("div", {
        id,
        tabIndex: autofocusTarget === "none" ? void 0 : -1,
        className: contentClassNames,
        style: contentStyles,
        ref: this.contentNode
      }, renderPopoverContent(children, {
        captureOverscroll,
        sectioned
      }))), /* @__PURE__ */ React.createElement("div", {
        className: styles$H.FocusTracker,
        tabIndex: 0,
        onFocus: this.handleFocusLastItem
      }));
    };
    this.handleClick = (event) => {
      const target = event.target;
      const {
        contentNode,
        props: {
          activator,
          onClose,
          preventCloseOnChildOverlayClick
        }
      } = this;
      const composedPath = event.composedPath();
      const wasDescendant = preventCloseOnChildOverlayClick ? wasPolarisPortalDescendant(composedPath, this.context.container) : wasContentNodeDescendant(composedPath, contentNode);
      const isActivatorDescendant = nodeContainsDescendant(activator, target);
      if (wasDescendant || isActivatorDescendant || this.state.transitionStatus !== TransitionStatus$1.Entered) {
        return;
      }
      onClose(PopoverCloseSource.Click);
    };
    this.handleScrollOut = () => {
      this.props.onClose(PopoverCloseSource.ScrollOut);
    };
    this.handleEscape = (event) => {
      const target = event.target;
      const {
        contentNode,
        props: {
          activator
        }
      } = this;
      const composedPath = event.composedPath();
      const wasDescendant = wasContentNodeDescendant(composedPath, contentNode);
      const isActivatorDescendant = nodeContainsDescendant(activator, target);
      if (wasDescendant || isActivatorDescendant) {
        this.props.onClose(PopoverCloseSource.EscapeKeypress);
      }
    };
    this.handleFocusFirstItem = () => {
      this.props.onClose(PopoverCloseSource.FocusOut);
    };
    this.handleFocusLastItem = () => {
      this.props.onClose(PopoverCloseSource.FocusOut);
    };
    this.overlayRef = /* @__PURE__ */ createRef();
  }
  forceUpdatePosition() {
    var _a2;
    (_a2 = this.overlayRef.current) == null ? void 0 : _a2.forceUpdatePosition();
  }
  changeTransitionStatus(transitionStatus, cb) {
    this.setState({
      transitionStatus
    }, cb);
    this.contentNode.current && this.contentNode.current.getBoundingClientRect();
  }
  componentDidMount() {
    if (this.props.active) {
      this.focusContent();
      this.changeTransitionStatus(TransitionStatus$1.Entered);
    }
  }
  componentDidUpdate(oldProps) {
    if (this.props.active && !oldProps.active) {
      this.focusContent();
      this.changeTransitionStatus(TransitionStatus$1.Entering, () => {
        this.clearTransitionTimeout();
        this.enteringTimer = window.setTimeout(() => {
          this.setState({
            transitionStatus: TransitionStatus$1.Entered
          });
        }, parseInt(themeDefault.motion["motion-duration-100"], 10));
      });
    }
    if (!this.props.active && oldProps.active) {
      this.clearTransitionTimeout();
      this.setState({
        transitionStatus: TransitionStatus$1.Exited
      });
    }
  }
  componentWillUnmount() {
    this.clearTransitionTimeout();
  }
  render() {
    const {
      active,
      activator,
      fullWidth,
      preferredPosition = "below",
      preferredAlignment = "center",
      preferInputActivator = true,
      fixed,
      zIndexOverride
    } = this.props;
    const {
      transitionStatus
    } = this.state;
    if (transitionStatus === TransitionStatus$1.Exited && !active) return null;
    const className = classNames(styles$H.PopoverOverlay, transitionStatus === TransitionStatus$1.Entering && styles$H["PopoverOverlay-entering"], transitionStatus === TransitionStatus$1.Entered && styles$H["PopoverOverlay-open"], transitionStatus === TransitionStatus$1.Exiting && styles$H["PopoverOverlay-exiting"], preferredPosition === "cover" && styles$H["PopoverOverlay-noAnimation"]);
    return /* @__PURE__ */ React.createElement(PositionedOverlay, {
      ref: this.overlayRef,
      fullWidth,
      active,
      activator,
      preferInputActivator,
      preferredPosition,
      preferredAlignment,
      render: this.renderPopover.bind(this),
      fixed,
      onScrollOut: this.handleScrollOut,
      classNames: className,
      zIndexOverride
    });
  }
  clearTransitionTimeout() {
    if (this.enteringTimer) {
      window.clearTimeout(this.enteringTimer);
    }
  }
  focusContent() {
    const {
      autofocusTarget = "container"
    } = this.props;
    if (autofocusTarget === "none" || this.contentNode == null) {
      return;
    }
    requestAnimationFrame(() => {
      if (this.contentNode.current == null) {
        return;
      }
      const focusableChild = findFirstKeyboardFocusableNode(this.contentNode.current);
      if (focusableChild && autofocusTarget === "first-node") {
        focusableChild.focus({
          preventScroll: process.env.NODE_ENV === "development"
        });
      } else {
        this.contentNode.current.focus({
          preventScroll: process.env.NODE_ENV === "development"
        });
      }
    });
  }
  // eslint-disable-next-line @shopify/react-no-multiple-render-methods
}
PopoverOverlay.contextType = PortalsManagerContext;
function renderPopoverContent(children, props) {
  const childrenArray = Children.toArray(children);
  if (isElementOfType(childrenArray[0], Pane)) {
    return childrenArray;
  }
  return wrapWithComponent(childrenArray, Pane, props);
}
function nodeContainsDescendant(rootNode, descendant) {
  if (rootNode === descendant) {
    return true;
  }
  let parent = descendant.parentNode;
  while (parent != null) {
    if (parent === rootNode) {
      return true;
    }
    parent = parent.parentNode;
  }
  return false;
}
function wasContentNodeDescendant(composedPath, contentNode) {
  return contentNode.current != null && composedPath.includes(contentNode.current);
}
function wasPolarisPortalDescendant(composedPath, portalsContainerElement) {
  return composedPath.some((eventTarget) => eventTarget instanceof Node && (portalsContainerElement == null ? void 0 : portalsContainerElement.contains(eventTarget)));
}
const PopoverComponent = /* @__PURE__ */ forwardRef(function Popover({
  activatorWrapper = "div",
  children,
  onClose,
  activator,
  preventFocusOnClose,
  active,
  fixed,
  ariaHaspopup,
  preferInputActivator = true,
  zIndexOverride,
  ...rest
}, ref) {
  const [activatorNode, setActivatorNode] = useState();
  const overlayRef = useRef(null);
  const activatorContainer = useRef(null);
  const WrapperComponent = activatorWrapper;
  const id = useId();
  function forceUpdatePosition() {
    var _a2;
    (_a2 = overlayRef.current) == null ? void 0 : _a2.forceUpdatePosition();
  }
  useImperativeHandle(ref, () => {
    return {
      forceUpdatePosition
    };
  });
  const setAccessibilityAttributes = useCallback(() => {
    if (activatorContainer.current == null) {
      return;
    }
    const firstFocusable = findFirstFocusableNodeIncludingDisabled(activatorContainer.current);
    const focusableActivator = firstFocusable || activatorContainer.current;
    const activatorDisabled = "disabled" in focusableActivator && Boolean(focusableActivator.disabled);
    setActivatorAttributes(focusableActivator, {
      id,
      active,
      ariaHaspopup,
      activatorDisabled
    });
  }, [id, active, ariaHaspopup]);
  const handleClose = (source) => {
    onClose(source);
    if (activatorContainer.current == null || preventFocusOnClose) {
      return;
    }
    if (source === PopoverCloseSource.FocusOut && activatorNode) {
      const focusableActivator = findFirstFocusableNodeIncludingDisabled(activatorNode) || findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current;
      if (!focusNextFocusableNode(focusableActivator, isInPortal)) {
        focusableActivator.focus();
      }
    } else if (source === PopoverCloseSource.EscapeKeypress && activatorNode) {
      const focusableActivator = findFirstFocusableNodeIncludingDisabled(activatorNode) || findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current;
      if (focusableActivator) {
        focusableActivator.focus();
      } else {
        focusNextFocusableNode(focusableActivator, isInPortal);
      }
    }
  };
  useEffect(() => {
    if (!activatorNode && activatorContainer.current) {
      setActivatorNode(activatorContainer.current.firstElementChild);
    } else if (activatorNode && activatorContainer.current && !activatorContainer.current.contains(activatorNode)) {
      setActivatorNode(activatorContainer.current.firstElementChild);
    }
    setAccessibilityAttributes();
  }, [activatorNode, setAccessibilityAttributes]);
  useEffect(() => {
    if (activatorNode && activatorContainer.current) {
      setActivatorNode(activatorContainer.current.firstElementChild);
    }
    setAccessibilityAttributes();
  }, [activatorNode, setAccessibilityAttributes]);
  const portal2 = activatorNode ? /* @__PURE__ */ React.createElement(Portal, {
    idPrefix: "popover"
  }, /* @__PURE__ */ React.createElement(PopoverOverlay, Object.assign({
    ref: overlayRef,
    id,
    activator: activatorNode,
    preferInputActivator,
    onClose: handleClose,
    active,
    fixed,
    zIndexOverride
  }, rest), children)) : null;
  return /* @__PURE__ */ React.createElement(WrapperComponent, {
    ref: activatorContainer
  }, Children.only(activator), portal2);
});
function isInPortal(element) {
  let parentElement = element.parentElement;
  while (parentElement) {
    if (parentElement.matches(portal.selector)) return false;
    parentElement = parentElement.parentElement;
  }
  return true;
}
const Popover2 = Object.assign(PopoverComponent, {
  Pane,
  Section: Section$3
});
function RollupActions({
  accessibilityLabel,
  items = [],
  sections = []
}) {
  const i18n = useI18n();
  const {
    value: rollupOpen,
    toggle: toggleRollupOpen
  } = useToggle(false);
  if (items.length === 0 && sections.length === 0) {
    return null;
  }
  const activatorMarkup = /* @__PURE__ */ React.createElement("div", {
    className: styles$I.RollupActivator
  }, /* @__PURE__ */ React.createElement(Button, {
    icon: MenuHorizontalIcon,
    accessibilityLabel: accessibilityLabel || i18n.translate("Polaris.ActionMenu.RollupActions.rollupButton"),
    onClick: toggleRollupOpen
  }));
  return /* @__PURE__ */ React.createElement(Popover2, {
    active: rollupOpen,
    activator: activatorMarkup,
    preferredAlignment: "right",
    onClose: toggleRollupOpen,
    hideOnPrint: true
  }, /* @__PURE__ */ React.createElement(ActionList, {
    items,
    sections,
    onActionAnyItem: toggleRollupOpen
  }));
}
var styles$G = {
  "ActionsLayoutOuter": "Polaris-ActionMenu-Actions__ActionsLayoutOuter",
  "ActionsLayout": "Polaris-ActionMenu-Actions__ActionsLayout",
  "ActionsLayout--measuring": "Polaris-ActionMenu-Actions--actionsLayoutMeasuring",
  "ActionsLayoutMeasurer": "Polaris-ActionMenu-Actions__ActionsLayoutMeasurer"
};
function getVisibleAndHiddenActionsIndices(actions = [], groups = [], disclosureWidth, actionsWidths, containerWidth) {
  const sumTabWidths = actionsWidths.reduce((sum, width) => sum + width, 0);
  const arrayOfActionsIndices = actions.map((_, index) => {
    return index;
  });
  const arrayOfGroupsIndices = groups.map((_, index) => {
    return index;
  });
  const visibleActions = [];
  const hiddenActions = [];
  const visibleGroups = [];
  const hiddenGroups = [];
  if (containerWidth > sumTabWidths) {
    visibleActions.push(...arrayOfActionsIndices);
    visibleGroups.push(...arrayOfGroupsIndices);
  } else {
    let accumulatedWidth = 0;
    arrayOfActionsIndices.forEach((currentActionsIndex) => {
      const currentActionsWidth = actionsWidths[currentActionsIndex];
      if (accumulatedWidth + currentActionsWidth >= containerWidth - disclosureWidth) {
        hiddenActions.push(currentActionsIndex);
        return;
      }
      visibleActions.push(currentActionsIndex);
      accumulatedWidth += currentActionsWidth;
    });
    arrayOfGroupsIndices.forEach((currentGroupsIndex) => {
      const currentActionsWidth = actionsWidths[currentGroupsIndex + actions.length];
      if (accumulatedWidth + currentActionsWidth >= containerWidth - disclosureWidth) {
        hiddenGroups.push(currentGroupsIndex);
        return;
      }
      visibleGroups.push(currentGroupsIndex);
      accumulatedWidth += currentActionsWidth;
    });
  }
  return {
    visibleActions,
    hiddenActions,
    visibleGroups,
    hiddenGroups
  };
}
var styles$F = {
  "Details": "Polaris-ActionMenu-MenuGroup__Details"
};
var styles$E = {
  "SecondaryAction": "Polaris-ActionMenu-SecondaryAction",
  "critical": "Polaris-ActionMenu-SecondaryAction--critical"
};
function SecondaryAction({
  children,
  tone,
  helpText,
  onAction,
  destructive,
  ...rest
}) {
  const buttonMarkup = /* @__PURE__ */ React.createElement(Button, Object.assign({
    onClick: onAction,
    tone: destructive ? "critical" : void 0
  }, rest), children);
  const actionMarkup = helpText ? /* @__PURE__ */ React.createElement(Tooltip, {
    preferredPosition: "below",
    content: helpText
  }, buttonMarkup) : buttonMarkup;
  return /* @__PURE__ */ React.createElement("div", {
    className: classNames(styles$E.SecondaryAction, tone === "critical" && styles$E.critical)
  }, actionMarkup);
}
function MenuGroup({
  accessibilityLabel,
  active,
  actions,
  details,
  title,
  icon,
  disabled,
  onClick,
  onClose,
  onOpen,
  sections
}) {
  const handleClose = useCallback(() => {
    onClose(title);
  }, [onClose, title]);
  const handleOpen = useCallback(() => {
    onOpen(title);
  }, [onOpen, title]);
  const handleClick = useCallback(() => {
    if (onClick) {
      onClick(handleOpen);
    } else {
      handleOpen();
    }
  }, [onClick, handleOpen]);
  const popoverActivator = /* @__PURE__ */ React.createElement(SecondaryAction, {
    disclosure: true,
    disabled,
    icon,
    accessibilityLabel,
    onClick: handleClick
  }, title);
  return /* @__PURE__ */ React.createElement(Popover2, {
    active: Boolean(active),
    activator: popoverActivator,
    preferredAlignment: "left",
    onClose: handleClose,
    hideOnPrint: true
  }, /* @__PURE__ */ React.createElement(ActionList, {
    items: actions,
    sections,
    onActionAnyItem: handleClose
  }), details && /* @__PURE__ */ React.createElement("div", {
    className: styles$F.Details
  }, details));
}
const ACTION_SPACING = 8;
function ActionsMeasurer({
  actions = [],
  groups = [],
  handleMeasurement: handleMeasurementProp
}) {
  const i18n = useI18n();
  const containerNode = useRef(null);
  const defaultRollupGroup = {
    title: i18n.translate("Polaris.ActionMenu.Actions.moreActions")
  };
  const activator = /* @__PURE__ */ React.createElement(SecondaryAction, {
    disclosure: true
  }, defaultRollupGroup.title);
  const handleMeasurement = useCallback(() => {
    if (!containerNode.current) {
      return;
    }
    const containerWidth = containerNode.current.offsetWidth;
    const hiddenActionNodes = containerNode.current.children;
    const hiddenActionNodesArray = Array.from(hiddenActionNodes);
    const hiddenActionsWidths = hiddenActionNodesArray.map((node) => {
      const buttonWidth = Math.ceil(node.getBoundingClientRect().width);
      return buttonWidth + ACTION_SPACING;
    });
    const disclosureWidth = hiddenActionsWidths.pop() || 0;
    handleMeasurementProp({
      containerWidth,
      disclosureWidth,
      hiddenActionsWidths
    });
  }, [handleMeasurementProp]);
  useEffect(() => {
    handleMeasurement();
  }, [handleMeasurement, actions, groups]);
  const actionsMarkup = actions.map((action2) => {
    const {
      content,
      onAction,
      ...rest
    } = action2;
    return /* @__PURE__ */ React.createElement(SecondaryAction, Object.assign({
      key: content,
      onClick: onAction
    }, rest), content);
  });
  const groupsMarkup = groups.map((group) => {
    const {
      title,
      icon
    } = group;
    return /* @__PURE__ */ React.createElement(SecondaryAction, {
      key: title,
      disclosure: true,
      icon
    }, title);
  });
  useEventListener("resize", handleMeasurement);
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$G.ActionsLayoutMeasurer,
    ref: containerNode
  }, actionsMarkup, groupsMarkup, activator);
}
function Actions({
  actions,
  groups,
  onActionRollup
}) {
  const i18n = useI18n();
  const rollupActiveRef = useRef(null);
  const [activeMenuGroup, setActiveMenuGroup] = useState(void 0);
  const [state, setState] = useReducer((data, partialData) => {
    return {
      ...data,
      ...partialData
    };
  }, {
    disclosureWidth: 0,
    containerWidth: Infinity,
    actionsWidths: [],
    visibleActions: [],
    hiddenActions: [],
    visibleGroups: [],
    hiddenGroups: [],
    hasMeasured: false
  });
  const {
    visibleActions,
    hiddenActions,
    visibleGroups,
    hiddenGroups,
    containerWidth,
    disclosureWidth,
    actionsWidths,
    hasMeasured
  } = state;
  const defaultRollupGroup = {
    title: i18n.translate("Polaris.ActionMenu.Actions.moreActions"),
    actions: []
  };
  const handleMenuGroupToggle = useCallback((group) => setActiveMenuGroup(activeMenuGroup ? void 0 : group), [activeMenuGroup]);
  const handleMenuGroupClose = useCallback(() => setActiveMenuGroup(void 0), []);
  useEffect(() => {
    if (containerWidth === 0) {
      return;
    }
    const {
      visibleActions: visibleActions2,
      visibleGroups: visibleGroups2,
      hiddenActions: hiddenActions2,
      hiddenGroups: hiddenGroups2
    } = getVisibleAndHiddenActionsIndices(actions, groups, disclosureWidth, actionsWidths, containerWidth);
    setState({
      visibleActions: visibleActions2,
      visibleGroups: visibleGroups2,
      hiddenActions: hiddenActions2,
      hiddenGroups: hiddenGroups2,
      hasMeasured: containerWidth !== Infinity
    });
  }, [containerWidth, disclosureWidth, actions, groups, actionsWidths, setState]);
  const actionsOrDefault = useMemo(() => actions ?? [], [actions]);
  const groupsOrDefault = useMemo(() => groups ?? [], [groups]);
  const actionsMarkup = actionsOrDefault.filter((_, index) => {
    if (!visibleActions.includes(index)) {
      return false;
    }
    return true;
  }).map((action2) => {
    const {
      content,
      onAction,
      ...rest
    } = action2;
    return /* @__PURE__ */ React.createElement(SecondaryAction, Object.assign({
      key: content,
      onClick: onAction
    }, rest), content);
  });
  const groupsToFilter = hiddenGroups.length > 0 || hiddenActions.length > 0 ? [...groupsOrDefault, defaultRollupGroup] : [...groupsOrDefault];
  const filteredGroups = groupsToFilter.filter((group, index) => {
    const hasNoGroupsProp = groupsOrDefault.length === 0;
    const isVisibleGroup = visibleGroups.includes(index);
    const isDefaultGroup = group === defaultRollupGroup;
    if (hasNoGroupsProp) {
      return hiddenActions.length > 0;
    }
    if (isDefaultGroup) {
      return true;
    }
    return isVisibleGroup;
  });
  const hiddenActionObjects = hiddenActions.map((index) => actionsOrDefault[index]).filter((action2) => action2 != null);
  const hiddenGroupObjects = hiddenGroups.map((index) => groupsOrDefault[index]).filter((group) => group != null);
  const groupsMarkup = filteredGroups.map((group) => {
    const {
      title,
      actions: groupActions,
      ...rest
    } = group;
    const isDefaultGroup = group === defaultRollupGroup;
    const allHiddenItems = [...hiddenActionObjects, ...hiddenGroupObjects];
    const [finalRolledUpActions, finalRolledUpSectionGroups] = allHiddenItems.reduce(([actions2, sections], action2) => {
      if (isMenuGroup(action2)) {
        sections.push({
          title: action2.title,
          items: action2.actions.map((sectionAction) => ({
            ...sectionAction,
            disabled: action2.disabled || sectionAction.disabled
          }))
        });
      } else {
        actions2.push(action2);
      }
      return [actions2, sections];
    }, [[], []]);
    if (!isDefaultGroup) {
      return /* @__PURE__ */ React.createElement(MenuGroup, Object.assign({
        key: title,
        title,
        active: title === activeMenuGroup,
        actions: groupActions
      }, rest, {
        onOpen: handleMenuGroupToggle,
        onClose: handleMenuGroupClose
      }));
    }
    return /* @__PURE__ */ React.createElement(MenuGroup, Object.assign({
      key: title,
      title,
      active: title === activeMenuGroup,
      actions: [...finalRolledUpActions, ...groupActions],
      sections: finalRolledUpSectionGroups
    }, rest, {
      onOpen: handleMenuGroupToggle,
      onClose: handleMenuGroupClose
    }));
  });
  const handleMeasurement = useCallback((measurements) => {
    const {
      hiddenActionsWidths: actionsWidths2,
      containerWidth: containerWidth2,
      disclosureWidth: disclosureWidth2
    } = measurements;
    const {
      visibleActions: visibleActions2,
      hiddenActions: hiddenActions2,
      visibleGroups: visibleGroups2,
      hiddenGroups: hiddenGroups2
    } = getVisibleAndHiddenActionsIndices(actionsOrDefault, groupsOrDefault, disclosureWidth2, actionsWidths2, containerWidth2);
    if (onActionRollup) {
      const isRollupActive = hiddenActions2.length > 0 || hiddenGroups2.length > 0;
      if (rollupActiveRef.current !== isRollupActive) {
        onActionRollup(isRollupActive);
        rollupActiveRef.current = isRollupActive;
      }
    }
    setState({
      visibleActions: visibleActions2,
      hiddenActions: hiddenActions2,
      visibleGroups: visibleGroups2,
      hiddenGroups: hiddenGroups2,
      actionsWidths: actionsWidths2,
      containerWidth: containerWidth2,
      disclosureWidth: disclosureWidth2,
      hasMeasured: true
    });
  }, [actionsOrDefault, groupsOrDefault, onActionRollup]);
  const actionsMeasurer = /* @__PURE__ */ React.createElement(ActionsMeasurer, {
    actions,
    groups,
    handleMeasurement
  });
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$G.ActionsLayoutOuter
  }, actionsMeasurer, /* @__PURE__ */ React.createElement("div", {
    className: classNames(styles$G.ActionsLayout, !hasMeasured && styles$G["ActionsLayout--measuring"])
  }, actionsMarkup, groupsMarkup));
}
function isMenuGroup(actionOrMenuGroup) {
  return "title" in actionOrMenuGroup;
}
function ActionMenu({
  actions = [],
  groups = [],
  rollup,
  rollupActionsLabel,
  onActionRollup
}) {
  if (actions.length === 0 && groups.length === 0) {
    return null;
  }
  const actionMenuClassNames = classNames(styles$J.ActionMenu, rollup && styles$J.rollup);
  const rollupSections = groups.map((group) => convertGroupToSection(group));
  return /* @__PURE__ */ React.createElement("div", {
    className: actionMenuClassNames
  }, rollup ? /* @__PURE__ */ React.createElement(RollupActions, {
    accessibilityLabel: rollupActionsLabel,
    items: actions,
    sections: rollupSections
  }) : /* @__PURE__ */ React.createElement(Actions, {
    actions,
    groups,
    onActionRollup
  }));
}
function hasGroupsWithActions(groups = []) {
  return groups.length === 0 ? false : groups.some((group) => group.actions.length > 0);
}
function convertGroupToSection({
  title,
  actions,
  disabled
}) {
  return {
    title,
    items: actions.map((action2) => ({
      ...action2,
      disabled: disabled || action2.disabled
    }))
  };
}
var styles$D = {
  "Backdrop": "Polaris-Backdrop",
  "transparent": "Polaris-Backdrop--transparent",
  "belowNavigation": "Polaris-Backdrop--belowNavigation"
};
function useScrollLockManager() {
  const scrollLockManager = useContext(ScrollLockManagerContext);
  if (!scrollLockManager) {
    throw new MissingAppProviderError("No ScrollLockManager was provided.");
  }
  return scrollLockManager;
}
function ScrollLock(_) {
  const scrollLockManager = useScrollLockManager();
  useEffect(() => {
    scrollLockManager.registerScrollLock();
    return () => {
      scrollLockManager.unregisterScrollLock();
    };
  }, [scrollLockManager]);
  return null;
}
function Backdrop(props) {
  const {
    onClick,
    onTouchStart,
    belowNavigation,
    transparent,
    setClosing
  } = props;
  const className = classNames(styles$D.Backdrop, belowNavigation && styles$D.belowNavigation, transparent && styles$D.transparent);
  const handleMouseDown = () => {
    if (setClosing) {
      setClosing(true);
    }
  };
  const handleClick = () => {
    if (setClosing) {
      setClosing(false);
    }
    if (onClick) {
      onClick();
    }
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(ScrollLock, null), /* @__PURE__ */ React.createElement("div", {
    className,
    onClick: handleClick,
    onTouchStart,
    onMouseDown: handleMouseDown
  }));
}
const BannerContext = /* @__PURE__ */ createContext(false);
var styles$C = {
  "ButtonGroup": "Polaris-ButtonGroup",
  "Item": "Polaris-ButtonGroup__Item",
  "Item-plain": "Polaris-ButtonGroup__Item--plain",
  "variantSegmented": "Polaris-ButtonGroup--variantSegmented",
  "Item-focused": "Polaris-ButtonGroup__Item--focused",
  "fullWidth": "Polaris-ButtonGroup--fullWidth",
  "extraTight": "Polaris-ButtonGroup--extraTight",
  "tight": "Polaris-ButtonGroup--tight",
  "loose": "Polaris-ButtonGroup--loose",
  "noWrap": "Polaris-ButtonGroup--noWrap"
};
function Item$5({
  button
}) {
  const {
    value: focused,
    setTrue: forceTrueFocused,
    setFalse: forceFalseFocused
  } = useToggle(false);
  const className = classNames(styles$C.Item, focused && styles$C["Item-focused"], button.props.variant === "plain" && styles$C["Item-plain"]);
  return /* @__PURE__ */ React.createElement("div", {
    className,
    onFocus: forceTrueFocused,
    onBlur: forceFalseFocused
  }, button);
}
function ButtonGroup({
  children,
  gap,
  variant,
  fullWidth,
  connectedTop,
  noWrap
}) {
  const className = classNames(styles$C.ButtonGroup, gap && styles$C[gap], variant && styles$C[variationName("variant", variant)], fullWidth && styles$C.fullWidth, noWrap && styles$C.noWrap);
  const contents = elementChildren(children).map((child, index) => /* @__PURE__ */ React.createElement(Item$5, {
    button: child,
    key: index
  }));
  return /* @__PURE__ */ React.createElement("div", {
    className,
    "data-buttongroup-variant": variant,
    "data-buttongroup-connected-top": connectedTop,
    "data-buttongroup-full-width": fullWidth,
    "data-buttongroup-no-wrap": noWrap
  }, contents);
}
var styles$B = {
  "Bleed": "Polaris-Bleed"
};
const Bleed = ({
  marginInline,
  marginBlock,
  marginBlockStart,
  marginBlockEnd,
  marginInlineStart,
  marginInlineEnd,
  children
}) => {
  const getNegativeMargins = (direction) => {
    const xAxis = ["marginInlineStart", "marginInlineEnd"];
    const yAxis = ["marginBlockStart", "marginBlockEnd"];
    const directionValues = {
      marginBlockStart,
      marginBlockEnd,
      marginInlineStart,
      marginInlineEnd,
      marginInline,
      marginBlock
    };
    if (directionValues[direction]) {
      return directionValues[direction];
    } else if (xAxis.includes(direction) && marginInline) {
      return directionValues.marginInline;
    } else if (yAxis.includes(direction) && marginBlock) {
      return directionValues.marginBlock;
    }
  };
  const negativeMarginBlockStart = getNegativeMargins("marginBlockStart");
  const negativeMarginBlockEnd = getNegativeMargins("marginBlockEnd");
  const negativeMarginInlineStart = getNegativeMargins("marginInlineStart");
  const negativeMarginInlineEnd = getNegativeMargins("marginInlineEnd");
  const style = {
    ...getResponsiveProps("bleed", "margin-block-start", "space", negativeMarginBlockStart),
    ...getResponsiveProps("bleed", "margin-block-end", "space", negativeMarginBlockEnd),
    ...getResponsiveProps("bleed", "margin-inline-start", "space", negativeMarginInlineStart),
    ...getResponsiveProps("bleed", "margin-inline-end", "space", negativeMarginInlineEnd)
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$B.Bleed,
    style: sanitizeCustomProperties(style)
  }, children);
};
function Breadcrumbs({
  backAction
}) {
  const {
    content
  } = backAction;
  return /* @__PURE__ */ React.createElement(Button, {
    key: content,
    url: "url" in backAction ? backAction.url : void 0,
    onClick: "onAction" in backAction ? backAction.onAction : void 0,
    onPointerDown: handleMouseUpByBlurring,
    icon: ArrowLeftIcon,
    accessibilityLabel: backAction.accessibilityLabel ?? content
  });
}
var styles$A = {
  "Indicator": "Polaris-Indicator",
  "pulseIndicator": "Polaris-Indicator--pulseIndicator"
};
function Indicator({
  pulse = true
}) {
  const className = classNames(styles$A.Indicator, pulse && styles$A.pulseIndicator);
  return /* @__PURE__ */ React.createElement("span", {
    className
  });
}
var styles$z = {
  "LegacyStack": "Polaris-LegacyStack",
  "Item": "Polaris-LegacyStack__Item",
  "noWrap": "Polaris-LegacyStack--noWrap",
  "spacingNone": "Polaris-LegacyStack--spacingNone",
  "spacingExtraTight": "Polaris-LegacyStack--spacingExtraTight",
  "spacingTight": "Polaris-LegacyStack--spacingTight",
  "spacingBaseTight": "Polaris-LegacyStack--spacingBaseTight",
  "spacingLoose": "Polaris-LegacyStack--spacingLoose",
  "spacingExtraLoose": "Polaris-LegacyStack--spacingExtraLoose",
  "distributionLeading": "Polaris-LegacyStack--distributionLeading",
  "distributionTrailing": "Polaris-LegacyStack--distributionTrailing",
  "distributionCenter": "Polaris-LegacyStack--distributionCenter",
  "distributionEqualSpacing": "Polaris-LegacyStack--distributionEqualSpacing",
  "distributionFill": "Polaris-LegacyStack--distributionFill",
  "distributionFillEvenly": "Polaris-LegacyStack--distributionFillEvenly",
  "alignmentLeading": "Polaris-LegacyStack--alignmentLeading",
  "alignmentTrailing": "Polaris-LegacyStack--alignmentTrailing",
  "alignmentCenter": "Polaris-LegacyStack--alignmentCenter",
  "alignmentFill": "Polaris-LegacyStack--alignmentFill",
  "alignmentBaseline": "Polaris-LegacyStack--alignmentBaseline",
  "vertical": "Polaris-LegacyStack--vertical",
  "Item-fill": "Polaris-LegacyStack__Item--fill"
};
function Item$4({
  children,
  fill
}) {
  const className = classNames(styles$z.Item, fill && styles$z["Item-fill"]);
  return /* @__PURE__ */ React.createElement("div", {
    className
  }, children);
}
const LegacyStack = /* @__PURE__ */ memo(function Stack({
  children,
  vertical,
  spacing,
  distribution,
  alignment,
  wrap
}) {
  const className = classNames(styles$z.LegacyStack, vertical && styles$z.vertical, spacing && styles$z[variationName("spacing", spacing)], distribution && styles$z[variationName("distribution", distribution)], alignment && styles$z[variationName("alignment", alignment)], wrap === false && styles$z.noWrap);
  const itemMarkup = elementChildren(children).map((child, index) => {
    const props = {
      key: index
    };
    return wrapWithComponent(child, Item$4, props);
  });
  return /* @__PURE__ */ React.createElement("div", {
    className
  }, itemMarkup);
});
LegacyStack.Item = Item$4;
var styles$y = {
  "Collapsible": "Polaris-Collapsible",
  "isFullyClosed": "Polaris-Collapsible--isFullyClosed",
  "expandOnPrint": "Polaris-Collapsible--expandOnPrint"
};
function Collapsible({
  id,
  expandOnPrint,
  open,
  transition = true,
  children,
  onAnimationEnd
}) {
  const [height, setHeight] = useState(0);
  const [isOpen, setIsOpen] = useState(open);
  const [animationState, setAnimationState] = useState("idle");
  const collapsibleContainer = useRef(null);
  const isFullyOpen = animationState === "idle" && open && isOpen;
  const isFullyClosed = animationState === "idle" && !open && !isOpen;
  const content = expandOnPrint || !isFullyClosed ? children : null;
  const wrapperClassName = classNames(styles$y.Collapsible, isFullyClosed && styles$y.isFullyClosed, expandOnPrint && styles$y.expandOnPrint);
  const transitionDisabled = isTransitionDisabled(transition);
  const transitionStyles = typeof transition === "object" && {
    transitionDuration: transition.duration,
    transitionTimingFunction: transition.timingFunction
  };
  const collapsibleStyles = {
    ...transitionStyles,
    ...{
      maxHeight: isFullyOpen ? "none" : `${height}px`,
      overflow: isFullyOpen ? "visible" : "hidden"
    }
  };
  const handleCompleteAnimation = useCallback(({
    target
  }) => {
    if (target === collapsibleContainer.current) {
      setAnimationState("idle");
      setIsOpen(open);
      onAnimationEnd && onAnimationEnd();
    }
  }, [onAnimationEnd, open]);
  const startAnimation = useCallback(() => {
    if (transitionDisabled) {
      setIsOpen(open);
      setAnimationState("idle");
      if (open && collapsibleContainer.current) {
        setHeight(collapsibleContainer.current.scrollHeight);
      } else {
        setHeight(0);
      }
    } else {
      setAnimationState("measuring");
    }
  }, [open, transitionDisabled]);
  useEffect(() => {
    if (open !== isOpen) {
      startAnimation();
    }
  }, [open, isOpen]);
  useEffect(() => {
    if (!open || !collapsibleContainer.current) return;
    setHeight(collapsibleContainer.current.scrollHeight);
  }, []);
  useEffect(() => {
    if (!collapsibleContainer.current) return;
    switch (animationState) {
      case "idle":
        break;
      case "measuring":
        setHeight(collapsibleContainer.current.scrollHeight);
        setAnimationState("animating");
        break;
      case "animating":
        setHeight(open ? collapsibleContainer.current.scrollHeight : 0);
    }
  }, [animationState, open, isOpen]);
  return /* @__PURE__ */ React.createElement("div", {
    id,
    style: collapsibleStyles,
    ref: collapsibleContainer,
    className: wrapperClassName,
    onTransitionEnd: handleCompleteAnimation,
    "aria-hidden": !open
  }, content);
}
const zeroDurationRegex = /^0(ms|s)$/;
function isTransitionDisabled(transitionProp) {
  if (typeof transitionProp === "boolean") {
    return !transitionProp;
  }
  const {
    duration
  } = transitionProp;
  if (duration && zeroDurationRegex.test(duration.trim())) {
    return true;
  }
  return false;
}
var styles$x = {
  "InlineGrid": "Polaris-InlineGrid"
};
function InlineGrid({
  children,
  columns,
  gap,
  alignItems
}) {
  const style = {
    ...getResponsiveValue("inline-grid", "grid-template-columns", formatInlineGrid(columns)),
    ...getResponsiveProps("inline-grid", "gap", "space", gap),
    "--pc-inline-grid-align-items": alignItems
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$x.InlineGrid,
    style: sanitizeCustomProperties(style)
  }, children);
}
function formatInlineGrid(columns) {
  if (typeof columns === "object" && columns !== null && !Array.isArray(columns)) {
    return Object.fromEntries(Object.entries(columns).map(([breakpointAlias, breakpointInlineGrid]) => [breakpointAlias, getColumnValue(breakpointInlineGrid)]));
  }
  return getColumnValue(columns);
}
function getColumnValue(columns) {
  if (!columns) return void 0;
  if (typeof columns === "number" || !isNaN(Number(columns))) {
    return `repeat(${Number(columns)}, minmax(0, 1fr))`;
  }
  if (typeof columns === "string") return columns;
  return columns.map((column) => {
    switch (column) {
      case "oneThird":
        return "minmax(0, 1fr)";
      case "oneHalf":
        return "minmax(0, 1fr)";
      case "twoThirds":
        return "minmax(0, 2fr)";
    }
  }).join(" ");
}
const FrameContext = /* @__PURE__ */ createContext(void 0);
function useFrame() {
  const frame = useContext(FrameContext);
  if (!frame) {
    throw new Error("No Frame context was provided. Your component must be wrapped in a <Frame> component. See https://polaris.shopify.com/components/internal-only/frame for implementation instructions.");
  }
  return frame;
}
function measureColumn(tableData) {
  return function(column, index) {
    const {
      firstVisibleColumnIndex,
      tableLeftVisibleEdge: tableStart,
      tableRightVisibleEdge: tableEnd
    } = tableData;
    const leftEdge = column.offsetLeft;
    const rightEdge = leftEdge + column.offsetWidth;
    const isVisibleLeft = isEdgeVisible(leftEdge, tableStart, tableEnd, "left");
    const isVisibleRight = isEdgeVisible(rightEdge, tableStart, tableEnd, "right");
    const isVisible = isVisibleLeft || isVisibleRight;
    const width = column.offsetWidth;
    if (isVisible) {
      tableData.firstVisibleColumnIndex = Math.min(firstVisibleColumnIndex, index);
    }
    return {
      leftEdge,
      rightEdge,
      isVisible,
      width,
      index
    };
  };
}
function isEdgeVisible(position, start, end, edgeType) {
  const minVisiblePixels = 30;
  return position >= start + (edgeType === "left" ? 0 : minVisiblePixels) && position <= end - minVisiblePixels;
}
function getPrevAndCurrentColumns(tableData, columnData) {
  const {
    firstVisibleColumnIndex
  } = tableData;
  const previousColumnIndex = Math.max(firstVisibleColumnIndex - 1, 0);
  const previousColumn = columnData[previousColumnIndex];
  const currentColumn = columnData[firstVisibleColumnIndex];
  return {
    previousColumn,
    currentColumn
  };
}
var styles$w = {
  "DataTable": "Polaris-DataTable",
  "condensed": "Polaris-DataTable--condensed",
  "Navigation": "Polaris-DataTable__Navigation",
  "Pip": "Polaris-DataTable__Pip",
  "Pip-visible": "Polaris-DataTable__Pip--visible",
  "ScrollContainer": "Polaris-DataTable__ScrollContainer",
  "Table": "Polaris-DataTable__Table",
  "TableRow": "Polaris-DataTable__TableRow",
  "Cell": "Polaris-DataTable__Cell",
  "IncreasedTableDensity": "Polaris-DataTable__IncreasedTableDensity",
  "ZebraStripingOnData": "Polaris-DataTable__ZebraStripingOnData",
  "RowCountIsEven": "Polaris-DataTable__RowCountIsEven",
  "ShowTotalsInFooter": "Polaris-DataTable__ShowTotalsInFooter",
  "Cell-separate": "Polaris-DataTable__Cell--separate",
  "Cell-firstColumn": "Polaris-DataTable__Cell--firstColumn",
  "Cell-numeric": "Polaris-DataTable__Cell--numeric",
  "Cell-truncated": "Polaris-DataTable__Cell--truncated",
  "Cell-header": "Polaris-DataTable__Cell--header",
  "Cell-sortable": "Polaris-DataTable__Cell--sortable",
  "Heading-left": "Polaris-DataTable__Heading--left",
  "Cell-verticalAlignTop": "Polaris-DataTable__Cell--verticalAlignTop",
  "Cell-verticalAlignBottom": "Polaris-DataTable__Cell--verticalAlignBottom",
  "Cell-verticalAlignMiddle": "Polaris-DataTable__Cell--verticalAlignMiddle",
  "Cell-verticalAlignBaseline": "Polaris-DataTable__Cell--verticalAlignBaseline",
  "hoverable": "Polaris-DataTable--hoverable",
  "Cell-hovered": "Polaris-DataTable__Cell--hovered",
  "Icon": "Polaris-DataTable__Icon",
  "Heading": "Polaris-DataTable__Heading",
  "StickyHeaderEnabled": "Polaris-DataTable__StickyHeaderEnabled",
  "StickyHeaderWrapper": "Polaris-DataTable__StickyHeaderWrapper",
  "Cell-sorted": "Polaris-DataTable__Cell--sorted",
  "Cell-total": "Polaris-DataTable__Cell--total",
  "ShowTotals": "Polaris-DataTable__ShowTotals",
  "Cell-total-footer": "Polaris-DataTable--cellTotalFooter",
  "Footer": "Polaris-DataTable__Footer",
  "StickyHeaderInner": "Polaris-DataTable__StickyHeaderInner",
  "StickyHeaderInner-isSticky": "Polaris-DataTable__StickyHeaderInner--isSticky",
  "StickyHeaderTable": "Polaris-DataTable__StickyHeaderTable",
  "FixedFirstColumn": "Polaris-DataTable__FixedFirstColumn",
  "StickyTableHeadingsRow": "Polaris-DataTable__StickyTableHeadingsRow",
  "TooltipContent": "Polaris-DataTable__TooltipContent"
};
function Cell({
  content,
  contentType,
  nthColumn,
  firstColumn,
  truncate,
  header,
  total,
  totalInFooter,
  sorted,
  sortable,
  sortDirection,
  inFixedNthColumn,
  verticalAlign = "top",
  defaultSortDirection = "ascending",
  onSort,
  colSpan,
  setRef = () => {
  },
  stickyHeadingCell = false,
  stickyCellWidth,
  hovered = false,
  handleFocus = () => {
  },
  hasFixedNthColumn = false,
  fixedCellVisible = false,
  firstColumnMinWidth,
  style,
  lastFixedFirstColumn
}) {
  const i18n = useI18n();
  const numeric = contentType === "numeric";
  const className = classNames(styles$w.Cell, styles$w[`Cell-${variationName("verticalAlign", verticalAlign)}`], firstColumn && styles$w["Cell-firstColumn"], truncate && styles$w["Cell-truncated"], header && styles$w["Cell-header"], total && styles$w["Cell-total"], totalInFooter && styles$w["Cell-total-footer"], numeric && styles$w["Cell-numeric"], sortable && styles$w["Cell-sortable"], sorted && styles$w["Cell-sorted"], stickyHeadingCell && styles$w.StickyHeaderCell, hovered && styles$w["Cell-hovered"], lastFixedFirstColumn && inFixedNthColumn && fixedCellVisible && styles$w["Cell-separate"], nthColumn && inFixedNthColumn && stickyHeadingCell && styles$w.FixedFirstColumn);
  const headerClassName = classNames(header && styles$w.Heading, header && contentType === "text" && styles$w["Heading-left"]);
  const iconClassName = classNames(sortable && styles$w.Icon);
  const direction = sorted && sortDirection ? sortDirection : defaultSortDirection;
  const source = direction === "descending" ? SortDescendingIcon : SortAscendingIcon;
  const oppositeDirection = sortDirection === "ascending" ? "descending" : "ascending";
  const sortAccessibilityLabel = i18n.translate("Polaris.DataTable.sortAccessibilityLabel", {
    direction: sorted ? oppositeDirection : direction
  });
  const iconMarkup = /* @__PURE__ */ React.createElement("span", {
    className: iconClassName
  }, /* @__PURE__ */ React.createElement(Icon, {
    source,
    accessibilityLabel: sortAccessibilityLabel
  }));
  const focusable = !(stickyHeadingCell && hasFixedNthColumn && nthColumn && !inFixedNthColumn);
  const sortableHeadingContent = /* @__PURE__ */ React.createElement("button", {
    className: headerClassName,
    onClick: onSort,
    onFocus: handleFocus,
    tabIndex: focusable ? 0 : -1
  }, iconMarkup, content);
  const columnHeadingContent = sortable ? sortableHeadingContent : content;
  const colSpanProp = colSpan && colSpan > 1 ? {
    colSpan
  } : {};
  const minWidthStyles = nthColumn && firstColumnMinWidth ? {
    minWidth: firstColumnMinWidth
  } : {
    minWidth: stickyCellWidth
  };
  const stickyHeading = /* @__PURE__ */ React.createElement("th", Object.assign({
    ref: setRef
  }, headerCell.props, colSpanProp, {
    className,
    "aria-sort": sortDirection,
    style: {
      ...style,
      ...minWidthStyles
    },
    "data-index-table-sticky-heading": true
  }), columnHeadingContent);
  const headingMarkup = header ? /* @__PURE__ */ React.createElement("th", Object.assign({}, headerCell.props, {
    "aria-sort": sortDirection
  }, colSpanProp, {
    ref: setRef,
    className,
    scope: "col",
    style: {
      ...minWidthStyles
    }
  }), columnHeadingContent) : /* @__PURE__ */ React.createElement("th", Object.assign({}, colSpanProp, {
    ref: setRef,
    className,
    scope: "row",
    style: {
      ...minWidthStyles
    }
  }), truncate ? /* @__PURE__ */ React.createElement(TruncatedText, {
    className: styles$w.TooltipContent
  }, content) : content);
  const cellMarkup = header || firstColumn || nthColumn ? headingMarkup : /* @__PURE__ */ React.createElement("td", Object.assign({
    className
  }, colSpanProp), content);
  return stickyHeadingCell ? stickyHeading : cellMarkup;
}
const TruncatedText = ({
  children,
  className = ""
}) => {
  const textRef = useRef(null);
  const {
    current
  } = textRef;
  const text = /* @__PURE__ */ React.createElement("span", {
    ref: textRef,
    className
  }, children);
  return (current == null ? void 0 : current.scrollWidth) > (current == null ? void 0 : current.offsetWidth) ? /* @__PURE__ */ React.createElement(Tooltip, {
    content: textRef.current.innerText
  }, text) : text;
};
var EditableTarget;
(function(EditableTarget2) {
  EditableTarget2["Input"] = "INPUT";
  EditableTarget2["Textarea"] = "TEXTAREA";
  EditableTarget2["Select"] = "SELECT";
  EditableTarget2["ContentEditable"] = "contenteditable";
})(EditableTarget || (EditableTarget = {}));
function isInputFocused() {
  if (document == null || document.activeElement == null) {
    return false;
  }
  const {
    tagName
  } = document.activeElement;
  return tagName === EditableTarget.Input || tagName === EditableTarget.Textarea || tagName === EditableTarget.Select || document.activeElement.hasAttribute(EditableTarget.ContentEditable);
}
var styles$v = {
  "Pagination": "Polaris-Pagination",
  "table": "Polaris-Pagination--table",
  "TablePaginationActions": "Polaris-Pagination__TablePaginationActions"
};
function Pagination({
  hasNext,
  hasPrevious,
  nextURL,
  previousURL,
  onNext,
  onPrevious,
  nextTooltip,
  previousTooltip,
  nextKeys,
  previousKeys,
  accessibilityLabel,
  accessibilityLabels,
  label,
  type = "page"
}) {
  const i18n = useI18n();
  const node = /* @__PURE__ */ createRef();
  const navLabel = accessibilityLabel || i18n.translate("Polaris.Pagination.pagination");
  const previousLabel = (accessibilityLabels == null ? void 0 : accessibilityLabels.previous) || i18n.translate("Polaris.Pagination.previous");
  const nextLabel = (accessibilityLabels == null ? void 0 : accessibilityLabels.next) || i18n.translate("Polaris.Pagination.next");
  const prev = /* @__PURE__ */ React.createElement(Button, {
    icon: ChevronLeftIcon,
    accessibilityLabel: previousLabel,
    url: previousURL,
    onClick: onPrevious,
    disabled: !hasPrevious,
    id: "previousURL"
  });
  const constructedPrevious = previousTooltip && hasPrevious ? /* @__PURE__ */ React.createElement(Tooltip, {
    activatorWrapper: "span",
    content: previousTooltip,
    preferredPosition: "below"
  }, prev) : prev;
  const next = /* @__PURE__ */ React.createElement(Button, {
    icon: ChevronRightIcon,
    accessibilityLabel: nextLabel,
    url: nextURL,
    onClick: onNext,
    disabled: !hasNext,
    id: "nextURL"
  });
  const constructedNext = nextTooltip && hasNext ? /* @__PURE__ */ React.createElement(Tooltip, {
    activatorWrapper: "span",
    content: nextTooltip,
    preferredPosition: "below"
  }, next) : next;
  const previousHandler = onPrevious || noop$3;
  const previousButtonEvents = previousKeys && (previousURL || onPrevious) && hasPrevious && previousKeys.map((key) => /* @__PURE__ */ React.createElement(KeypressListener, {
    key,
    keyCode: key,
    handler: previousURL ? handleCallback(clickPaginationLink("previousURL", node)) : handleCallback(previousHandler)
  }));
  const nextHandler = onNext || noop$3;
  const nextButtonEvents = nextKeys && (nextURL || onNext) && hasNext && nextKeys.map((key) => /* @__PURE__ */ React.createElement(KeypressListener, {
    key,
    keyCode: key,
    handler: nextURL ? handleCallback(clickPaginationLink("nextURL", node)) : handleCallback(nextHandler)
  }));
  if (type === "table") {
    const labelMarkup2 = label ? /* @__PURE__ */ React.createElement(Box, {
      padding: "300",
      paddingBlockStart: "0",
      paddingBlockEnd: "0"
    }, /* @__PURE__ */ React.createElement(Text, {
      as: "span",
      variant: "bodySm",
      fontWeight: "medium"
    }, label)) : null;
    return /* @__PURE__ */ React.createElement("nav", {
      "aria-label": navLabel,
      ref: node,
      className: classNames(styles$v.Pagination, styles$v.table)
    }, previousButtonEvents, nextButtonEvents, /* @__PURE__ */ React.createElement(Box, {
      background: "bg-surface-secondary",
      paddingBlockStart: "150",
      paddingBlockEnd: "150",
      paddingInlineStart: "300",
      paddingInlineEnd: "200"
    }, /* @__PURE__ */ React.createElement(InlineStack, {
      align: "center",
      blockAlign: "center"
    }, /* @__PURE__ */ React.createElement("div", {
      className: styles$v.TablePaginationActions,
      "data-buttongroup-variant": "segmented"
    }, /* @__PURE__ */ React.createElement("div", null, constructedPrevious), labelMarkup2, /* @__PURE__ */ React.createElement("div", null, constructedNext)))));
  }
  const labelTextMarkup = hasNext && hasPrevious ? /* @__PURE__ */ React.createElement("span", null, label) : /* @__PURE__ */ React.createElement(Text, {
    tone: "subdued",
    as: "span"
  }, label);
  const labelMarkup = label ? /* @__PURE__ */ React.createElement(Box, {
    padding: "300",
    paddingBlockStart: "0",
    paddingBlockEnd: "0"
  }, /* @__PURE__ */ React.createElement("div", {
    "aria-live": "polite"
  }, labelTextMarkup)) : null;
  return /* @__PURE__ */ React.createElement("nav", {
    "aria-label": navLabel,
    ref: node,
    className: styles$v.Pagination
  }, previousButtonEvents, nextButtonEvents, /* @__PURE__ */ React.createElement(ButtonGroup, {
    variant: "segmented"
  }, constructedPrevious, labelMarkup, constructedNext));
}
function clickPaginationLink(id, node) {
  return () => {
    if (node.current == null) {
      return;
    }
    const link = node.current.querySelector(`#${id}`);
    if (link) {
      link.click();
    }
  };
}
function handleCallback(fn) {
  return () => {
    if (isInputFocused()) {
      return;
    }
    fn();
  };
}
function noop$3() {
}
function AfterInitialMount({
  children,
  onMount,
  fallback = null
}) {
  const isMounted = useIsAfterInitialMount();
  const content = isMounted ? children : fallback;
  useEffect(() => {
    if (isMounted && onMount) {
      onMount();
    }
  }, [isMounted, onMount]);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, content);
}
function useStickyManager() {
  const stickyManager = useContext(StickyManagerContext);
  if (!stickyManager) {
    throw new MissingAppProviderError("No StickyManager was provided.");
  }
  return stickyManager;
}
class StickyInner extends Component {
  constructor(...args) {
    super(...args);
    this.state = {
      isSticky: false,
      style: {}
    };
    this.placeHolderNode = null;
    this.stickyNode = null;
    this.setPlaceHolderNode = (node) => {
      this.placeHolderNode = node;
    };
    this.setStickyNode = (node) => {
      this.stickyNode = node;
    };
    this.handlePositioning = (stick, top = 0, left = 0, width = 0) => {
      const {
        isSticky
      } = this.state;
      if (stick && !isSticky || !stick && isSticky) {
        this.adjustPlaceHolderNode(stick);
        this.setState({
          isSticky: !isSticky
        }, () => {
          if (this.props.onStickyChange == null) {
            return null;
          }
          this.props.onStickyChange(!isSticky);
          if (this.props.boundingElement == null) {
            return null;
          }
          this.props.boundingElement.toggleAttribute("data-sticky-active");
        });
      }
      const style = stick ? {
        position: "fixed",
        top,
        left,
        width
      } : {};
      this.setState({
        style
      });
    };
    this.adjustPlaceHolderNode = (add) => {
      if (this.placeHolderNode && this.stickyNode) {
        this.placeHolderNode.style.paddingBottom = add ? `${getRectForNode(this.stickyNode).height}px` : "0px";
      }
    };
  }
  componentDidMount() {
    const {
      boundingElement,
      offset = false,
      disableWhenStacked = false,
      stickyManager
    } = this.props;
    if (!this.stickyNode || !this.placeHolderNode) return;
    stickyManager.registerStickyItem({
      stickyNode: this.stickyNode,
      placeHolderNode: this.placeHolderNode,
      handlePositioning: this.handlePositioning,
      offset,
      boundingElement,
      disableWhenStacked
    });
  }
  componentWillUnmount() {
    const {
      stickyManager
    } = this.props;
    if (!this.stickyNode) return;
    stickyManager.unregisterStickyItem(this.stickyNode);
  }
  render() {
    const {
      style,
      isSticky
    } = this.state;
    const {
      children
    } = this.props;
    const childrenContent = isFunction(children) ? children(isSticky) : children;
    return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", {
      ref: this.setPlaceHolderNode
    }), /* @__PURE__ */ React.createElement("div", {
      ref: this.setStickyNode,
      style
    }, childrenContent));
  }
}
function isFunction(arg) {
  return typeof arg === "function";
}
function Sticky(props) {
  const stickyManager = useStickyManager();
  return /* @__PURE__ */ React.createElement(StickyInner, Object.assign({}, props, {
    stickyManager
  }));
}
function Navigation$2({
  columnVisibilityData,
  isScrolledFarthestLeft,
  isScrolledFarthestRight,
  navigateTableLeft,
  navigateTableRight,
  fixedFirstColumns,
  setRef = () => {
  }
}) {
  const i18n = useI18n();
  const pipMarkup = columnVisibilityData.map((column, index) => {
    if (index < fixedFirstColumns) return;
    const className = classNames(styles$w.Pip, column.isVisible && styles$w["Pip-visible"]);
    return /* @__PURE__ */ React.createElement("div", {
      className,
      key: `pip-${index}`
    });
  });
  const leftA11yLabel = i18n.translate("Polaris.DataTable.navAccessibilityLabel", {
    direction: "left"
  });
  const rightA11yLabel = i18n.translate("Polaris.DataTable.navAccessibilityLabel", {
    direction: "right"
  });
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$w.Navigation,
    ref: setRef
  }, /* @__PURE__ */ React.createElement(Button, {
    variant: "tertiary",
    icon: ChevronLeftIcon,
    disabled: isScrolledFarthestLeft,
    accessibilityLabel: leftA11yLabel,
    onClick: navigateTableLeft
  }), pipMarkup, /* @__PURE__ */ React.createElement(Button, {
    variant: "tertiary",
    icon: ChevronRightIcon,
    disabled: isScrolledFarthestRight,
    accessibilityLabel: rightA11yLabel,
    onClick: navigateTableRight
  }));
}
const getRowClientHeights = (rows) => {
  const heights = [];
  if (!rows) {
    return heights;
  }
  rows.forEach((row) => {
    heights.push(row.clientHeight);
  });
  return heights;
};
class DataTableInner extends PureComponent {
  constructor(...args) {
    super(...args);
    this.state = {
      condensed: false,
      columnVisibilityData: [],
      isScrolledFarthestLeft: true,
      isScrolledFarthestRight: false,
      rowHovered: void 0
    };
    this.dataTable = /* @__PURE__ */ createRef();
    this.scrollContainer = /* @__PURE__ */ createRef();
    this.table = /* @__PURE__ */ createRef();
    this.stickyTable = /* @__PURE__ */ createRef();
    this.stickyNav = null;
    this.headerNav = null;
    this.tableHeadings = [];
    this.stickyHeadings = [];
    this.tableHeadingWidths = [];
    this.stickyHeaderActive = false;
    this.scrollStopTimer = null;
    this.handleResize = debounce(() => {
      const {
        table: {
          current: table
        },
        scrollContainer: {
          current: scrollContainer
        }
      } = this;
      let condensed = false;
      if (table && scrollContainer) {
        condensed = table.scrollWidth > scrollContainer.clientWidth + 1;
      }
      this.setState({
        condensed,
        ...this.calculateColumnVisibilityData(condensed)
      });
    });
    this.setCellRef = ({
      ref,
      index,
      inStickyHeader
    }) => {
      if (ref == null) {
        return;
      }
      if (inStickyHeader) {
        this.stickyHeadings[index] = ref;
        const button = ref.querySelector("button");
        if (button == null) {
          return;
        }
        button.addEventListener("focus", this.handleHeaderButtonFocus);
      } else {
        this.tableHeadings[index] = ref;
        this.tableHeadingWidths[index] = ref.clientWidth;
      }
    };
    this.changeHeadingFocus = () => {
      const {
        tableHeadings,
        stickyHeadings,
        stickyNav,
        headerNav
      } = this;
      const stickyFocusedItemIndex = stickyHeadings.findIndex((item) => {
        var _a2;
        return item === ((_a2 = document.activeElement) == null ? void 0 : _a2.parentElement);
      });
      const tableFocusedItemIndex = tableHeadings.findIndex((item) => {
        var _a2;
        return item === ((_a2 = document.activeElement) == null ? void 0 : _a2.parentElement);
      });
      const arrowsInStickyNav = stickyNav == null ? void 0 : stickyNav.querySelectorAll("button");
      const arrowsInHeaderNav = headerNav == null ? void 0 : headerNav.querySelectorAll("button");
      let stickyFocusedNavIndex = -1;
      arrowsInStickyNav == null ? void 0 : arrowsInStickyNav.forEach((item, index) => {
        if (item === document.activeElement) {
          stickyFocusedNavIndex = index;
        }
      });
      let headerFocusedNavIndex = -1;
      arrowsInHeaderNav == null ? void 0 : arrowsInHeaderNav.forEach((item, index) => {
        if (item === document.activeElement) {
          headerFocusedNavIndex = index;
        }
      });
      if (stickyFocusedItemIndex < 0 && tableFocusedItemIndex < 0 && stickyFocusedNavIndex < 0 && headerFocusedNavIndex < 0) {
        return null;
      }
      let button;
      if (stickyFocusedItemIndex >= 0) {
        button = tableHeadings[stickyFocusedItemIndex].querySelector("button");
      } else if (tableFocusedItemIndex >= 0) {
        button = stickyHeadings[tableFocusedItemIndex].querySelector("button");
      }
      if (stickyFocusedNavIndex >= 0) {
        button = arrowsInHeaderNav == null ? void 0 : arrowsInHeaderNav[stickyFocusedNavIndex];
      } else if (headerFocusedNavIndex >= 0) {
        button = arrowsInStickyNav == null ? void 0 : arrowsInStickyNav[headerFocusedNavIndex];
      }
      if (button == null) {
        return null;
      }
      button.style.visibility = "visible";
      button.focus();
      button.style.removeProperty("visibility");
    };
    this.calculateColumnVisibilityData = (condensed) => {
      const fixedFirstColumns = this.fixedFirstColumns();
      const {
        table: {
          current: table
        },
        scrollContainer: {
          current: scrollContainer
        },
        dataTable: {
          current: dataTable
        }
      } = this;
      const {
        stickyHeader
      } = this.props;
      if ((stickyHeader || condensed) && table && scrollContainer && dataTable) {
        const headerCells = table.querySelectorAll(headerCell.selector);
        const rightMostHeader = headerCells[fixedFirstColumns - 1];
        const nthColumnWidth = fixedFirstColumns ? rightMostHeader.offsetLeft + rightMostHeader.offsetWidth : 0;
        if (headerCells.length > 0) {
          const firstVisibleColumnIndex = headerCells.length - 1;
          const tableLeftVisibleEdge = scrollContainer.scrollLeft + nthColumnWidth;
          const tableRightVisibleEdge = scrollContainer.scrollLeft + dataTable.offsetWidth;
          const tableData = {
            firstVisibleColumnIndex,
            tableLeftVisibleEdge,
            tableRightVisibleEdge
          };
          const columnVisibilityData = [...headerCells].map(measureColumn(tableData));
          const lastColumn = columnVisibilityData[columnVisibilityData.length - 1];
          const isScrolledFarthestLeft = fixedFirstColumns ? tableLeftVisibleEdge === nthColumnWidth : tableLeftVisibleEdge === 0;
          return {
            columnVisibilityData,
            ...getPrevAndCurrentColumns(tableData, columnVisibilityData),
            isScrolledFarthestLeft,
            isScrolledFarthestRight: lastColumn.rightEdge <= tableRightVisibleEdge
          };
        }
      }
      return {
        columnVisibilityData: [],
        previousColumn: void 0,
        currentColumn: void 0
      };
    };
    this.handleHeaderButtonFocus = (event) => {
      var _a2;
      const fixedFirstColumns = this.fixedFirstColumns();
      if (this.scrollContainer.current == null || event.target == null || this.state.columnVisibilityData.length === 0) {
        return;
      }
      const target = event.target;
      const currentCell = target.parentNode;
      const tableScrollLeft = this.scrollContainer.current.scrollLeft;
      const tableViewableWidth = this.scrollContainer.current.offsetWidth;
      const tableRightEdge = tableScrollLeft + tableViewableWidth;
      const nthColumnWidth = this.state.columnVisibilityData.length > 0 ? (_a2 = this.state.columnVisibilityData[fixedFirstColumns]) == null ? void 0 : _a2.rightEdge : 0;
      const currentColumnLeftEdge = currentCell.offsetLeft;
      const currentColumnRightEdge = currentCell.offsetLeft + currentCell.offsetWidth;
      if (tableScrollLeft > currentColumnLeftEdge - nthColumnWidth) {
        this.scrollContainer.current.scrollLeft = currentColumnLeftEdge - nthColumnWidth;
      }
      if (currentColumnRightEdge > tableRightEdge) {
        this.scrollContainer.current.scrollLeft = currentColumnRightEdge - tableViewableWidth;
      }
    };
    this.stickyHeaderScrolling = () => {
      const {
        current: stickyTable
      } = this.stickyTable;
      const {
        current: scrollContainer
      } = this.scrollContainer;
      if (stickyTable == null || scrollContainer == null) {
        return;
      }
      stickyTable.scrollLeft = scrollContainer.scrollLeft;
    };
    this.scrollListener = () => {
      var _a2;
      if (this.scrollStopTimer) {
        clearTimeout(this.scrollStopTimer);
      }
      this.scrollStopTimer = setTimeout(() => {
        this.setState((prevState) => ({
          ...this.calculateColumnVisibilityData(prevState.condensed)
        }));
      }, 100);
      this.setState({
        isScrolledFarthestLeft: ((_a2 = this.scrollContainer.current) == null ? void 0 : _a2.scrollLeft) === 0
      });
      if (this.props.stickyHeader && this.stickyHeaderActive) {
        this.stickyHeaderScrolling();
      }
    };
    this.handleHover = (row) => () => {
      this.setState({
        rowHovered: row
      });
    };
    this.handleFocus = (event) => {
      var _a2;
      const fixedFirstColumns = this.fixedFirstColumns();
      if (this.scrollContainer.current == null || event.target == null) {
        return;
      }
      const currentCell = event.target.parentNode;
      const fixedNthColumn = this.props;
      const nthColumnWidth = fixedNthColumn ? (_a2 = this.state.columnVisibilityData[fixedFirstColumns]) == null ? void 0 : _a2.rightEdge : 0;
      const currentColumnLeftEdge = currentCell.offsetLeft;
      const desiredScrollLeft = currentColumnLeftEdge - nthColumnWidth;
      if (this.scrollContainer.current.scrollLeft > desiredScrollLeft) {
        this.scrollContainer.current.scrollLeft = desiredScrollLeft;
      }
    };
    this.navigateTable = (direction) => {
      var _a2;
      const fixedFirstColumns = this.fixedFirstColumns();
      const {
        currentColumn,
        previousColumn
      } = this.state;
      const nthColumnWidth = (_a2 = this.state.columnVisibilityData[fixedFirstColumns - 1]) == null ? void 0 : _a2.rightEdge;
      if (!currentColumn || !previousColumn) {
        return;
      }
      let prevWidths = 0;
      for (let index = 0; index < currentColumn.index; index++) {
        prevWidths += this.state.columnVisibilityData[index].width;
      }
      const {
        current: scrollContainer
      } = this.scrollContainer;
      const handleScroll = () => {
        let newScrollLeft = 0;
        if (fixedFirstColumns) {
          newScrollLeft = direction === "right" ? prevWidths - nthColumnWidth + currentColumn.width : prevWidths - previousColumn.width - nthColumnWidth;
        } else {
          newScrollLeft = direction === "right" ? currentColumn.rightEdge : previousColumn.leftEdge;
        }
        if (scrollContainer) {
          scrollContainer.scrollLeft = newScrollLeft;
          requestAnimationFrame(() => {
            this.setState((prevState) => ({
              ...this.calculateColumnVisibilityData(prevState.condensed)
            }));
          });
        }
      };
      return handleScroll;
    };
    this.renderHeading = ({
      heading,
      headingIndex,
      inFixedNthColumn,
      inStickyHeader
    }) => {
      var _a2;
      const {
        sortable,
        truncate = false,
        columnContentTypes,
        defaultSortDirection,
        initialSortColumnIndex = 0,
        verticalAlign,
        firstColumnMinWidth
      } = this.props;
      const fixedFirstColumns = this.fixedFirstColumns();
      const {
        sortDirection = defaultSortDirection,
        sortedColumnIndex = initialSortColumnIndex,
        isScrolledFarthestLeft
      } = this.state;
      let sortableHeadingProps;
      const headingCellId = `heading-cell-${headingIndex}`;
      const stickyHeaderId = `stickyheader-${headingIndex}`;
      const id = inStickyHeader ? stickyHeaderId : headingCellId;
      if (sortable) {
        const isSortable = sortable[headingIndex];
        const isSorted = isSortable && sortedColumnIndex === headingIndex;
        const direction = isSorted ? sortDirection : "none";
        sortableHeadingProps = {
          defaultSortDirection,
          sorted: isSorted,
          sortable: isSortable,
          sortDirection: direction,
          onSort: this.defaultOnSort(headingIndex),
          fixedNthColumn: fixedFirstColumns,
          inFixedNthColumn: fixedFirstColumns
        };
      }
      const stickyCellWidth = inStickyHeader ? this.tableHeadingWidths[headingIndex] : void 0;
      const fixedCellVisible = !isScrolledFarthestLeft;
      const cellProps = {
        header: true,
        stickyHeadingCell: inStickyHeader,
        content: heading,
        contentType: columnContentTypes[headingIndex],
        nthColumn: headingIndex < fixedFirstColumns,
        fixedFirstColumns,
        truncate,
        headingIndex,
        ...sortableHeadingProps,
        verticalAlign,
        handleFocus: this.handleFocus,
        stickyCellWidth,
        fixedCellVisible,
        firstColumnMinWidth
      };
      if (inFixedNthColumn && inStickyHeader) {
        return [/* @__PURE__ */ React.createElement(Cell, Object.assign({
          key: id
        }, cellProps, {
          setRef: (ref) => {
            this.setCellRef({
              ref,
              index: headingIndex,
              inStickyHeader
            });
          },
          inFixedNthColumn: false
        })), /* @__PURE__ */ React.createElement(Cell, Object.assign({
          key: `${id}-sticky`
        }, cellProps, {
          setRef: (ref) => {
            this.setCellRef({
              ref,
              index: headingIndex,
              inStickyHeader
            });
          },
          inFixedNthColumn: Boolean(fixedFirstColumns),
          lastFixedFirstColumn: headingIndex === fixedFirstColumns - 1,
          style: {
            left: (_a2 = this.state.columnVisibilityData[headingIndex]) == null ? void 0 : _a2.leftEdge
          }
        }))];
      }
      return /* @__PURE__ */ React.createElement(Cell, Object.assign({
        key: id
      }, cellProps, {
        setRef: (ref) => {
          this.setCellRef({
            ref,
            index: headingIndex,
            inStickyHeader
          });
        },
        lastFixedFirstColumn: headingIndex === fixedFirstColumns - 1,
        inFixedNthColumn
      }));
    };
    this.totalsRowHeading = () => {
      const {
        i18n,
        totals,
        totalsName
      } = this.props;
      const totalsLabel = totalsName ? totalsName : {
        singular: i18n.translate("Polaris.DataTable.totalRowHeading"),
        plural: i18n.translate("Polaris.DataTable.totalsRowHeading")
      };
      return totals && totals.filter((total) => total !== "").length > 1 ? totalsLabel.plural : totalsLabel.singular;
    };
    this.renderTotals = ({
      total,
      index
    }) => {
      const fixedFirstColumns = this.fixedFirstColumns();
      const id = `totals-cell-${index}`;
      const {
        truncate = false,
        verticalAlign,
        columnContentTypes
      } = this.props;
      let content;
      let contentType;
      if (index === 0) {
        content = this.totalsRowHeading();
      }
      if (total !== "" && index > 0) {
        contentType = columnContentTypes[index];
        content = total;
      }
      const totalInFooter = this.props.showTotalsInFooter;
      return /* @__PURE__ */ React.createElement(Cell, {
        total: true,
        totalInFooter,
        nthColumn: index <= fixedFirstColumns - 1,
        firstColumn: index === 0,
        key: id,
        content,
        contentType,
        truncate,
        verticalAlign
      });
    };
    this.getColSpan = (rowLength, headingsLength, contentTypesLength, cellIndex) => {
      const fixedFirstColumns = this.fixedFirstColumns();
      if (fixedFirstColumns) {
        return 1;
      }
      const rowLen = rowLength ? rowLength : 1;
      const colLen = headingsLength ? headingsLength : contentTypesLength;
      const colSpan = Math.floor(colLen / rowLen);
      const remainder = colLen % rowLen;
      return cellIndex === 0 ? colSpan + remainder : colSpan;
    };
    this.defaultRenderRow = ({
      row,
      index,
      inFixedNthColumn,
      rowHeights
    }) => {
      const {
        columnContentTypes,
        truncate = false,
        verticalAlign,
        hoverable = true,
        headings
      } = this.props;
      const {
        condensed
      } = this.state;
      const fixedFirstColumns = this.fixedFirstColumns();
      const className = classNames(styles$w.TableRow, hoverable && styles$w.hoverable);
      return /* @__PURE__ */ React.createElement("tr", {
        key: `row-${index}`,
        className,
        onMouseEnter: this.handleHover(index),
        onMouseLeave: this.handleHover()
      }, row.map((content, cellIndex) => {
        const hovered = index === this.state.rowHovered;
        const id = `cell-${cellIndex}-row-${index}`;
        const colSpan = this.getColSpan(row.length, headings.length, columnContentTypes.length, cellIndex);
        return /* @__PURE__ */ React.createElement(Cell, {
          key: id,
          content,
          contentType: columnContentTypes[cellIndex],
          nthColumn: cellIndex <= fixedFirstColumns - 1,
          firstColumn: cellIndex === 0,
          truncate,
          verticalAlign,
          colSpan,
          hovered,
          style: rowHeights ? {
            height: `${rowHeights[index]}px`
          } : {},
          inFixedNthColumn: condensed && inFixedNthColumn
        });
      }));
    };
    this.defaultOnSort = (headingIndex) => {
      const {
        onSort,
        defaultSortDirection = "ascending",
        initialSortColumnIndex
      } = this.props;
      const {
        sortDirection = defaultSortDirection,
        sortedColumnIndex = initialSortColumnIndex
      } = this.state;
      let newSortDirection = defaultSortDirection;
      if (sortedColumnIndex === headingIndex) {
        newSortDirection = sortDirection === "ascending" ? "descending" : "ascending";
      }
      const handleSort = () => {
        this.setState({
          sortDirection: newSortDirection,
          sortedColumnIndex: headingIndex
        }, () => {
          if (onSort) {
            onSort(headingIndex, newSortDirection);
          }
        });
      };
      return handleSort;
    };
  }
  componentDidMount() {
    if (process.env.NODE_ENV === "development") {
      setTimeout(() => {
        this.handleResize();
      }, 10);
    } else {
      this.handleResize();
    }
  }
  componentDidUpdate(prevProps) {
    if (isEqual(prevProps, this.props)) {
      return;
    }
    this.handleResize();
  }
  componentWillUnmount() {
    this.handleResize.cancel();
  }
  render() {
    var _a2, _b, _c;
    const {
      headings,
      totals,
      showTotalsInFooter,
      rows,
      footerContent,
      hideScrollIndicator = false,
      increasedTableDensity = false,
      hasZebraStripingOnData = false,
      stickyHeader = false,
      hasFixedFirstColumn: fixedFirstColumn = false,
      pagination
    } = this.props;
    const {
      condensed,
      columnVisibilityData,
      isScrolledFarthestLeft,
      isScrolledFarthestRight
    } = this.state;
    if (fixedFirstColumn && process.env.NODE_ENV === "development") {
      console.warn("Deprecation: The `hasFixedFirstColumn` prop on the `DataTable` has been deprecated. Use fixedFirstColumns={n} instead.");
    }
    const fixedFirstColumns = this.fixedFirstColumns();
    const rowCountIsEven = rows.length % 2 === 0;
    const className = classNames(styles$w.DataTable, condensed && styles$w.condensed, totals && styles$w.ShowTotals, showTotalsInFooter && styles$w.ShowTotalsInFooter, hasZebraStripingOnData && styles$w.ZebraStripingOnData, hasZebraStripingOnData && rowCountIsEven && styles$w.RowCountIsEven);
    const wrapperClassName = classNames(styles$w.TableWrapper, condensed && styles$w.condensed, increasedTableDensity && styles$w.IncreasedTableDensity, stickyHeader && styles$w.StickyHeaderEnabled);
    const headingMarkup = /* @__PURE__ */ React.createElement("tr", null, headings.map((heading, index) => this.renderHeading({
      heading,
      headingIndex: index,
      inFixedNthColumn: false,
      inStickyHeader: false
    })));
    const totalsMarkup = totals ? /* @__PURE__ */ React.createElement("tr", null, totals.map((total, index) => this.renderTotals({
      total,
      index
    }))) : null;
    const nthColumns = rows.map((row) => row.slice(0, fixedFirstColumns));
    const nthHeadings = headings.slice(0, fixedFirstColumns);
    const nthTotals = totals == null ? void 0 : totals.slice(0, fixedFirstColumns);
    const tableHeaderRows = (_a2 = this.table.current) == null ? void 0 : _a2.children[0].childNodes;
    const tableBodyRows = (_b = this.table.current) == null ? void 0 : _b.children[1].childNodes;
    const headerRowHeights = getRowClientHeights(tableHeaderRows);
    const bodyRowHeights = getRowClientHeights(tableBodyRows);
    const fixedNthColumnMarkup = condensed && fixedFirstColumns !== 0 && /* @__PURE__ */ React.createElement("table", {
      className: classNames(styles$w.FixedFirstColumn, !isScrolledFarthestLeft && styles$w.separate),
      style: {
        width: `${(_c = columnVisibilityData[fixedFirstColumns - 1]) == null ? void 0 : _c.rightEdge}px`
      }
    }, /* @__PURE__ */ React.createElement("thead", null, /* @__PURE__ */ React.createElement("tr", {
      style: {
        height: `${headerRowHeights[0]}px`
      }
    }, nthHeadings.map((heading, index) => this.renderHeading({
      heading,
      headingIndex: index,
      inFixedNthColumn: true,
      inStickyHeader: false
    }))), totals && !showTotalsInFooter && /* @__PURE__ */ React.createElement("tr", {
      style: {
        height: `${headerRowHeights[1]}px`
      }
    }, nthTotals == null ? void 0 : nthTotals.map((total, index) => this.renderTotals({
      total,
      index
    })))), /* @__PURE__ */ React.createElement("tbody", null, nthColumns.map((row, index) => this.defaultRenderRow({
      row,
      index,
      inFixedNthColumn: true,
      rowHeights: bodyRowHeights
    }))), totals && showTotalsInFooter && /* @__PURE__ */ React.createElement("tfoot", null, /* @__PURE__ */ React.createElement("tr", null, nthTotals == null ? void 0 : nthTotals.map((total, index) => this.renderTotals({
      total,
      index
    })))));
    const bodyMarkup = rows.map((row, index) => this.defaultRenderRow({
      row,
      index,
      inFixedNthColumn: false
    }));
    const footerMarkup = footerContent ? /* @__PURE__ */ React.createElement("div", {
      className: styles$w.Footer
    }, footerContent) : null;
    const paginationMarkup = pagination ? /* @__PURE__ */ React.createElement(Pagination, Object.assign({
      type: "table"
    }, pagination)) : null;
    const headerTotalsMarkup = !showTotalsInFooter ? totalsMarkup : null;
    const footerTotalsMarkup = showTotalsInFooter ? /* @__PURE__ */ React.createElement("tfoot", null, totalsMarkup) : null;
    const navigationMarkup = (location) => hideScrollIndicator ? null : /* @__PURE__ */ React.createElement(Navigation$2, {
      columnVisibilityData,
      isScrolledFarthestLeft,
      isScrolledFarthestRight,
      navigateTableLeft: this.navigateTable("left"),
      navigateTableRight: this.navigateTable("right"),
      fixedFirstColumns,
      setRef: (ref) => {
        if (location === "header") {
          this.headerNav = ref;
        } else if (location === "sticky") {
          this.stickyNav = ref;
        }
      }
    });
    const stickyHeaderMarkup = stickyHeader ? /* @__PURE__ */ React.createElement(AfterInitialMount, null, /* @__PURE__ */ React.createElement("div", {
      className: styles$w.StickyHeaderWrapper,
      role: "presentation"
    }, /* @__PURE__ */ React.createElement(Sticky, {
      boundingElement: this.dataTable.current,
      onStickyChange: (isSticky) => {
        this.changeHeadingFocus();
        this.stickyHeaderActive = isSticky;
      }
    }, (isSticky) => {
      const stickyHeaderInnerClassNames = classNames(styles$w.StickyHeaderInner, isSticky && styles$w["StickyHeaderInner-isSticky"]);
      const stickyHeaderTableClassNames = classNames(styles$w.StickyHeaderTable, !isScrolledFarthestLeft && styles$w.separate);
      return /* @__PURE__ */ React.createElement("div", {
        className: stickyHeaderInnerClassNames
      }, /* @__PURE__ */ React.createElement("div", null, navigationMarkup("sticky")), /* @__PURE__ */ React.createElement("table", {
        className: stickyHeaderTableClassNames,
        ref: this.stickyTable
      }, /* @__PURE__ */ React.createElement("thead", null, /* @__PURE__ */ React.createElement("tr", {
        className: styles$w.StickyTableHeadingsRow
      }, headings.map((heading, index) => {
        return this.renderHeading({
          heading,
          headingIndex: index,
          inFixedNthColumn: Boolean(index <= fixedFirstColumns - 1 && fixedFirstColumns),
          inStickyHeader: true
        });
      })))));
    }))) : null;
    return /* @__PURE__ */ React.createElement("div", {
      className: wrapperClassName,
      ref: this.dataTable
    }, stickyHeaderMarkup, navigationMarkup("header"), /* @__PURE__ */ React.createElement("div", {
      className
    }, /* @__PURE__ */ React.createElement("div", {
      className: styles$w.ScrollContainer,
      ref: this.scrollContainer
    }, /* @__PURE__ */ React.createElement(EventListener, {
      event: "resize",
      handler: this.handleResize
    }), /* @__PURE__ */ React.createElement(EventListener, {
      capture: true,
      passive: true,
      event: "scroll",
      handler: this.scrollListener
    }), fixedNthColumnMarkup, /* @__PURE__ */ React.createElement("table", {
      className: styles$w.Table,
      ref: this.table
    }, /* @__PURE__ */ React.createElement("thead", null, headingMarkup, headerTotalsMarkup), /* @__PURE__ */ React.createElement("tbody", null, bodyMarkup), footerTotalsMarkup)), paginationMarkup, footerMarkup));
  }
  fixedFirstColumns() {
    const {
      hasFixedFirstColumn,
      fixedFirstColumns = 0,
      headings
    } = this.props;
    const numberOfFixedFirstColumns = hasFixedFirstColumn && !fixedFirstColumns ? 1 : fixedFirstColumns;
    if (numberOfFixedFirstColumns >= headings.length) {
      return 0;
    }
    return numberOfFixedFirstColumns;
  }
  // eslint-disable-next-line @shopify/react-no-multiple-render-methods
  // eslint-disable-next-line @shopify/react-no-multiple-render-methods
}
function DataTable(props) {
  const i18n = useI18n();
  return /* @__PURE__ */ React.createElement(DataTableInner, Object.assign({}, props, {
    i18n
  }));
}
var styles$u = {
  "ImageContainer": "Polaris-EmptyState__ImageContainer",
  "Image": "Polaris-EmptyState__Image",
  "loaded": "Polaris-EmptyState--loaded",
  "imageContained": "Polaris-EmptyState--imageContained",
  "SkeletonImageContainer": "Polaris-EmptyState__SkeletonImageContainer",
  "SkeletonImage": "Polaris-EmptyState__SkeletonImage"
};
function EmptyState({
  children,
  heading,
  image,
  largeImage,
  imageContained,
  fullWidth = false,
  action: action2,
  secondaryAction,
  footerContent
}) {
  const [imageLoaded, setImageLoaded] = useState(false);
  const handleLoad = useCallback(() => {
    setImageLoaded(true);
  }, []);
  const imageClassNames = classNames(styles$u.Image, imageLoaded && styles$u.loaded, imageContained && styles$u.imageContained);
  const loadedImageMarkup = largeImage ? /* @__PURE__ */ React.createElement(Image, {
    alt: "",
    role: "presentation",
    source: largeImage,
    className: imageClassNames,
    sourceSet: [{
      source: image,
      descriptor: "568w"
    }, {
      source: largeImage,
      descriptor: "1136w"
    }],
    sizes: "(max-width: 568px) 60vw",
    onLoad: handleLoad
  }) : /* @__PURE__ */ React.createElement(Image, {
    alt: "",
    role: "presentation",
    className: imageClassNames,
    source: image,
    onLoad: handleLoad
  });
  const skeletonImageClassNames = classNames(styles$u.SkeletonImage, imageLoaded && styles$u.loaded);
  const imageContainerClassNames = classNames(styles$u.ImageContainer, !imageLoaded && styles$u.SkeletonImageContainer);
  const imageMarkup = /* @__PURE__ */ React.createElement("div", {
    className: imageContainerClassNames
  }, loadedImageMarkup, /* @__PURE__ */ React.createElement("div", {
    className: skeletonImageClassNames
  }));
  const secondaryActionMarkup = secondaryAction ? buttonFrom(secondaryAction, {}) : null;
  const footerContentMarkup = footerContent ? /* @__PURE__ */ React.createElement(Box, {
    paddingBlockStart: "400"
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    alignment: "center",
    variant: "bodySm"
  }, footerContent)) : null;
  const primaryActionMarkup = action2 ? buttonFrom(action2, {
    variant: "primary",
    size: "medium"
  }) : null;
  const headingMarkup = heading ? /* @__PURE__ */ React.createElement(Box, {
    paddingBlockEnd: "150"
  }, /* @__PURE__ */ React.createElement(Text, {
    variant: "headingMd",
    as: "p",
    alignment: "center"
  }, heading)) : null;
  const childrenMarkup = children ? /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    alignment: "center",
    variant: "bodySm"
  }, children) : null;
  const textContentMarkup = headingMarkup || children ? /* @__PURE__ */ React.createElement(Box, {
    paddingBlockEnd: "400"
  }, headingMarkup, childrenMarkup) : null;
  const actionsMarkup = primaryActionMarkup || secondaryActionMarkup ? /* @__PURE__ */ React.createElement(InlineStack, {
    align: "center",
    gap: "200"
  }, secondaryActionMarkup, primaryActionMarkup) : null;
  const detailsMarkup = textContentMarkup || actionsMarkup || footerContentMarkup ? /* @__PURE__ */ React.createElement(Box, {
    maxWidth: fullWidth ? "100%" : "400px"
  }, /* @__PURE__ */ React.createElement(BlockStack, {
    inlineAlign: "center"
  }, textContentMarkup, actionsMarkup, footerContentMarkup)) : null;
  return /* @__PURE__ */ React.createElement(Box, {
    paddingInlineStart: "0",
    paddingInlineEnd: "0",
    paddingBlockStart: "500",
    paddingBlockEnd: "1600"
  }, /* @__PURE__ */ React.createElement(BlockStack, {
    inlineAlign: "center"
  }, imageMarkup, detailsMarkup));
}
const Focus = /* @__PURE__ */ memo(function Focus2({
  children,
  disabled,
  root
}) {
  useEffect(() => {
    if (disabled || !root) {
      return;
    }
    const node = isRef$1(root) ? root.current : root;
    if (!node || node.querySelector("[autofocus]")) {
      return;
    }
    focusFirstFocusableNode(node, false);
  }, [disabled, root]);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
});
function isRef$1(ref) {
  return ref.current !== void 0;
}
function Form({
  acceptCharset,
  action: action2,
  autoComplete,
  children,
  encType,
  implicitSubmit = true,
  method = "post",
  name,
  noValidate,
  preventDefault: preventDefault2 = true,
  target,
  onSubmit
}) {
  const i18n = useI18n();
  const handleSubmit = useCallback((event) => {
    if (!preventDefault2) {
      return;
    }
    event.preventDefault();
    onSubmit(event);
  }, [onSubmit, preventDefault2]);
  const autoCompleteInputs = normalizeAutoComplete(autoComplete);
  const submitMarkup = implicitSubmit ? /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, /* @__PURE__ */ React.createElement("button", {
    type: "submit",
    "aria-hidden": "true",
    tabIndex: -1
  }, i18n.translate("Polaris.Common.submit"))) : null;
  return /* @__PURE__ */ React.createElement("form", {
    acceptCharset,
    action: action2,
    autoComplete: autoCompleteInputs,
    encType,
    method,
    name,
    noValidate,
    target,
    onSubmit: handleSubmit
  }, submitMarkup, children);
}
function normalizeAutoComplete(autoComplete) {
  if (autoComplete == null) {
    return autoComplete;
  }
  return autoComplete ? "on" : "off";
}
var styles$t = {
  "Item": "Polaris-FormLayout__Item",
  "grouped": "Polaris-FormLayout--grouped",
  "condensed": "Polaris-FormLayout--condensed"
};
function Item$3({
  children,
  condensed = false
}) {
  const className = classNames(styles$t.Item, condensed ? styles$t.condensed : styles$t.grouped);
  return children ? /* @__PURE__ */ React.createElement("div", {
    className
  }, children) : null;
}
function Group({
  children,
  condensed,
  title,
  helpText
}) {
  const id = useId();
  let helpTextElement = null;
  let helpTextId;
  let titleElement = null;
  let titleId;
  if (helpText) {
    helpTextId = `${id}HelpText`;
    helpTextElement = /* @__PURE__ */ React.createElement(Box, {
      id: helpTextId,
      color: "text-secondary"
    }, helpText);
  }
  if (title) {
    titleId = `${id}Title`;
    titleElement = /* @__PURE__ */ React.createElement(Text, {
      id: titleId,
      as: "p"
    }, title);
  }
  const itemsMarkup = Children.map(children, (child) => wrapWithComponent(child, Item$3, {
    condensed
  }));
  return /* @__PURE__ */ React.createElement(BlockStack, {
    role: "group",
    gap: "200",
    "aria-labelledby": titleId,
    "aria-describedby": helpTextId
  }, titleElement, /* @__PURE__ */ React.createElement(InlineStack, {
    gap: "300"
  }, itemsMarkup), helpTextElement);
}
const FormLayout = /* @__PURE__ */ memo(function FormLayout2({
  children
}) {
  return /* @__PURE__ */ React.createElement(BlockStack, {
    gap: "400"
  }, Children.map(children, wrapChildren));
});
FormLayout.Group = Group;
function wrapChildren(child, index) {
  if (isElementOfType(child, Group)) {
    return child;
  }
  const props = {
    key: index
  };
  return wrapWithComponent(child, Item$3, props);
}
function setRootProperty(name, value, node) {
  if (!document) return;
  const element = document.documentElement;
  element.style.setProperty(name, value);
}
var styles$s = {
  "Frame": "Polaris-Frame",
  "Navigation": "Polaris-Frame__Navigation",
  "hasTopBar": "Polaris-Frame--hasTopBar",
  "Navigation-enter": "Polaris-Frame__Navigation--enter",
  "Navigation-enterActive": "Polaris-Frame__Navigation--enterActive",
  "Navigation-exit": "Polaris-Frame__Navigation--exit",
  "Navigation-exitActive": "Polaris-Frame__Navigation--exitActive",
  "NavigationDismiss": "Polaris-Frame__NavigationDismiss",
  "Navigation-visible": "Polaris-Frame__Navigation--visible",
  "TopBar": "Polaris-Frame__TopBar",
  "ContextualSaveBar": "Polaris-Frame__ContextualSaveBar",
  "Main": "Polaris-Frame__Main",
  "hasNav": "Polaris-Frame--hasNav",
  "Content": "Polaris-Frame__Content",
  "hasSidebar": "Polaris-Frame--hasSidebar",
  "GlobalRibbonContainer": "Polaris-Frame__GlobalRibbonContainer",
  "LoadingBar": "Polaris-Frame__LoadingBar",
  "Skip": "Polaris-Frame__Skip",
  "focused": "Polaris-Frame--focused"
};
function useMediaQuery() {
  const mediaQuery = useContext(MediaQueryContext);
  if (!mediaQuery) {
    throw new Error("No mediaQuery was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
  }
  return mediaQuery;
}
function useIsMountedRef() {
  const isMounted = useRef(false);
  useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
}
var styles$r = {
  "Loading": "Polaris-Frame-Loading",
  "Level": "Polaris-Frame-Loading__Level"
};
const STUCK_THRESHOLD = 99;
function Loading() {
  const i18n = useI18n();
  const isMountedRef = useIsMountedRef();
  const [progress, setProgress] = useState(0);
  const [animating, setAnimating] = useState(false);
  useEffect(() => {
    if (progress >= STUCK_THRESHOLD || animating) {
      return;
    }
    requestAnimationFrame(() => {
      if (!isMountedRef.current) return;
      const step = Math.max((STUCK_THRESHOLD - progress) / 10, 1);
      setAnimating(true);
      setProgress(progress + step);
    });
  }, [progress, animating, isMountedRef]);
  const customStyles = {
    transform: `scaleX(${Math.floor(progress) / 100})`
  };
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$r.Loading,
    "aria-valuenow": progress,
    "aria-valuemin": 0,
    "aria-valuemax": 100,
    role: "progressbar",
    "aria-label": i18n.translate("Polaris.Loading.label")
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$r.Level,
    style: customStyles,
    onTransitionEnd: () => setAnimating(false)
  }));
}
var styles$q = {
  "startFade": "Polaris-Frame-CSSAnimation--startFade",
  "endFade": "Polaris-Frame-CSSAnimation--endFade"
};
var TransitionStatus;
(function(TransitionStatus2) {
  TransitionStatus2["Entering"] = "entering";
  TransitionStatus2["Entered"] = "entered";
  TransitionStatus2["Exiting"] = "exiting";
  TransitionStatus2["Exited"] = "exited";
})(TransitionStatus || (TransitionStatus = {}));
function CSSAnimation({
  in: inProp,
  className,
  type,
  children
}) {
  const [transitionStatus, setTransitionStatus] = useState(inProp ? TransitionStatus.Entering : TransitionStatus.Exited);
  const isMounted = useRef(false);
  const node = useRef(null);
  useEffect(() => {
    if (!isMounted.current) return;
    transitionStatus === TransitionStatus.Entering && changeTransitionStatus(TransitionStatus.Entered);
  }, [transitionStatus]);
  useEffect(() => {
    if (!isMounted.current) return;
    inProp && changeTransitionStatus(TransitionStatus.Entering);
    !inProp && changeTransitionStatus(TransitionStatus.Exiting);
  }, [inProp]);
  useEffect(() => {
    isMounted.current = true;
  }, []);
  const wrapperClassName = classNames(className, styles$q[variationName("start", type)], inProp && styles$q[variationName("end", type)]);
  const content = transitionStatus === TransitionStatus.Exited && !inProp ? null : children;
  return /* @__PURE__ */ React.createElement("div", {
    className: wrapperClassName,
    ref: node,
    onTransitionEnd: handleTransitionEnd
  }, content);
  function handleTransitionEnd() {
    transitionStatus === TransitionStatus.Exiting && changeTransitionStatus(TransitionStatus.Exited);
  }
  function changeTransitionStatus(transitionStatus2) {
    setTransitionStatus(transitionStatus2);
    if (transitionStatus2 === TransitionStatus.Entering) node.current && node.current.getBoundingClientRect();
  }
}
function pluckDeep(obj, key) {
  if (!obj) {
    return null;
  }
  const keys = Object.keys(obj);
  for (const currKey of keys) {
    if (currKey === key) {
      return obj[key];
    }
    if (isObject(obj[currKey])) {
      const plucked = pluckDeep(obj[currKey], key);
      if (plucked) {
        return plucked;
      }
    }
  }
  return null;
}
function getWidth(value = {}, defaultWidth = 0, key = "width") {
  const width = typeof value === "number" ? value : pluckDeep(value, key);
  return width ? `${width}px` : `${defaultWidth}px`;
}
var styles$p = {
  "ContextualSaveBar": "Polaris-Frame-ContextualSaveBar",
  "LogoContainer": "Polaris-Frame-ContextualSaveBar__LogoContainer",
  "ContextControl": "Polaris-Frame-ContextualSaveBar__ContextControl",
  "Contents": "Polaris-Frame-ContextualSaveBar__Contents",
  "fullWidth": "Polaris-Frame-ContextualSaveBar--fullWidth",
  "MessageContainer": "Polaris-Frame-ContextualSaveBar__MessageContainer",
  "ActionContainer": "Polaris-Frame-ContextualSaveBar__ActionContainer"
};
var styles$o = {
  "Body": "Polaris-Modal__Body",
  "NoScrollBody": "Polaris-Modal__NoScrollBody",
  "IFrame": "Polaris-Modal__IFrame"
};
var styles$n = {
  "Section": "Polaris-Modal-Section",
  "titleHidden": "Polaris-Modal-Section--titleHidden"
};
function Section$2({
  children,
  flush = false,
  subdued = false,
  titleHidden = false
}) {
  const className = classNames(styles$n.Section, titleHidden && styles$n.titleHidden);
  return /* @__PURE__ */ React.createElement("div", {
    className
  }, /* @__PURE__ */ React.createElement(Box, Object.assign({
    as: "section",
    padding: flush ? "0" : "400"
  }, titleHidden && {
    paddingInlineEnd: "0"
  }, subdued && {
    background: "bg-surface-tertiary"
  }), children));
}
var styles$m = {
  "Container": "Polaris-Modal-Dialog__Container",
  "Dialog": "Polaris-Modal-Dialog",
  "Modal": "Polaris-Modal-Dialog__Modal",
  "limitHeight": "Polaris-Modal-Dialog--limitHeight",
  "sizeSmall": "Polaris-Modal-Dialog--sizeSmall",
  "sizeLarge": "Polaris-Modal-Dialog--sizeLarge",
  "sizeFullScreen": "Polaris-Modal-Dialog--sizeFullScreen",
  "animateFadeUp": "Polaris-Modal-Dialog--animateFadeUp",
  "entering": "Polaris-Modal-Dialog--entering",
  "exiting": "Polaris-Modal-Dialog--exiting",
  "exited": "Polaris-Modal-Dialog--exited",
  "entered": "Polaris-Modal-Dialog--entered"
};
function useFocusManager({
  trapping
}) {
  const focusManager = useContext(FocusManagerContext);
  const id = useId();
  if (!focusManager) {
    throw new MissingAppProviderError("No FocusManager was provided.");
  }
  const {
    trapFocusList,
    add: addFocusItem,
    remove: removeFocusItem
  } = focusManager;
  const canSafelyFocus = trapFocusList[0] === id;
  const value = useMemo(() => ({
    canSafelyFocus
  }), [canSafelyFocus]);
  useEffect(() => {
    if (!trapping) return;
    addFocusItem(id);
    return () => {
      removeFocusItem(id);
    };
  }, [addFocusItem, id, removeFocusItem, trapping]);
  return value;
}
function TrapFocus({
  trapping = true,
  children
}) {
  const {
    canSafelyFocus
  } = useFocusManager({
    trapping
  });
  const focusTrapWrapper = useRef(null);
  const [disableFocus, setDisableFocus] = useState(true);
  useEffect(() => {
    const disable = canSafelyFocus && !(focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement)) ? !trapping : true;
    setDisableFocus(disable);
  }, [canSafelyFocus, trapping]);
  const handleFocusIn = (event) => {
    const containerContentsHaveFocus = focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement);
    if (trapping === false || !focusTrapWrapper.current || containerContentsHaveFocus || event.target instanceof Element && event.target.matches(`${portal.selector} *`)) {
      return;
    }
    if (canSafelyFocus && event.target instanceof HTMLElement && focusTrapWrapper.current !== event.target && !focusTrapWrapper.current.contains(event.target)) {
      focusFirstFocusableNode(focusTrapWrapper.current);
    }
  };
  const handleTab = (event) => {
    if (trapping === false || !focusTrapWrapper.current) {
      return;
    }
    const firstFocusableNode = findFirstKeyboardFocusableNode(focusTrapWrapper.current);
    const lastFocusableNode = findLastKeyboardFocusableNode(focusTrapWrapper.current);
    if (event.target === lastFocusableNode && !event.shiftKey) {
      event.preventDefault();
      focusFirstKeyboardFocusableNode(focusTrapWrapper.current);
    }
    if (event.target === firstFocusableNode && event.shiftKey) {
      event.preventDefault();
      focusLastKeyboardFocusableNode(focusTrapWrapper.current);
    }
  };
  return /* @__PURE__ */ React.createElement(Focus, {
    disabled: disableFocus,
    root: focusTrapWrapper.current
  }, /* @__PURE__ */ React.createElement("div", {
    ref: focusTrapWrapper
  }, /* @__PURE__ */ React.createElement(EventListener, {
    event: "focusin",
    handler: handleFocusIn
  }), /* @__PURE__ */ React.createElement(KeypressListener, {
    keyCode: Key.Tab,
    keyEvent: "keydown",
    handler: handleTab
  }), children));
}
function Dialog({
  instant,
  labelledBy,
  children,
  limitHeight,
  size,
  onClose,
  onExited,
  onEntered,
  setClosing,
  hasToasts,
  ...props
}) {
  const theme = useTheme();
  const containerNode = useRef(null);
  const frameContext = useContext(FrameContext);
  let toastMessages;
  if (frameContext) {
    toastMessages = frameContext.toastMessages;
  }
  const classes = classNames(styles$m.Modal, size && styles$m[variationName("size", size)], limitHeight && styles$m.limitHeight);
  const TransitionChild = instant ? Transition : FadeUp;
  useEffect(() => {
    containerNode.current && !containerNode.current.contains(document.activeElement) && focusFirstFocusableNode(containerNode.current);
  }, []);
  const handleKeyDown2 = () => {
    if (setClosing) {
      setClosing(true);
    }
  };
  const handleKeyUp = () => {
    if (setClosing) {
      setClosing(false);
    }
    onClose();
  };
  const ariaLiveAnnouncements = /* @__PURE__ */ React.createElement("div", {
    "aria-live": "assertive"
  }, toastMessages ? toastMessages.map((toastMessage) => /* @__PURE__ */ React.createElement(Text, {
    visuallyHidden: true,
    as: "p",
    key: toastMessage.id
  }, toastMessage.content)) : null);
  return /* @__PURE__ */ React.createElement(TransitionChild, Object.assign({}, props, {
    nodeRef: containerNode,
    mountOnEnter: true,
    unmountOnExit: true,
    timeout: parseInt(theme.motion["motion-duration-200"], 10),
    onEntered,
    onExited
  }), /* @__PURE__ */ React.createElement("div", {
    className: styles$m.Container,
    "data-polaris-layer": true,
    "data-polaris-overlay": true,
    ref: containerNode
  }, /* @__PURE__ */ React.createElement(TrapFocus, null, /* @__PURE__ */ React.createElement("div", {
    role: "dialog",
    "aria-modal": true,
    "aria-label": labelledBy,
    "aria-labelledby": labelledBy,
    tabIndex: -1,
    className: styles$m.Dialog
  }, /* @__PURE__ */ React.createElement("div", {
    className: classes
  }, /* @__PURE__ */ React.createElement(KeypressListener, {
    keyCode: Key.Escape,
    keyEvent: "keydown",
    handler: handleKeyDown2
  }), /* @__PURE__ */ React.createElement(KeypressListener, {
    keyCode: Key.Escape,
    handler: handleKeyUp
  }), children), ariaLiveAnnouncements))));
}
const fadeUpClasses = {
  appear: classNames(styles$m.animateFadeUp, styles$m.entering),
  appearActive: classNames(styles$m.animateFadeUp, styles$m.entered),
  enter: classNames(styles$m.animateFadeUp, styles$m.entering),
  enterActive: classNames(styles$m.animateFadeUp, styles$m.entered),
  exit: classNames(styles$m.animateFadeUp, styles$m.exiting),
  exitActive: classNames(styles$m.animateFadeUp, styles$m.exited)
};
function FadeUp({
  children,
  ...props
}) {
  return /* @__PURE__ */ React.createElement(CSSTransition, Object.assign({}, props, {
    classNames: fadeUpClasses
  }), children);
}
function CloseButton({
  pressed,
  onClick
}) {
  const i18n = useI18n();
  return /* @__PURE__ */ React.createElement(Button, {
    variant: "tertiary",
    pressed,
    icon: XIcon,
    onClick,
    accessibilityLabel: i18n.translate("Polaris.Common.close")
  });
}
function Header$1({
  id,
  children,
  closing,
  titleHidden,
  onClose
}) {
  const headerPaddingInline = "400";
  const headerPaddingBlock = "400";
  if (titleHidden || !children) {
    return /* @__PURE__ */ React.createElement(Box, {
      position: "absolute",
      insetInlineEnd: headerPaddingInline,
      insetBlockStart: headerPaddingBlock,
      zIndex: "1"
    }, /* @__PURE__ */ React.createElement(CloseButton, {
      onClick: onClose
    }));
  }
  return /* @__PURE__ */ React.createElement(Box, {
    paddingBlockStart: "400",
    paddingBlockEnd: "400",
    paddingInlineStart: headerPaddingInline,
    paddingInlineEnd: headerPaddingInline,
    borderBlockEndWidth: "025",
    borderColor: "border",
    background: "bg-surface-tertiary"
  }, /* @__PURE__ */ React.createElement(InlineGrid, {
    columns: {
      xs: "1fr auto"
    },
    gap: "400"
  }, /* @__PURE__ */ React.createElement(InlineStack, {
    gap: "400",
    blockAlign: "center"
  }, /* @__PURE__ */ React.createElement(Text, {
    id,
    as: "h2",
    variant: "headingMd",
    breakWord: true
  }, children)), /* @__PURE__ */ React.createElement(CloseButton, {
    pressed: closing,
    onClick: onClose
  })));
}
function Footer({
  primaryAction,
  secondaryActions,
  children
}) {
  const primaryActionButton = primaryAction && buttonsFrom(primaryAction, {
    variant: "primary"
  }) || null;
  const secondaryActionButtons = secondaryActions && buttonsFrom(secondaryActions) || null;
  const actions = primaryActionButton || secondaryActionButtons ? /* @__PURE__ */ React.createElement(InlineStack, {
    gap: "200"
  }, secondaryActionButtons, primaryActionButton) : null;
  return /* @__PURE__ */ React.createElement(InlineStack, {
    gap: "400",
    blockAlign: "center"
  }, /* @__PURE__ */ React.createElement(Box, {
    borderColor: "border",
    borderBlockStartWidth: "025",
    padding: "400",
    width: "100%"
  }, /* @__PURE__ */ React.createElement(InlineStack, {
    gap: "400",
    blockAlign: "center",
    align: "space-between"
  }, /* @__PURE__ */ React.createElement(Box, null, children), actions)));
}
const IFRAME_LOADING_HEIGHT = 200;
const DEFAULT_IFRAME_CONTENT_HEIGHT = 400;
const Modal = function Modal2({
  children,
  title,
  titleHidden = false,
  src,
  iFrameName,
  open,
  instant,
  sectioned,
  loading,
  size,
  limitHeight,
  footer,
  primaryAction,
  secondaryActions,
  onScrolledToBottom,
  activator,
  activatorWrapper = "div",
  onClose,
  onIFrameLoad,
  onTransitionEnd,
  noScroll
}) {
  const [iframeHeight, setIframeHeight] = useState(IFRAME_LOADING_HEIGHT);
  const [closing, setClosing] = useState(false);
  const headerId = useId();
  const activatorRef = useRef(null);
  const i18n = useI18n();
  const iframeTitle = i18n.translate("Polaris.Modal.iFrameTitle");
  let dialog;
  let backdrop;
  const handleEntered = useCallback(() => {
    if (onTransitionEnd) {
      onTransitionEnd();
    }
  }, [onTransitionEnd]);
  const handleExited = useCallback(() => {
    setIframeHeight(IFRAME_LOADING_HEIGHT);
    const activatorElement = activator && isRef(activator) ? activator && activator.current : activatorRef.current;
    if (activatorElement) {
      requestAnimationFrame(() => focusFirstFocusableNode(activatorElement));
    }
  }, [activator]);
  const handleIFrameLoad = useCallback((evt) => {
    const iframe = evt.target;
    if (iframe && iframe.contentWindow) {
      try {
        setIframeHeight(iframe.contentWindow.document.body.scrollHeight);
      } catch (_error) {
        setIframeHeight(DEFAULT_IFRAME_CONTENT_HEIGHT);
      }
    }
    if (onIFrameLoad != null) {
      onIFrameLoad(evt);
    }
  }, [onIFrameLoad]);
  if (open) {
    const footerMarkup = !footer && !primaryAction && !secondaryActions ? null : /* @__PURE__ */ React.createElement(Footer, {
      primaryAction,
      secondaryActions
    }, footer);
    const content = sectioned ? wrapWithComponent(children, Section$2, {
      titleHidden
    }) : children;
    const body = loading ? /* @__PURE__ */ React.createElement(Box, {
      padding: "400"
    }, /* @__PURE__ */ React.createElement(InlineStack, {
      gap: "400",
      align: "center",
      blockAlign: "center"
    }, /* @__PURE__ */ React.createElement(Spinner$1, null))) : content;
    const scrollContainerMarkup = noScroll ? /* @__PURE__ */ React.createElement("div", {
      className: styles$o.NoScrollBody
    }, /* @__PURE__ */ React.createElement(Box, {
      width: "100%",
      overflowX: "hidden",
      overflowY: "hidden"
    }, body)) : /* @__PURE__ */ React.createElement(Scrollable, {
      shadow: true,
      className: styles$o.Body,
      onScrolledToBottom
    }, body);
    const bodyMarkup = src ? /* @__PURE__ */ React.createElement("iframe", {
      name: iFrameName,
      title: iframeTitle,
      src,
      className: styles$o.IFrame,
      onLoad: handleIFrameLoad,
      style: {
        height: `${iframeHeight}px`
      }
    }) : scrollContainerMarkup;
    dialog = /* @__PURE__ */ React.createElement(Dialog, {
      instant,
      labelledBy: headerId,
      onClose,
      onEntered: handleEntered,
      onExited: handleExited,
      size,
      limitHeight,
      setClosing
    }, /* @__PURE__ */ React.createElement(Header$1, {
      titleHidden,
      id: headerId,
      closing,
      onClose
    }, title), bodyMarkup, footerMarkup);
    backdrop = /* @__PURE__ */ React.createElement(Backdrop, {
      setClosing,
      onClick: onClose
    });
  }
  const animated = !instant;
  const activatorMarkup = activator && !isRef(activator) ? /* @__PURE__ */ React.createElement(Box, {
    ref: activatorRef,
    as: activatorWrapper
  }, activator) : null;
  return /* @__PURE__ */ React.createElement(WithinContentContext.Provider, {
    value: true
  }, activatorMarkup, /* @__PURE__ */ React.createElement(Portal, {
    idPrefix: "modal"
  }, /* @__PURE__ */ React.createElement(TransitionGroup, {
    appear: animated,
    enter: animated,
    exit: animated
  }, dialog), backdrop));
};
function isRef(ref) {
  return Object.prototype.hasOwnProperty.call(ref, "current");
}
Modal.Section = Section$2;
function DiscardConfirmationModal({
  open,
  onDiscard,
  onCancel
}) {
  const i18n = useI18n();
  return /* @__PURE__ */ React.createElement(Modal, {
    title: i18n.translate("Polaris.DiscardConfirmationModal.title"),
    open,
    onClose: onCancel,
    primaryAction: {
      content: i18n.translate("Polaris.DiscardConfirmationModal.primaryAction"),
      destructive: true,
      onAction: onDiscard
    },
    secondaryActions: [{
      content: i18n.translate("Polaris.DiscardConfirmationModal.secondaryAction"),
      onAction: onCancel
    }],
    sectioned: true
  }, i18n.translate("Polaris.DiscardConfirmationModal.message"));
}
function ContextualSaveBar({
  alignContentFlush,
  message,
  saveAction,
  discardAction,
  fullWidth,
  contextControl,
  secondaryMenu
}) {
  const i18n = useI18n();
  const {
    logo
  } = useFrame();
  const {
    value: discardConfirmationModalVisible,
    toggle: toggleDiscardConfirmationModal,
    setFalse: closeDiscardConfirmationModal
  } = useToggle(false);
  const handleDiscardAction = useCallback(() => {
    if (discardAction && discardAction.onAction) {
      discardAction.onAction();
    }
    closeDiscardConfirmationModal();
  }, [closeDiscardConfirmationModal, discardAction]);
  const discardActionContent = discardAction && discardAction.content ? discardAction.content : i18n.translate("Polaris.ContextualSaveBar.discard");
  let discardActionHandler;
  if (discardAction && discardAction.discardConfirmationModal) {
    discardActionHandler = toggleDiscardConfirmationModal;
  } else if (discardAction) {
    discardActionHandler = discardAction.onAction;
  }
  const discardConfirmationModalMarkup = discardAction && discardAction.onAction && discardAction.discardConfirmationModal && /* @__PURE__ */ React.createElement(DiscardConfirmationModal, {
    open: discardConfirmationModalVisible,
    onCancel: toggleDiscardConfirmationModal,
    onDiscard: handleDiscardAction
  });
  const discardActionMarkup = discardAction && /* @__PURE__ */ React.createElement(Button, {
    variant: "tertiary",
    size: "large",
    url: discardAction.url,
    onClick: discardActionHandler,
    loading: discardAction.loading,
    disabled: discardAction.disabled,
    accessibilityLabel: discardAction.content
  }, discardActionContent);
  const saveActionContent = saveAction && saveAction.content ? saveAction.content : i18n.translate("Polaris.ContextualSaveBar.save");
  const saveActionMarkup = saveAction && /* @__PURE__ */ React.createElement(Button, {
    variant: "primary",
    tone: "success",
    size: "large",
    url: saveAction.url,
    onClick: saveAction.onAction,
    loading: saveAction.loading,
    disabled: saveAction.disabled,
    accessibilityLabel: saveAction.content
  }, saveActionContent);
  const width = getWidth(logo, 104);
  const imageMarkup = logo && /* @__PURE__ */ React.createElement(Image, {
    style: {
      width
    },
    source: logo.contextualSaveBarSource || "",
    alt: ""
  });
  const logoMarkup = alignContentFlush || contextControl ? null : /* @__PURE__ */ React.createElement("div", {
    className: styles$p.LogoContainer,
    style: {
      width
    }
  }, imageMarkup);
  const contextControlMarkup = contextControl ? /* @__PURE__ */ React.createElement("div", {
    className: styles$p.ContextControl
  }, contextControl) : null;
  const contentsClassName = classNames(styles$p.Contents, fullWidth && styles$p.fullWidth);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", {
    className: styles$p.ContextualSaveBar
  }, contextControlMarkup, logoMarkup, /* @__PURE__ */ React.createElement("div", {
    className: contentsClassName
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$p.MessageContainer
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: AlertTriangleIcon
  }), message && /* @__PURE__ */ React.createElement(Text, {
    as: "h2",
    variant: "headingMd",
    tone: "text-inverse",
    truncate: true
  }, message)), /* @__PURE__ */ React.createElement("div", {
    className: styles$p.ActionContainer
  }, /* @__PURE__ */ React.createElement(LegacyStack, {
    spacing: "tight",
    wrap: false
  }, secondaryMenu, discardActionMarkup, saveActionMarkup)))), discardConfirmationModalMarkup);
}
function useDeepCompareRef(dependencies, comparator = isEqual) {
  const dependencyList = useRef(dependencies);
  if (!comparator(dependencyList.current, dependencies)) {
    dependencyList.current = dependencies;
  }
  return dependencyList.current;
}
function useDeepEffect(callback, dependencies, customCompare) {
  useEffect(callback, useDeepCompareRef(dependencies, customCompare));
}
function useDeepCallback(callback, dependencies, customCompare) {
  return useCallback(callback, useDeepCompareRef(dependencies, customCompare));
}
var styles$l = {
  "ToastManager": "Polaris-Frame-ToastManager",
  "ToastWrapper": "Polaris-Frame-ToastManager__ToastWrapper",
  "ToastWrapper-enter": "Polaris-Frame-ToastManager__ToastWrapper--enter",
  "ToastWrapper-exit": "Polaris-Frame-ToastManager__ToastWrapper--exit",
  "ToastWrapper-enter-done": "Polaris-Frame-ToastManager--toastWrapperEnterDone"
};
var styles$k = {
  "Toast": "Polaris-Frame-Toast",
  "Action": "Polaris-Frame-Toast__Action",
  "error": "Polaris-Frame-Toast--error",
  "CloseButton": "Polaris-Frame-Toast__CloseButton",
  "LeadingIcon": "Polaris-Frame-Toast__LeadingIcon",
  "toneMagic": "Polaris-Frame-Toast--toneMagic",
  "WithActionOnComponent": "Polaris-Frame-Toast__WithActionOnComponent"
};
const DEFAULT_TOAST_DURATION = 5e3;
const DEFAULT_TOAST_DURATION_WITH_ACTION = 1e4;
function Toast({
  content,
  onDismiss,
  duration,
  error,
  action: action2,
  tone,
  onClick,
  icon,
  isHovered
}) {
  const defaultDurationWithoutAction = duration || DEFAULT_TOAST_DURATION;
  const defaultDuration = action2 && !duration ? DEFAULT_TOAST_DURATION_WITH_ACTION : defaultDurationWithoutAction;
  const durationRemaining = useRef(defaultDuration);
  const timeoutStart = useRef(null);
  const timer = useRef(null);
  useEffect(() => {
    function resume() {
      timeoutStart.current = Date.now();
      timer.current = setTimeout(() => {
        onDismiss();
      }, durationRemaining.current);
    }
    function pause() {
      if (timeoutStart.current) {
        durationRemaining.current -= Date.now() - timeoutStart.current;
      }
      if (timer.current) {
        clearTimeout(timer.current);
      }
      timer.current = null;
    }
    if (isHovered) {
      pause();
    } else {
      resume();
    }
    return () => {
      if (timer.current) {
        clearTimeout(timer.current);
      }
    };
  }, [isHovered, onDismiss]);
  useEffect(() => {
    if (action2 && duration && duration < DEFAULT_TOAST_DURATION_WITH_ACTION) {
      console.log("Toast with action should persist for at least 10,000 milliseconds to give the merchant enough time to act on it.");
    }
  }, [action2, duration]);
  const dismissMarkup = /* @__PURE__ */ React.createElement("button", {
    type: "button",
    className: styles$k.CloseButton,
    onClick: onDismiss
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: XSmallIcon,
    tone: "inherit"
  }));
  const actionMarkup = action2 ? /* @__PURE__ */ React.createElement("div", {
    className: styles$k.Action
  }, /* @__PURE__ */ React.createElement(Button, {
    variant: "monochromePlain",
    removeUnderline: true,
    size: "slim",
    onClick: action2.onAction
  }, action2.content)) : null;
  let leadingIconMarkup = null;
  if (error) {
    leadingIconMarkup = /* @__PURE__ */ React.createElement("div", {
      className: styles$k.LeadingIcon
    }, /* @__PURE__ */ React.createElement(Icon, {
      source: AlertCircleIcon,
      tone: "inherit"
    }));
  } else if (icon) {
    leadingIconMarkup = /* @__PURE__ */ React.createElement("div", {
      className: styles$k.LeadingIcon
    }, /* @__PURE__ */ React.createElement(Icon, {
      source: icon,
      tone: "inherit"
    }));
  }
  const className = classNames(styles$k.Toast, error && styles$k.error, tone && styles$k[variationName("tone", tone)]);
  if (!action2 && onClick) {
    return /* @__PURE__ */ React.createElement("button", {
      "aria-live": "assertive",
      className: classNames(className, styles$k.WithActionOnComponent),
      type: "button",
      onClick
    }, /* @__PURE__ */ React.createElement(KeypressListener, {
      keyCode: Key.Escape,
      handler: onDismiss
    }), leadingIconMarkup, /* @__PURE__ */ React.createElement(InlineStack, {
      gap: "400",
      blockAlign: "center"
    }, /* @__PURE__ */ React.createElement(Text, Object.assign({
      as: "span",
      variant: "bodyMd",
      fontWeight: "medium"
    }, tone === "magic" && {
      tone: "magic"
    }), content)));
  }
  return /* @__PURE__ */ React.createElement("div", {
    className,
    "aria-live": "assertive"
  }, /* @__PURE__ */ React.createElement(KeypressListener, {
    keyCode: Key.Escape,
    handler: onDismiss
  }), leadingIconMarkup, /* @__PURE__ */ React.createElement(InlineStack, {
    gap: "400",
    blockAlign: "center"
  }, /* @__PURE__ */ React.createElement(Text, Object.assign({
    as: "span",
    variant: "bodyMd",
    fontWeight: "medium"
  }, tone === "magic" && {
    tone: "magic"
  }), content)), actionMarkup, dismissMarkup);
}
const ADDITIONAL_TOAST_BASE_MOVEMENT = 10;
const TOAST_TRANSITION_DELAY = 30;
function generateAdditionalVerticalMovement(index) {
  const getAmountToRemove = (idx) => (idx - 1) * idx / 2;
  return index * ADDITIONAL_TOAST_BASE_MOVEMENT - getAmountToRemove(index);
}
const ToastManager = /* @__PURE__ */ memo(function ToastManager2({
  toastMessages
}) {
  const toastNodes = [];
  const [shouldExpand, setShouldExpand] = useState(false);
  const isFullyExpanded = useRef(false);
  const fullyExpandedTimeout = useRef(null);
  const firstToast = useRef(null);
  const updateToasts = useDeepCallback(() => {
    const zeroIndexTotalMessages = toastMessages.length - 1;
    toastMessages.forEach((_, index) => {
      const reversedOrder = zeroIndexTotalMessages - index;
      const currentToast = toastNodes[index];
      if (!currentToast.current) return;
      const toastHeight = currentToast.current.clientHeight;
      const scale = shouldExpand ? 1 : 0.9 ** reversedOrder;
      const additionalVerticalMovement = generateAdditionalVerticalMovement(reversedOrder);
      const targetInPos = shouldExpand ? toastHeight + (toastHeight - 8) * reversedOrder : toastHeight + additionalVerticalMovement;
      currentToast.current.style.setProperty("--pc-toast-manager-translate-y-in", `-${targetInPos}px`);
      currentToast.current.style.setProperty("--pc-toast-manager-scale-in", `${scale}`);
      currentToast.current.style.setProperty("--pc-toast-manager-blur-in", shouldExpand ? "0" : `${reversedOrder * 0.5}px`);
      currentToast.current.style.setProperty("--pc-toast-manager-transition-delay-in", `${shouldExpand ? reversedOrder * TOAST_TRANSITION_DELAY : 0}ms`);
      currentToast.current.style.setProperty("--pc-toast-manager-scale-out", `${reversedOrder === 0 ? 0.85 : scale ** 2}`);
      currentToast.current.style.setProperty("--pc-toast-manager-translate-y-out", `${-targetInPos}px`);
    });
  }, [toastMessages, toastNodes, shouldExpand]);
  useDeepEffect(() => {
    updateToasts();
    if (toastMessages.length === 0) {
      setShouldExpand(false);
    }
    if (shouldExpand) {
      fullyExpandedTimeout.current = setTimeout(() => {
        isFullyExpanded.current = true;
      }, toastMessages.length * TOAST_TRANSITION_DELAY + 400);
    } else if (fullyExpandedTimeout.current) {
      clearTimeout(fullyExpandedTimeout.current);
      isFullyExpanded.current = false;
    }
  }, [toastMessages, shouldExpand]);
  const toastsMarkup = toastMessages.map((toast2, index) => {
    const reverseOrderIndex = toastMessages.length - index - 1;
    const toastNode = /* @__PURE__ */ createRef();
    toastNodes[index] = toastNode;
    function handleMouseEnter() {
      setShouldExpand(true);
    }
    function handleMouseEnterFirstToast() {
      if (isFullyExpanded.current) {
        setShouldExpand(false);
      }
    }
    return /* @__PURE__ */ React.createElement(CSSTransition, {
      nodeRef: toastNodes[index],
      key: toast2.id,
      timeout: {
        enter: 0,
        exit: 200
      },
      classNames: toastClasses
    }, /* @__PURE__ */ React.createElement("div", {
      ref: toastNode,
      onMouseEnter: reverseOrderIndex > 0 ? handleMouseEnter : handleMouseEnterFirstToast
    }, /* @__PURE__ */ React.createElement("div", {
      ref: (node) => reverseOrderIndex === 0 ? firstToast.current = node : null
    }, /* @__PURE__ */ React.createElement(Toast, Object.assign({}, toast2, {
      isHovered: shouldExpand
    })))));
  });
  return /* @__PURE__ */ React.createElement(Portal, {
    idPrefix: "toast"
  }, /* @__PURE__ */ React.createElement(EventListener, {
    event: "resize",
    handler: updateToasts
  }), /* @__PURE__ */ React.createElement("div", {
    className: styles$l.ToastManager,
    "aria-live": "assertive",
    onMouseEnter: function(event) {
      var _a2;
      const target = event.target;
      const isInFirstToast = (_a2 = firstToast.current) == null ? void 0 : _a2.contains(target);
      setShouldExpand(!isInFirstToast);
    },
    onMouseLeave: function() {
      setShouldExpand(false);
    }
  }, /* @__PURE__ */ React.createElement(TransitionGroup, {
    component: null
  }, toastsMarkup)));
});
const toastClasses = {
  enter: classNames(styles$l.ToastWrapper, styles$l["ToastWrapper-enter"]),
  enterDone: classNames(styles$l.ToastWrapper, styles$l["ToastWrapper-enter-done"]),
  exit: classNames(styles$l.ToastWrapper, styles$l["ToastWrapper-exit"])
};
const APP_FRAME_MAIN = "AppFrameMain";
const APP_FRAME_NAV = "AppFrameNav";
const APP_FRAME_TOP_BAR = "AppFrameTopBar";
const APP_FRAME_LOADING_BAR = "AppFrameLoadingBar";
class FrameInner extends PureComponent {
  constructor(...args) {
    super(...args);
    this.state = {
      skipFocused: false,
      globalRibbonHeight: 0,
      loadingStack: 0,
      toastMessages: [],
      showContextualSaveBar: false
    };
    this.contextualSaveBar = null;
    this.globalRibbonContainer = null;
    this.navigationNode = /* @__PURE__ */ createRef();
    this.setGlobalRibbonHeight = () => {
      const {
        globalRibbonContainer
      } = this;
      if (globalRibbonContainer) {
        this.setState({
          globalRibbonHeight: globalRibbonContainer.offsetHeight
        }, this.setGlobalRibbonRootProperty);
      }
    };
    this.setOffset = () => {
      const {
        offset = "0px"
      } = this.props;
      setRootProperty("--pc-frame-offset", offset);
    };
    this.setGlobalRibbonRootProperty = () => {
      const {
        globalRibbonHeight
      } = this.state;
      setRootProperty("--pc-frame-global-ribbon-height", `${globalRibbonHeight}px`);
    };
    this.showToast = (toast2) => {
      this.setState(({
        toastMessages
      }) => {
        const hasToastById = toastMessages.find(({
          id
        }) => id === toast2.id) != null;
        return {
          toastMessages: hasToastById ? toastMessages : [...toastMessages, toast2]
        };
      });
    };
    this.hideToast = ({
      id
    }) => {
      this.setState(({
        toastMessages
      }) => {
        return {
          toastMessages: toastMessages.filter(({
            id: toastId
          }) => id !== toastId)
        };
      });
    };
    this.setContextualSaveBar = (props) => {
      const {
        showContextualSaveBar
      } = this.state;
      this.contextualSaveBar = {
        ...props
      };
      if (showContextualSaveBar === true) {
        this.forceUpdate();
      } else {
        this.setState({
          showContextualSaveBar: true
        });
      }
    };
    this.removeContextualSaveBar = () => {
      this.contextualSaveBar = null;
      this.setState({
        showContextualSaveBar: false
      });
    };
    this.startLoading = () => {
      this.setState(({
        loadingStack
      }) => ({
        loadingStack: loadingStack + 1
      }));
    };
    this.stopLoading = () => {
      this.setState(({
        loadingStack
      }) => ({
        loadingStack: Math.max(0, loadingStack - 1)
      }));
    };
    this.handleResize = () => {
      if (this.props.globalRibbon) {
        this.setGlobalRibbonHeight();
      }
    };
    this.handleFocus = () => {
      this.setState({
        skipFocused: true
      });
    };
    this.handleBlur = () => {
      this.setState({
        skipFocused: false
      });
    };
    this.handleClick = (event) => {
      const {
        skipToContentTarget
      } = this.props;
      if (skipToContentTarget && skipToContentTarget.current) {
        skipToContentTarget.current.focus();
        event == null ? void 0 : event.preventDefault();
      }
    };
    this.handleNavigationDismiss = () => {
      const {
        onNavigationDismiss
      } = this.props;
      if (onNavigationDismiss != null) {
        onNavigationDismiss();
      }
    };
    this.setGlobalRibbonContainer = (node) => {
      this.globalRibbonContainer = node;
    };
    this.handleNavKeydown = (event) => {
      const {
        key
      } = event;
      const {
        mediaQuery: {
          isNavigationCollapsed
        },
        showMobileNavigation
      } = this.props;
      const mobileNavShowing = isNavigationCollapsed && showMobileNavigation;
      if (mobileNavShowing && key === "Escape") {
        this.handleNavigationDismiss();
      }
    };
  }
  componentDidMount() {
    this.handleResize();
    if (this.props.globalRibbon) {
      return;
    }
    this.setGlobalRibbonRootProperty();
    this.setOffset();
  }
  componentDidUpdate(prevProps) {
    if (this.props.globalRibbon !== prevProps.globalRibbon) {
      this.setGlobalRibbonHeight();
    }
    this.setOffset();
  }
  render() {
    const {
      skipFocused,
      loadingStack,
      toastMessages,
      showContextualSaveBar
    } = this.state;
    const {
      logo,
      children,
      navigation,
      topBar,
      globalRibbon,
      showMobileNavigation = false,
      skipToContentTarget,
      i18n,
      sidebar,
      mediaQuery: {
        isNavigationCollapsed
      }
    } = this.props;
    const navClassName = classNames(styles$s.Navigation, showMobileNavigation && styles$s["Navigation-visible"]);
    const mobileNavHidden = isNavigationCollapsed && !showMobileNavigation;
    const mobileNavShowing = isNavigationCollapsed && showMobileNavigation;
    const tabIndex = mobileNavShowing ? 0 : -1;
    const mobileNavAttributes = {
      ...mobileNavShowing && {
        "aria-modal": true,
        role: "dialog"
      }
    };
    const navigationMarkup = navigation ? /* @__PURE__ */ React.createElement(UseTheme, null, (theme) => /* @__PURE__ */ React.createElement(TrapFocus, {
      trapping: mobileNavShowing
    }, /* @__PURE__ */ React.createElement(CSSTransition, {
      nodeRef: this.navigationNode,
      appear: isNavigationCollapsed,
      exit: isNavigationCollapsed,
      in: showMobileNavigation,
      timeout: parseInt(theme.motion["motion-duration-300"], 10),
      classNames: navTransitionClasses
    }, /* @__PURE__ */ React.createElement("div", Object.assign({
      key: "NavContent"
    }, mobileNavAttributes, {
      "aria-label": i18n.translate("Polaris.Frame.navigationLabel"),
      ref: this.navigationNode,
      className: navClassName,
      onKeyDown: this.handleNavKeydown,
      id: APP_FRAME_NAV,
      hidden: mobileNavHidden
    }), navigation, /* @__PURE__ */ React.createElement("button", {
      type: "button",
      className: styles$s.NavigationDismiss,
      onClick: this.handleNavigationDismiss,
      "aria-hidden": mobileNavHidden || !isNavigationCollapsed && !showMobileNavigation,
      "aria-label": i18n.translate("Polaris.Frame.Navigation.closeMobileNavigationLabel"),
      tabIndex
    }, /* @__PURE__ */ React.createElement(Icon, {
      source: XIcon
    })))))) : null;
    const loadingMarkup = loadingStack > 0 ? /* @__PURE__ */ React.createElement("div", {
      className: styles$s.LoadingBar,
      id: APP_FRAME_LOADING_BAR
    }, /* @__PURE__ */ React.createElement(Loading, null)) : null;
    const topBarMarkup = topBar ? /* @__PURE__ */ React.createElement("div", Object.assign({
      className: styles$s.TopBar
    }, layer.props, dataPolarisTopBar.props, {
      id: APP_FRAME_TOP_BAR
    }), topBar) : null;
    const globalRibbonMarkup = globalRibbon ? /* @__PURE__ */ React.createElement("div", {
      className: styles$s.GlobalRibbonContainer,
      ref: this.setGlobalRibbonContainer
    }, globalRibbon) : null;
    const skipClassName = classNames(styles$s.Skip, skipFocused && styles$s.focused);
    const skipTarget = (skipToContentTarget == null ? void 0 : skipToContentTarget.current) ? skipToContentTarget.current.id : APP_FRAME_MAIN;
    const skipMarkup = /* @__PURE__ */ React.createElement("div", {
      className: skipClassName
    }, /* @__PURE__ */ React.createElement("a", {
      href: `#${skipTarget}`,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      onClick: this.handleClick
    }, /* @__PURE__ */ React.createElement(Text, {
      as: "span",
      variant: "bodyLg",
      fontWeight: "medium"
    }, i18n.translate("Polaris.Frame.skipToContent"))));
    const navigationAttributes = navigation ? {
      "data-has-navigation": true
    } : {};
    const frameClassName = classNames(styles$s.Frame, navigation && styles$s.hasNav, topBar && styles$s.hasTopBar, sidebar && styles$s.hasSidebar);
    const contextualSaveBarMarkup = /* @__PURE__ */ React.createElement(CSSAnimation, {
      in: showContextualSaveBar,
      className: styles$s.ContextualSaveBar,
      type: "fade"
    }, /* @__PURE__ */ React.createElement(ContextualSaveBar, this.contextualSaveBar));
    const navigationOverlayMarkup = showMobileNavigation && isNavigationCollapsed ? /* @__PURE__ */ React.createElement(Backdrop, {
      belowNavigation: true,
      onClick: this.handleNavigationDismiss,
      onTouchStart: this.handleNavigationDismiss
    }) : null;
    const context = {
      logo,
      showToast: this.showToast,
      hideToast: this.hideToast,
      toastMessages,
      startLoading: this.startLoading,
      stopLoading: this.stopLoading,
      setContextualSaveBar: this.setContextualSaveBar,
      removeContextualSaveBar: this.removeContextualSaveBar
    };
    return /* @__PURE__ */ React.createElement(FrameContext.Provider, {
      value: context
    }, /* @__PURE__ */ React.createElement("div", Object.assign({
      className: frameClassName
    }, layer.props, navigationAttributes), skipMarkup, topBarMarkup, navigationMarkup, contextualSaveBarMarkup, loadingMarkup, navigationOverlayMarkup, /* @__PURE__ */ React.createElement("main", {
      className: styles$s.Main,
      id: APP_FRAME_MAIN,
      "data-has-global-ribbon": Boolean(globalRibbon)
    }, /* @__PURE__ */ React.createElement("div", {
      className: styles$s.Content
    }, children)), /* @__PURE__ */ React.createElement(ToastManager, {
      toastMessages
    }), globalRibbonMarkup, /* @__PURE__ */ React.createElement(EventListener, {
      event: "resize",
      handler: this.handleResize
    })));
  }
}
const navTransitionClasses = {
  enter: classNames(styles$s["Navigation-enter"]),
  enterActive: classNames(styles$s["Navigation-enterActive"]),
  enterDone: classNames(styles$s["Navigation-enterActive"]),
  exit: classNames(styles$s["Navigation-exit"]),
  exitActive: classNames(styles$s["Navigation-exitActive"])
};
function Frame(props) {
  const i18n = useI18n();
  const mediaQuery = useMediaQuery();
  return /* @__PURE__ */ React.createElement(FrameInner, Object.assign({}, props, {
    i18n,
    mediaQuery
  }));
}
function useIsTouchDevice() {
  const [isTouchDevice, setIsTouchDevice] = useState(false);
  const handleTouchStart = useCallback(() => setIsTouchDevice(true), []);
  useEventListener("touchstart", handleTouchStart);
  return isTouchDevice;
}
function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}
function getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth) {
  const sumTabWidths = tabWidths.reduce((sum, width) => sum + width, 0);
  const arrayOfTabIndices = tabs.map((_, index) => {
    return index;
  });
  const visibleTabs = [];
  const hiddenTabs = [];
  if (containerWidth > sumTabWidths) {
    visibleTabs.push(...arrayOfTabIndices);
  } else {
    visibleTabs.push(selected);
    let tabListWidth = tabWidths[selected];
    arrayOfTabIndices.forEach((currentTabIndex) => {
      if (currentTabIndex !== selected) {
        const currentTabWidth = tabWidths[currentTabIndex];
        if (tabListWidth + currentTabWidth >= containerWidth - disclosureWidth) {
          hiddenTabs.push(currentTabIndex);
          return;
        }
        visibleTabs.push(currentTabIndex);
        tabListWidth += currentTabWidth;
      }
    });
  }
  return {
    visibleTabs,
    hiddenTabs
  };
}
var styles$j = {
  "Outer": "Polaris-Tabs__Outer",
  "Wrapper": "Polaris-Tabs__Wrapper",
  "WrapperWithNewButton": "Polaris-Tabs__WrapperWithNewButton",
  "ButtonWrapper": "Polaris-Tabs__ButtonWrapper",
  "Tabs": "Polaris-Tabs",
  "Tab": "Polaris-Tabs__Tab",
  "Tab-active": "Polaris-Tabs__Tab--active",
  "Tab-hasActions": "Polaris-Tabs__Tab--hasActions",
  "Tab-iconOnly": "Polaris-Tabs__Tab--iconOnly",
  "fillSpace": "Polaris-Tabs--fillSpace",
  "TabContainer": "Polaris-Tabs__TabContainer",
  "fitted": "Polaris-Tabs--fitted",
  "List": "Polaris-Tabs__List",
  "Item": "Polaris-Tabs__Item",
  "DisclosureTab": "Polaris-Tabs__DisclosureTab",
  "DisclosureTab-visible": "Polaris-Tabs__DisclosureTab--visible",
  "DisclosureActivator": "Polaris-Tabs__DisclosureActivator",
  "TabsMeasurer": "Polaris-Tabs__TabsMeasurer",
  "NewTab": "Polaris-Tabs__NewTab",
  "ActionListWrap": "Polaris-Tabs__ActionListWrap",
  "Panel": "Polaris-Tabs__Panel",
  "Panel-hidden": "Polaris-Tabs__Panel--hidden"
};
const MAX_VIEW_NAME_LENGTH$1 = 40;
function DuplicateModal({
  open,
  isModalLoading,
  name,
  onClose,
  onClickPrimaryAction,
  onClickSecondaryAction,
  helpText,
  viewNames
}) {
  const i18n = useI18n();
  const [value, setValue] = useState(name);
  const container = useRef(null);
  const hasSameNameError = viewNames == null ? void 0 : viewNames.some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase());
  const isPrimaryActionDisabled = isModalLoading || hasSameNameError || !value || value.length > MAX_VIEW_NAME_LENGTH$1;
  useEffect(() => {
    if (!container.current) return;
    if (open) {
      focusFirstFocusableNode(container.current);
    }
  }, [open]);
  useEffect(() => {
    if (open) {
      setValue(name.slice(0, MAX_VIEW_NAME_LENGTH$1));
    }
  }, [name, open]);
  const handleChange = useCallback((newValue) => {
    setValue(newValue);
  }, []);
  async function handlePrimaryAction() {
    if (isPrimaryActionDisabled) {
      return;
    }
    await onClickPrimaryAction(value);
    setValue("");
    onClose();
  }
  function handleSecondaryAction() {
    onClickSecondaryAction == null ? void 0 : onClickSecondaryAction();
    setValue(name);
    onClose();
  }
  return /* @__PURE__ */ React.createElement(Modal, {
    open,
    onClose,
    title: i18n.translate("Polaris.Tabs.DuplicateModal.title"),
    primaryAction: {
      content: i18n.translate("Polaris.Tabs.DuplicateModal.create"),
      onAction: handlePrimaryAction,
      disabled: isPrimaryActionDisabled
    },
    secondaryActions: [{
      content: i18n.translate("Polaris.Tabs.DuplicateModal.cancel"),
      onAction: handleSecondaryAction
    }],
    instant: true
  }, /* @__PURE__ */ React.createElement(Modal.Section, null, /* @__PURE__ */ React.createElement(Form, {
    onSubmit: handlePrimaryAction
  }, /* @__PURE__ */ React.createElement(FormLayout, null, /* @__PURE__ */ React.createElement("div", {
    ref: container
  }, /* @__PURE__ */ React.createElement(TextField, {
    label: i18n.translate("Polaris.Tabs.DuplicateModal.label"),
    value,
    onChange: handleChange,
    autoComplete: "off",
    helpText,
    maxLength: MAX_VIEW_NAME_LENGTH$1,
    showCharacterCount: true,
    error: hasSameNameError ? i18n.translate("Polaris.Tabs.DuplicateModal.errors.sameName", {
      name: value
    }) : void 0
  }))))));
}
function RenameModal({
  open,
  isModalLoading,
  name,
  onClose,
  onClickPrimaryAction,
  onClickSecondaryAction,
  helpText,
  viewNames
}) {
  const i18n = useI18n();
  const [value, setValue] = useState(name);
  const container = useRef(null);
  const hasSameNameError = viewNames == null ? void 0 : viewNames.filter((viewName) => viewName !== name).some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase());
  const isPrimaryActionDisabled = isModalLoading || hasSameNameError || value === name || !value;
  useEffect(() => {
    if (!container.current) return;
    if (open) {
      focusFirstFocusableNode(container.current);
    }
  }, [open]);
  useEffect(() => {
    if (open) {
      setValue(name);
    }
  }, [name, open]);
  const handleChange = useCallback((newValue) => {
    setValue(newValue);
  }, []);
  async function handlePrimaryAction() {
    if (isPrimaryActionDisabled) {
      return;
    }
    await onClickPrimaryAction(value);
    setValue("");
    onClose();
  }
  function handleSecondaryAction() {
    onClickSecondaryAction == null ? void 0 : onClickSecondaryAction();
    setValue(name);
    onClose();
  }
  return /* @__PURE__ */ React.createElement(Modal, {
    open,
    onClose,
    title: i18n.translate("Polaris.Tabs.RenameModal.title"),
    primaryAction: {
      content: i18n.translate("Polaris.Tabs.RenameModal.create"),
      onAction: handlePrimaryAction,
      disabled: isPrimaryActionDisabled
    },
    secondaryActions: [{
      content: i18n.translate("Polaris.Tabs.RenameModal.cancel"),
      onAction: handleSecondaryAction
    }],
    instant: true
  }, /* @__PURE__ */ React.createElement(Modal.Section, null, /* @__PURE__ */ React.createElement(Form, {
    onSubmit: handlePrimaryAction
  }, /* @__PURE__ */ React.createElement(FormLayout, null, /* @__PURE__ */ React.createElement("div", {
    ref: container
  }, /* @__PURE__ */ React.createElement(TextField, {
    label: i18n.translate("Polaris.Tabs.RenameModal.label"),
    value,
    onChange: handleChange,
    autoComplete: "off",
    helpText,
    maxLength: 40,
    showCharacterCount: true,
    error: hasSameNameError ? i18n.translate("Polaris.Tabs.RenameModal.errors.sameName", {
      name: value
    }) : void 0
  }))))));
}
const Tab = /* @__PURE__ */ forwardRef(({
  content,
  accessibilityLabel,
  badge,
  id,
  panelID,
  url,
  onAction,
  actions,
  disabled,
  isModalLoading,
  icon,
  siblingTabHasFocus,
  measuring,
  focused,
  selected,
  onToggleModal,
  onTogglePopover,
  viewNames,
  tabIndexOverride,
  onFocus
}, ref) => {
  const i18n = useI18n();
  const [popoverActive, setPopoverActive] = useState(false);
  const [activeModalType, setActiveModalType] = useState(null);
  const wasSelected = useRef(selected);
  const panelFocused = useRef(false);
  const node = useRef(null);
  useEffect(() => {
    onTogglePopover(popoverActive);
  }, [popoverActive, onTogglePopover]);
  useEffect(() => {
    onToggleModal(Boolean(activeModalType));
  }, [activeModalType, onToggleModal]);
  useEffect(() => {
    return () => {
      onToggleModal(false);
      onTogglePopover(false);
    };
  }, [onToggleModal, onTogglePopover]);
  useEffect(() => {
    if (measuring) {
      return;
    }
    const itemHadFocus = focused || document.activeElement && document.activeElement.id === id;
    if (itemHadFocus && selected && panelID != null && !panelFocused.current) {
      focusPanelID(panelID);
      panelFocused.current = true;
    }
    if (selected && !wasSelected.current && panelID != null) {
      focusPanelID(panelID);
    } else if (focused && node.current != null && activeModalType == null && !disabled) {
      focusFirstFocusableNode(node.current);
    }
    wasSelected.current = selected;
  }, [focused, id, content, measuring, panelID, selected, activeModalType, disabled]);
  let tabIndex;
  if (selected && !siblingTabHasFocus && !measuring) {
    tabIndex = 0;
  } else if (focused && !measuring) {
    tabIndex = 0;
  } else {
    tabIndex = -1;
  }
  if (tabIndexOverride != null) {
    tabIndex = tabIndexOverride;
  }
  const renameAction = actions == null ? void 0 : actions.find((action2) => action2.type === "rename");
  const duplicateAction = actions == null ? void 0 : actions.find((action2) => action2.type === "duplicate");
  const deleteAction = actions == null ? void 0 : actions.find((action2) => action2.type === "delete");
  const togglePopoverActive = useCallback(() => {
    if (!(actions == null ? void 0 : actions.length)) {
      return;
    }
    setPopoverActive((popoverActive2) => !popoverActive2);
  }, [actions]);
  const handleClick = useCallback(() => {
    if (disabled) {
      return;
    }
    if (selected) {
      togglePopoverActive();
    } else {
      onAction == null ? void 0 : onAction();
    }
  }, [selected, onAction, togglePopoverActive, disabled]);
  const handleModalOpen = (type) => {
    setActiveModalType(type);
  };
  const handleModalClose = () => {
    setActiveModalType(null);
  };
  const handleSaveRenameModal = useCallback(async (value) => {
    var _a2;
    await ((_a2 = renameAction == null ? void 0 : renameAction.onPrimaryAction) == null ? void 0 : _a2.call(renameAction, value));
    setTimeout(() => {
      if (node.current) {
        focusFirstFocusableNode(node.current);
      }
    }, 250);
  }, [renameAction]);
  const handleConfirmDeleteView = useCallback(async () => {
    var _a2;
    await ((_a2 = deleteAction == null ? void 0 : deleteAction.onPrimaryAction) == null ? void 0 : _a2.call(deleteAction, content));
    handleModalClose();
  }, [deleteAction, content]);
  const handleSaveDuplicateModal = useCallback(async (duplicateName) => {
    var _a2;
    await ((_a2 = duplicateAction == null ? void 0 : duplicateAction.onPrimaryAction) == null ? void 0 : _a2.call(duplicateAction, duplicateName));
  }, [duplicateAction]);
  const actionContent = {
    rename: {
      icon: InfoIcon,
      content: i18n.translate("Polaris.Tabs.Tab.rename")
    },
    duplicate: {
      icon: DuplicateIcon,
      content: i18n.translate("Polaris.Tabs.Tab.duplicate")
    },
    edit: {
      icon: EditIcon,
      content: i18n.translate("Polaris.Tabs.Tab.edit")
    },
    "edit-columns": {
      icon: LayoutColumns3Icon,
      content: i18n.translate("Polaris.Tabs.Tab.editColumns")
    },
    delete: {
      icon: DeleteIcon,
      content: i18n.translate("Polaris.Tabs.Tab.delete"),
      destructive: true
    }
  };
  const formattedActions = actions == null ? void 0 : actions.map(({
    type,
    onAction: onAction2,
    onPrimaryAction,
    ...additionalOptions
  }) => {
    const isModalActivator = !type.includes("edit");
    return {
      ...actionContent[type],
      ...additionalOptions,
      onAction: () => {
        onAction2 == null ? void 0 : onAction2(content);
        togglePopoverActive();
        if (isModalActivator) {
          handleModalOpen(type);
        }
      }
    };
  });
  const handleKeyDown2 = useCallback((event) => {
    if (event.key === " ") {
      event.preventDefault();
      handleClick();
    }
  }, [handleClick]);
  const tabContainerClassNames = classNames(styles$j.TabContainer, selected && styles$j.Underline);
  const urlIfNotDisabledOrSelected = disabled || selected ? void 0 : url;
  const BaseComponent = urlIfNotDisabledOrSelected ? UnstyledLink : UnstyledButton;
  const tabClassName = classNames(styles$j.Tab, icon && styles$j["Tab-iconOnly"], popoverActive && styles$j["Tab-popoverActive"], selected && styles$j["Tab-active"], selected && (actions == null ? void 0 : actions.length) && styles$j["Tab-hasActions"]);
  const badgeMarkup = badge ? /* @__PURE__ */ React.createElement(Badge, {
    tone: selected ? void 0 : "new"
  }, badge) : null;
  const disclosureMarkup = selected && (actions == null ? void 0 : actions.length) ? /* @__PURE__ */ React.createElement("div", {
    className: classNames(styles$j.IconWrap)
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: ChevronDownIcon
  })) : null;
  const activator = /* @__PURE__ */ React.createElement(BaseComponent, {
    id,
    className: tabClassName,
    tabIndex,
    "aria-selected": selected,
    "aria-controls": panelID,
    "aria-label": accessibilityLabel,
    role: tabIndexOverride == null ? "tab" : void 0,
    disabled,
    url: urlIfNotDisabledOrSelected,
    onFocus,
    onMouseUp: handleMouseUpByBlurring,
    onClick: handleClick,
    onKeyDown: handleKeyDown2
  }, /* @__PURE__ */ React.createElement(InlineStack, {
    gap: "200",
    align: "center",
    blockAlign: "center",
    wrap: false
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "bodySm",
    fontWeight: "medium"
  }, icon ?? content), badgeMarkup), disclosureMarkup);
  const isPlainButton = !selected || !(actions == null ? void 0 : actions.length);
  const renameModal = renameAction ? /* @__PURE__ */ React.createElement(RenameModal, {
    name: content,
    open: activeModalType === "rename",
    onClose: handleModalClose,
    onClickPrimaryAction: handleSaveRenameModal,
    isModalLoading,
    viewNames
  }) : null;
  const duplicateModal = duplicateAction ? /* @__PURE__ */ React.createElement(DuplicateModal, {
    open: activeModalType === "duplicate",
    name: i18n.translate("Polaris.Tabs.Tab.copy", {
      name: content
    }),
    onClose: handleModalClose,
    onClickPrimaryAction: handleSaveDuplicateModal,
    isModalLoading,
    viewNames: viewNames || []
  }) : null;
  const deleteModal = deleteAction ? /* @__PURE__ */ React.createElement(Modal, {
    open: activeModalType === "delete",
    onClose: handleModalClose,
    primaryAction: {
      content: i18n.translate("Polaris.Tabs.Tab.deleteModal.delete"),
      onAction: handleConfirmDeleteView,
      destructive: true,
      disabled: isModalLoading
    },
    secondaryActions: [{
      content: i18n.translate("Polaris.Tabs.Tab.deleteModal.cancel"),
      onAction: handleModalClose
    }],
    title: i18n.translate("Polaris.Tabs.Tab.deleteModal.title"),
    instant: true
  }, /* @__PURE__ */ React.createElement(Modal.Section, null, i18n.translate("Polaris.Tabs.Tab.deleteModal.description", {
    viewName: content
  }))) : null;
  const markup = isPlainButton || disabled ? activator : /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Popover2, {
    active: popoverActive,
    activator,
    autofocusTarget: "first-node",
    onClose: togglePopoverActive
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$j.ActionListWrap
  }, /* @__PURE__ */ React.createElement(ActionList, {
    actionRole: "menuitem",
    items: formattedActions
  }))), renameModal, duplicateModal, deleteModal);
  if (icon) {
    return markup;
  }
  return /* @__PURE__ */ React.createElement("li", {
    className: tabContainerClassNames,
    ref: mergeRefs([node, ref]),
    role: "presentation"
  }, markup);
});
Tab.displayName = "Tab";
function focusPanelID(panelID) {
  const panel = document.getElementById(panelID);
  if (panel) {
    panel.focus({
      preventScroll: true
    });
  }
}
function mergeRefs(refs) {
  return (node) => {
    for (const ref of refs) {
      if (ref != null) {
        ref.current = node;
      }
    }
  };
}
const TabMeasurer = /* @__PURE__ */ memo(function TabMeasurer2({
  selected,
  tabs,
  activator,
  tabToFocus,
  siblingTabHasFocus,
  handleMeasurement: handleMeasurementProp
}) {
  const containerNode = useRef(null);
  const animationFrame = useRef(null);
  const handleMeasurement = useCallback(() => {
    if (animationFrame.current) {
      cancelAnimationFrame(animationFrame.current);
    }
    animationFrame.current = requestAnimationFrame(() => {
      if (!containerNode.current) {
        return;
      }
      const containerWidth = containerNode.current.offsetWidth - 20 - 28;
      const hiddenTabNodes = containerNode.current.children;
      const hiddenTabNodesArray = Array.from(hiddenTabNodes);
      const hiddenTabWidths = hiddenTabNodesArray.map((node) => {
        const buttonWidth = Math.ceil(node.getBoundingClientRect().width);
        return buttonWidth + 4;
      });
      const disclosureWidth = hiddenTabWidths.pop() || 0;
      handleMeasurementProp({
        containerWidth,
        disclosureWidth,
        hiddenTabWidths
      });
    });
  }, [handleMeasurementProp]);
  useEffect(() => {
    handleMeasurement();
  }, [handleMeasurement, tabs]);
  useComponentDidMount(() => {
    if (process.env.NODE_ENV === "development") {
      setTimeout(handleMeasurement, 0);
    }
  });
  const tabsMarkup = tabs.map((tab, index) => {
    return /* @__PURE__ */ React.createElement(Tab, {
      measuring: true,
      key: `$${tab.id}Hidden`,
      id: `${tab.id}Measurer`,
      siblingTabHasFocus,
      focused: index === tabToFocus,
      selected: index === selected,
      url: tab.url,
      content: tab.content,
      onTogglePopover: noop$2,
      onToggleModal: noop$2
    });
  });
  const classname = classNames(styles$j.Tabs, styles$j.TabsMeasurer);
  useEventListener("resize", handleMeasurement);
  return /* @__PURE__ */ React.createElement("div", {
    className: classname,
    ref: containerNode
  }, tabsMarkup, activator);
});
function noop$2() {
}
function Panel({
  hidden,
  id,
  tabID,
  children
}) {
  const className = classNames(styles$j.Panel, hidden && styles$j["Panel-hidden"]);
  return /* @__PURE__ */ React.createElement("div", {
    className,
    id,
    role: "tabpanel",
    "aria-labelledby": tabID,
    tabIndex: -1
  }, children);
}
const Item$2 = /* @__PURE__ */ memo(function Item({
  id,
  focused,
  children,
  url,
  accessibilityLabel,
  onClick = noop$1
}) {
  const focusedNode = useRef(null);
  useEffect(() => {
    if (focusedNode.current && focusedNode.current instanceof HTMLElement && focused) {
      focusedNode.current.focus();
    }
  }, [focusedNode, focused]);
  const classname = classNames(styles$j.Item);
  const sharedProps = {
    id,
    ref: focusedNode,
    onClick,
    className: classname,
    "aria-selected": false,
    "aria-label": accessibilityLabel
  };
  const markup = url ? /* @__PURE__ */ React.createElement(UnstyledLink, Object.assign({}, sharedProps, {
    url
  }), children) : /* @__PURE__ */ React.createElement("button", Object.assign({}, sharedProps, {
    ref: focusedNode,
    type: "button"
  }), children);
  return /* @__PURE__ */ React.createElement("li", null, markup);
});
function noop$1() {
}
function List$1({
  focusIndex,
  disclosureTabs,
  onClick = noop,
  onKeyPress = noop
}) {
  const tabs = disclosureTabs.map(({
    id,
    content,
    ...tabProps
  }, index) => {
    return /* @__PURE__ */ React.createElement(Item$2, Object.assign({
      key: id
    }, tabProps, {
      id,
      focused: index === focusIndex,
      onClick: onClick.bind(null, id)
    }), content);
  });
  return /* @__PURE__ */ React.createElement("ul", {
    className: styles$j.List,
    onKeyDown: handleKeyDown,
    onKeyUp: onKeyPress
  }, tabs);
}
function noop() {
}
function handleKeyDown(event) {
  const {
    key
  } = event;
  if (key === "ArrowLeft" || key === "ArrowRight") {
    event.preventDefault();
    event.stopPropagation();
  }
}
const MAX_VIEW_NAME_LENGTH = 40;
function CreateViewModal({
  activator,
  open,
  onClose,
  onClickPrimaryAction,
  onClickSecondaryAction,
  viewNames
}) {
  const i18n = useI18n();
  const [value, setValue] = useState("");
  const [loading, setLoading] = useState(false);
  const container = useRef(null);
  const isTouchDevice = useIsTouchDevice();
  const hasSameNameError = viewNames.some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase());
  const isPrimaryActionDisabled = !value || hasSameNameError || loading || value.length > MAX_VIEW_NAME_LENGTH;
  useEffect(() => {
    if (!container.current || isTouchDevice) return;
    if (open) {
      focusFirstFocusableNode(container.current);
      const timeout = setTimeout(() => {
        if (!container.current) return;
        focusFirstFocusableNode(container.current);
      }, 50);
      return () => clearTimeout(timeout);
    }
  }, [open, isTouchDevice]);
  const handleChange = useCallback((newValue) => {
    setValue(newValue);
  }, []);
  async function handlePrimaryAction() {
    if (hasSameNameError || isPrimaryActionDisabled) {
      return;
    }
    setLoading(true);
    await onClickPrimaryAction(value);
    setLoading(false);
    setValue("");
    onClose();
  }
  function handleSecondaryAction() {
    onClickSecondaryAction == null ? void 0 : onClickSecondaryAction();
    setValue("");
    onClose();
  }
  return /* @__PURE__ */ React.createElement(Modal, {
    activator,
    open,
    onClose,
    title: i18n.translate("Polaris.Tabs.CreateViewModal.title"),
    primaryAction: {
      content: i18n.translate("Polaris.Tabs.CreateViewModal.create"),
      onAction: handlePrimaryAction,
      disabled: isPrimaryActionDisabled
    },
    secondaryActions: [{
      content: i18n.translate("Polaris.Tabs.CreateViewModal.cancel"),
      onAction: handleSecondaryAction
    }]
  }, /* @__PURE__ */ React.createElement(Modal.Section, null, /* @__PURE__ */ React.createElement(Form, {
    onSubmit: handlePrimaryAction
  }, /* @__PURE__ */ React.createElement(FormLayout, null, /* @__PURE__ */ React.createElement("div", {
    ref: container
  }, /* @__PURE__ */ React.createElement(TextField, {
    label: i18n.translate("Polaris.Tabs.CreateViewModal.label"),
    value,
    onChange: handleChange,
    autoComplete: "off",
    maxLength: MAX_VIEW_NAME_LENGTH,
    showCharacterCount: true,
    error: hasSameNameError ? i18n.translate("Polaris.Tabs.CreateViewModal.errors.sameName", {
      name: value
    }) : void 0
  }))))));
}
const CREATE_NEW_VIEW_ID = "create-new-view";
const Tabs = ({
  tabs,
  children,
  selected,
  newViewAccessibilityLabel,
  canCreateNewView,
  disabled,
  onCreateNewView,
  onSelect,
  fitted,
  disclosureText
}) => {
  const i18n = useI18n();
  const {
    mdDown
  } = useBreakpoints();
  const scrollRef = useRef(null);
  const wrapRef = useRef(null);
  const selectedTabRef = useRef(null);
  const [state, setState] = useReducer((data, partialData) => {
    return {
      ...data,
      ...partialData
    };
  }, {
    disclosureWidth: 0,
    containerWidth: Infinity,
    tabWidths: [],
    visibleTabs: [],
    hiddenTabs: [],
    showDisclosure: false,
    tabToFocus: -1,
    isNewViewModalActive: false,
    modalSubmitted: false,
    isTabsFocused: false,
    isTabPopoverOpen: false,
    isTabModalOpen: false
  });
  const {
    tabToFocus,
    visibleTabs,
    hiddenTabs,
    showDisclosure,
    isNewViewModalActive,
    modalSubmitted,
    disclosureWidth,
    tabWidths,
    containerWidth,
    isTabsFocused,
    isTabModalOpen,
    isTabPopoverOpen
  } = state;
  const prevModalOpen = usePrevious(isTabModalOpen);
  const prevPopoverOpen = usePrevious(isTabPopoverOpen);
  useEffect(() => {
    const hasModalClosed = prevModalOpen && !isTabModalOpen;
    const hasPopoverClosed = prevPopoverOpen && !isTabPopoverOpen;
    if (hasModalClosed) {
      setState({
        isTabsFocused: true,
        tabToFocus: selected
      });
    } else if (hasPopoverClosed && !isTabModalOpen) {
      setState({
        isTabsFocused: true,
        tabToFocus: selected
      });
    }
  }, [prevPopoverOpen, isTabPopoverOpen, prevModalOpen, isTabModalOpen, selected, tabToFocus]);
  const handleTogglePopover = useCallback((isOpen) => setState({
    isTabPopoverOpen: isOpen
  }), []);
  const handleToggleModal = useCallback((isOpen) => setState({
    isTabModalOpen: isOpen
  }), []);
  const handleCloseNewViewModal = () => {
    setState({
      isNewViewModalActive: false
    });
  };
  const handleSaveNewViewModal = async (value) => {
    if (!onCreateNewView) {
      return false;
    }
    const hasExecuted = await (onCreateNewView == null ? void 0 : onCreateNewView(value));
    if (hasExecuted) {
      setState({
        modalSubmitted: true
      });
    }
    return hasExecuted;
  };
  const handleClickNewTab = () => {
    setState({
      isNewViewModalActive: true
    });
  };
  const handleTabClick = useCallback((id) => {
    const tab = tabs.find((aTab) => aTab.id === id);
    if (tab == null) {
      return null;
    }
    const selectedIndex = tabs.indexOf(tab);
    onSelect == null ? void 0 : onSelect(selectedIndex);
  }, [tabs, onSelect]);
  const renderTabMarkup = useCallback((tab, index) => {
    const handleClick = () => {
      var _a2;
      handleTabClick(tab.id);
      (_a2 = tab.onAction) == null ? void 0 : _a2.call(tab);
    };
    const viewNames2 = tabs.map(({
      content
    }) => content);
    const tabPanelID = tab.panelID || `${tab.id}-panel`;
    return /* @__PURE__ */ React.createElement(Tab, Object.assign({}, tab, {
      key: `${index}-${tab.id}`,
      id: tab.id,
      panelID: children ? tabPanelID : void 0,
      disabled: disabled || tab.disabled,
      siblingTabHasFocus: tabToFocus > -1,
      focused: index === tabToFocus,
      selected: index === selected,
      onAction: handleClick,
      accessibilityLabel: tab.accessibilityLabel,
      url: tab.url,
      content: tab.content,
      onToggleModal: handleToggleModal,
      onTogglePopover: handleTogglePopover,
      viewNames: viewNames2,
      ref: index === selected ? selectedTabRef : null
    }));
  }, [disabled, handleTabClick, tabs, children, selected, tabToFocus, handleToggleModal, handleTogglePopover]);
  const handleFocus = useCallback((event) => {
    const target = event.target;
    const isItem = target.classList.contains(styles$j.Item);
    const isInNaturalDOMOrder = target.closest(`[data-tabs-focus-catchment]`) || isItem;
    const isDisclosureActivator = target.classList.contains(styles$j.DisclosureActivator);
    if (isDisclosureActivator || !isInNaturalDOMOrder) {
      return;
    }
    setState({
      isTabsFocused: true
    });
  }, []);
  const handleBlur = useCallback((event) => {
    var _a2, _b, _c;
    const target = event.target;
    const relatedTarget = event.relatedTarget;
    const isInNaturalDOMOrder = (_a2 = relatedTarget == null ? void 0 : relatedTarget.closest) == null ? void 0 : _a2.call(relatedTarget, `.${styles$j.Tabs}`);
    const targetIsATab = (_c = (_b = target == null ? void 0 : target.classList) == null ? void 0 : _b.contains) == null ? void 0 : _c.call(_b, styles$j.Tab);
    const focusReceiverIsAnItem = relatedTarget == null ? void 0 : relatedTarget.classList.contains(styles$j.Item);
    if (!relatedTarget && !isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem) {
      setState({
        tabToFocus: -1
      });
      return;
    }
    if (!isInNaturalDOMOrder && !isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem) {
      setState({
        tabToFocus: -1
      });
      return;
    }
    setState({
      isTabsFocused: false
    });
  }, [isTabModalOpen]);
  const handleKeyDown2 = (event) => {
    if (isTabPopoverOpen || isTabModalOpen || isNewViewModalActive) {
      return;
    }
    const {
      key
    } = event;
    if (key === "ArrowLeft" || key === "ArrowRight") {
      event.preventDefault();
      event.stopPropagation();
    }
  };
  useEffect(() => {
    const {
      visibleTabs: visibleTabs2,
      hiddenTabs: hiddenTabs2
    } = getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth);
    setState({
      visibleTabs: visibleTabs2,
      hiddenTabs: hiddenTabs2
    });
  }, [containerWidth, disclosureWidth, tabs, selected, tabWidths, setState]);
  const moveToSelectedTab = useCallback(() => {
    var _a2;
    const activeButton = (_a2 = selectedTabRef.current) == null ? void 0 : _a2.querySelector(`.${styles$j["Tab-active"]}`);
    if (activeButton) {
      moveToActiveTab(activeButton.offsetLeft);
    }
  }, []);
  useEffect(() => {
    if (mdDown) {
      moveToSelectedTab();
    }
  }, [moveToSelectedTab, selected, mdDown]);
  useEffect(() => {
    if (isTabsFocused && !showDisclosure) {
      const tabToFocus2 = selected;
      setState({
        tabToFocus: tabToFocus2
      });
    }
  }, [isTabsFocused, selected, setState, showDisclosure]);
  const handleKeyPress = (event) => {
    const {
      showDisclosure: showDisclosure2,
      visibleTabs: visibleTabs2,
      hiddenTabs: hiddenTabs2,
      tabToFocus: tabToFocus2,
      isNewViewModalActive: isNewViewModalActive2
    } = state;
    if (isTabModalOpen || isTabPopoverOpen || isNewViewModalActive2) {
      return;
    }
    const key = event.key;
    const tabsArrayInOrder = showDisclosure2 || mdDown ? visibleTabs2.concat(hiddenTabs2) : [...visibleTabs2];
    let newFocus = tabsArrayInOrder.indexOf(tabToFocus2);
    if (key === "ArrowRight") {
      newFocus += 1;
      if (newFocus === tabsArrayInOrder.length) {
        newFocus = 0;
      }
    }
    if (key === "ArrowLeft") {
      if (newFocus === -1 || newFocus === 0) {
        newFocus = tabsArrayInOrder.length - 1;
      } else {
        newFocus -= 1;
      }
    }
    const buttonToFocus = tabsArrayInOrder[newFocus];
    if (buttonToFocus != null) {
      setState({
        tabToFocus: buttonToFocus
      });
    }
  };
  const handleDisclosureActivatorClick = () => {
    setState({
      showDisclosure: !showDisclosure,
      tabToFocus: hiddenTabs[0]
    });
  };
  const handleClose = () => {
    setState({
      showDisclosure: false
    });
  };
  const handleMeasurement = useCallback((measurements) => {
    const {
      hiddenTabWidths: tabWidths2,
      containerWidth: containerWidth2,
      disclosureWidth: disclosureWidth2
    } = measurements;
    const {
      visibleTabs: visibleTabs2,
      hiddenTabs: hiddenTabs2
    } = getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth2, tabWidths2, containerWidth2);
    setState({
      visibleTabs: visibleTabs2,
      hiddenTabs: hiddenTabs2,
      disclosureWidth: disclosureWidth2,
      containerWidth: containerWidth2,
      tabWidths: tabWidths2
    });
  }, [tabs, selected, setState]);
  const handleListTabClick = (id) => {
    handleTabClick(id);
    handleClose();
    setState({
      isTabsFocused: true
    });
  };
  const moveToActiveTab = (offsetLeft) => {
    setTimeout(() => {
      var _a2, _b;
      if (scrollRef.current && typeof scrollRef.current.scroll === "function") {
        const scrollRefOffset = ((_a2 = wrapRef == null ? void 0 : wrapRef.current) == null ? void 0 : _a2.offsetLeft) || 0;
        (_b = scrollRef == null ? void 0 : scrollRef.current) == null ? void 0 : _b.scroll({
          left: offsetLeft - scrollRefOffset
        });
      }
    }, 0);
  };
  const createViewA11yLabel = newViewAccessibilityLabel || i18n.translate("Polaris.Tabs.newViewAccessibilityLabel");
  const tabsToShow = mdDown ? [...visibleTabs, ...hiddenTabs] : visibleTabs;
  const tabsMarkup = tabsToShow.sort((tabA, tabB) => tabA - tabB).filter((tabIndex) => tabs[tabIndex]).map((tabIndex) => renderTabMarkup(tabs[tabIndex], tabIndex));
  const disclosureActivatorVisible = visibleTabs.length < tabs.length && !mdDown;
  const classname = classNames(styles$j.Tabs, fitted && styles$j.fitted, disclosureActivatorVisible && styles$j.fillSpace);
  const wrapperClassNames = classNames(styles$j.Wrapper, canCreateNewView && styles$j.WrapperWithNewButton);
  const disclosureTabClassName = classNames(styles$j.DisclosureTab, disclosureActivatorVisible && styles$j["DisclosureTab-visible"]);
  const disclosureButtonClassName = classNames(styles$j.DisclosureActivator);
  const disclosureButtonContent = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "bodySm",
    fontWeight: "medium"
  }, disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel")), /* @__PURE__ */ React.createElement("div", {
    className: classNames(styles$j.IconWrap, disclosureActivatorVisible && showDisclosure && styles$j["IconWrap-open"])
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: ChevronDownIcon,
    tone: "subdued"
  })));
  const disclosureButton = /* @__PURE__ */ React.createElement(UnstyledButton, {
    type: "button",
    className: disclosureButtonClassName,
    onClick: handleDisclosureActivatorClick,
    "aria-label": disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel"),
    disabled
  }, disclosureButtonContent);
  const activator = disclosureButton;
  const disclosureTabs = hiddenTabs.map((tabIndex) => tabs[tabIndex]);
  const viewNames = tabs.map(({
    content
  }) => content);
  const tabMeasurer = /* @__PURE__ */ React.createElement(TabMeasurer, {
    tabToFocus,
    activator,
    selected,
    tabs,
    siblingTabHasFocus: tabToFocus > -1,
    handleMeasurement
  });
  const newTab = /* @__PURE__ */ React.createElement(Tab, {
    id: CREATE_NEW_VIEW_ID,
    content: createViewA11yLabel,
    actions: [],
    onAction: handleClickNewTab,
    onFocus: () => {
      if (modalSubmitted) {
        setState({
          tabToFocus: selected,
          modalSubmitted: false
        });
      }
    },
    icon: /* @__PURE__ */ React.createElement(Icon, {
      source: PlusIcon,
      accessibilityLabel: createViewA11yLabel
    }),
    disabled,
    onTogglePopover: handleTogglePopover,
    onToggleModal: handleToggleModal,
    tabIndexOverride: 0
  });
  const panelMarkup = children ? tabs.map((_tab, index) => {
    return selected === index ? /* @__PURE__ */ React.createElement(Panel, {
      id: tabs[index].panelID || `${tabs[index].id}-panel`,
      tabID: tabs[index].id,
      key: tabs[index].id
    }, children) : /* @__PURE__ */ React.createElement(Panel, {
      id: tabs[index].panelID || `${tabs[index].id}-panel`,
      tabID: tabs[index].id,
      key: tabs[index].id,
      hidden: true
    });
  }) : null;
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$j.Outer
  }, /* @__PURE__ */ React.createElement(Box, {
    padding: {
      md: "200"
    }
  }, tabMeasurer, /* @__PURE__ */ React.createElement("div", {
    className: wrapperClassNames,
    ref: scrollRef
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$j.ButtonWrapper,
    ref: wrapRef
  }, /* @__PURE__ */ React.createElement("ul", {
    role: tabsMarkup.length > 0 ? "tablist" : void 0,
    className: classname,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onKeyDown: handleKeyDown2,
    onKeyUp: handleKeyPress,
    "data-tabs-focus-catchment": true
  }, tabsMarkup, mdDown || tabsToShow.length === 0 ? null : /* @__PURE__ */ React.createElement("li", {
    className: disclosureTabClassName,
    role: "presentation"
  }, /* @__PURE__ */ React.createElement(Popover2, {
    preferredPosition: "below",
    preferredAlignment: "left",
    activator,
    active: disclosureActivatorVisible && showDisclosure,
    onClose: handleClose,
    autofocusTarget: "first-node"
  }, /* @__PURE__ */ React.createElement(List$1, {
    focusIndex: hiddenTabs.indexOf(tabToFocus),
    disclosureTabs,
    onClick: handleListTabClick,
    onKeyPress: handleKeyPress
  })))), canCreateNewView && tabsToShow.length > 0 ? /* @__PURE__ */ React.createElement("div", {
    className: styles$j.NewTab
  }, /* @__PURE__ */ React.createElement(CreateViewModal, {
    open: isNewViewModalActive,
    onClose: handleCloseNewViewModal,
    onClickPrimaryAction: handleSaveNewViewModal,
    viewNames,
    activator: disabled ? newTab : /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Tooltip, {
      content: i18n.translate("Polaris.Tabs.newViewTooltip"),
      preferredPosition: "above",
      hoverDelay: 400
    }, newTab))
  })) : null))), panelMarkup);
};
var styles$i = {
  "Layout": "Polaris-Layout",
  "Section": "Polaris-Layout__Section",
  "Section-fullWidth": "Polaris-Layout__Section--fullWidth",
  "Section-oneHalf": "Polaris-Layout__Section--oneHalf",
  "Section-oneThird": "Polaris-Layout__Section--oneThird",
  "AnnotatedSection": "Polaris-Layout__AnnotatedSection",
  "AnnotationWrapper": "Polaris-Layout__AnnotationWrapper",
  "AnnotationContent": "Polaris-Layout__AnnotationContent",
  "Annotation": "Polaris-Layout__Annotation"
};
var styles$h = {
  "TextContainer": "Polaris-TextContainer",
  "spacingTight": "Polaris-TextContainer--spacingTight",
  "spacingLoose": "Polaris-TextContainer--spacingLoose"
};
function TextContainer({
  spacing,
  children
}) {
  const className = classNames(styles$h.TextContainer, spacing && styles$h[variationName("spacing", spacing)]);
  return /* @__PURE__ */ React.createElement("div", {
    className
  }, children);
}
function AnnotatedSection({
  children,
  title,
  description,
  id
}) {
  const descriptionMarkup = typeof description === "string" ? /* @__PURE__ */ React.createElement(Text, {
    as: "p",
    variant: "bodyMd"
  }, description) : description;
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$i.AnnotatedSection
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$i.AnnotationWrapper
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$i.Annotation
  }, /* @__PURE__ */ React.createElement(TextContainer, {
    spacing: "tight"
  }, /* @__PURE__ */ React.createElement(Text, {
    id,
    variant: "headingMd",
    as: "h2"
  }, title), descriptionMarkup && /* @__PURE__ */ React.createElement(Box, {
    color: "text-secondary"
  }, descriptionMarkup))), /* @__PURE__ */ React.createElement("div", {
    className: styles$i.AnnotationContent
  }, children)));
}
function Section$1({
  children,
  variant
}) {
  const className = classNames(styles$i.Section, styles$i[`Section-${variant}`]);
  return /* @__PURE__ */ React.createElement("div", {
    className
  }, children);
}
const Layout = function Layout2({
  sectioned,
  children
}) {
  const content = sectioned ? /* @__PURE__ */ React.createElement(Section$1, null, children) : children;
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$i.Layout
  }, content);
};
Layout.AnnotatedSection = AnnotatedSection;
Layout.Section = Section$1;
var styles$g = {
  "Tag": "Polaris-Tag",
  "disabled": "Polaris-Tag--disabled",
  "clickable": "Polaris-Tag--clickable",
  "linkable": "Polaris-Tag--linkable",
  "removable": "Polaris-Tag--removable",
  "Button": "Polaris-Tag__Button",
  "Link": "Polaris-Tag__Link",
  "segmented": "Polaris-Tag--segmented",
  "Text": "Polaris-Tag__Text",
  "sizeLarge": "Polaris-Tag--sizeLarge",
  "overlay": "Polaris-Tag--overlay"
};
function Tag({
  children,
  disabled = false,
  onClick,
  onRemove,
  accessibilityLabel,
  url,
  size
}) {
  const i18n = useI18n();
  const segmented = onRemove && url;
  const className = classNames(styles$g.Tag, disabled && styles$g.disabled, onClick && styles$g.clickable, onRemove && styles$g.removable, url && !disabled && styles$g.linkable, segmented && styles$g.segmented, size && styles$g[variationName("size", size)]);
  let tagTitle = accessibilityLabel;
  if (!tagTitle) {
    tagTitle = typeof children === "string" ? children : void 0;
  }
  const tagText = /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "bodySm",
    truncate: true
  }, /* @__PURE__ */ React.createElement("span", {
    title: tagTitle,
    className: styles$g.Text
  }, children));
  if (onClick) {
    return /* @__PURE__ */ React.createElement("button", {
      type: "button",
      disabled,
      className,
      onClick
    }, tagText);
  }
  const ariaLabel = i18n.translate("Polaris.Tag.ariaLabel", {
    children: tagTitle || ""
  });
  const removeButton = onRemove ? /* @__PURE__ */ React.createElement("button", {
    type: "button",
    "aria-label": ariaLabel,
    className: classNames(styles$g.Button, segmented && styles$g.segmented),
    onClick: onRemove,
    onMouseUp: handleMouseUpByBlurring,
    disabled
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: XSmallIcon
  })) : null;
  const tagContent = url && !disabled ? /* @__PURE__ */ React.createElement("a", {
    className: classNames(styles$g.Link, segmented && styles$g.segmented),
    href: url
  }, tagText) : tagText;
  return /* @__PURE__ */ React.createElement("span", {
    className,
    "aria-disabled": disabled
  }, tagContent, size === "large" && /* @__PURE__ */ React.createElement("span", {
    className: styles$g.overlay
  }), removeButton);
}
var styles$f = {
  "Link": "Polaris-Link",
  "monochrome": "Polaris-Link--monochrome",
  "removeUnderline": "Polaris-Link--removeUnderline"
};
function Link({
  url,
  children,
  onClick,
  external,
  target,
  id,
  monochrome,
  removeUnderline,
  accessibilityLabel,
  dataPrimaryLink
}) {
  return /* @__PURE__ */ React.createElement(BannerContext.Consumer, null, (BannerContext2) => {
    const shouldBeMonochrome = monochrome || BannerContext2;
    const className = classNames(styles$f.Link, shouldBeMonochrome && styles$f.monochrome, removeUnderline && styles$f.removeUnderline);
    return url ? /* @__PURE__ */ React.createElement(UnstyledLink, {
      onClick,
      className,
      url,
      external,
      target,
      id,
      "aria-label": accessibilityLabel,
      "data-primary-link": dataPrimaryLink
    }, children) : /* @__PURE__ */ React.createElement("button", {
      type: "button",
      onClick,
      className,
      id,
      "aria-label": accessibilityLabel,
      "data-primary-link": dataPrimaryLink
    }, children);
  });
}
var styles$e = {
  "List": "Polaris-List",
  "typeNumber": "Polaris-List--typeNumber",
  "Item": "Polaris-List__Item",
  "spacingLoose": "Polaris-List--spacingLoose"
};
function Item$1({
  children
}) {
  return /* @__PURE__ */ React.createElement("li", {
    className: styles$e.Item
  }, children);
}
const List = function List2({
  children,
  gap = "loose",
  type = "bullet"
}) {
  const className = classNames(styles$e.List, gap && styles$e[variationName("spacing", gap)], type && styles$e[variationName("type", type)]);
  const ListElement = type === "bullet" ? "ul" : "ol";
  return /* @__PURE__ */ React.createElement(ListElement, {
    className
  }, children);
};
List.Item = Item$1;
const NavigationContext = /* @__PURE__ */ createContext({
  location: ""
});
var styles$d = {
  "Navigation": "Polaris-Navigation",
  "ContextControl": "Polaris-Navigation__ContextControl",
  "PrimaryNavigation": "Polaris-Navigation__PrimaryNavigation",
  "LogoContainer": "Polaris-Navigation__LogoContainer",
  "hasLogoSuffix": "Polaris-Navigation--hasLogoSuffix",
  "Logo": "Polaris-Navigation__Logo",
  "LogoLink": "Polaris-Navigation__LogoLink",
  "Item": "Polaris-Navigation__Item",
  "Icon-resized": "Polaris-Navigation__Icon--resized",
  "Badge": "Polaris-Navigation__Badge",
  "ItemInnerWrapper": "Polaris-Navigation__ItemInnerWrapper",
  "ItemWrapper": "Polaris-Navigation__ItemWrapper",
  "ItemInnerDisabled": "Polaris-Navigation__ItemInnerDisabled",
  "ItemInnerWrapper-display-actions-on-hover": "Polaris-Navigation--itemInnerWrapperDisplayActionsOnHover",
  "SecondaryActions": "Polaris-Navigation__SecondaryActions",
  "ItemInnerWrapper-selected": "Polaris-Navigation__ItemInnerWrapper--selected",
  "Text": "Polaris-Navigation__Text",
  "ItemInnerWrapper-open": "Polaris-Navigation__ItemInnerWrapper--open",
  "Item-selected": "Polaris-Navigation__Item--selected",
  "Item-child-active": "Polaris-Navigation--itemChildActive",
  "Item-disabled": "Polaris-Navigation__Item--disabled",
  "Icon": "Polaris-Navigation__Icon",
  "ListItem-hasAction": "Polaris-Navigation__ListItem--hasAction",
  "subNavigationActive": "Polaris-Navigation--subNavigationActive",
  "ListItem": "Polaris-Navigation__ListItem",
  "RollupSection": "Polaris-Navigation__RollupSection",
  "SecondaryNavigation": "Polaris-Navigation__SecondaryNavigation",
  "Text-truncated": "Polaris-Navigation__Text--truncated",
  "ItemWithFloatingActions": "Polaris-Navigation__ItemWithFloatingActions",
  "SecondaryAction": "Polaris-Navigation__SecondaryAction",
  "List": "Polaris-Navigation__List",
  "Item-line": "Polaris-Navigation__Item--line",
  "Item-line-pointer": "Polaris-Navigation--itemLinePointer",
  "Item-hover-pointer": "Polaris-Navigation--itemHoverPointer",
  "SecondaryNavigation-noIcon": "Polaris-Navigation__SecondaryNavigation--noIcon",
  "Section": "Polaris-Navigation__Section",
  "Section-fill": "Polaris-Navigation__Section--fill",
  "Section-withSeparator": "Polaris-Navigation__Section--withSeparator",
  "SectionHeading": "Polaris-Navigation__SectionHeading",
  "Action": "Polaris-Navigation__Action",
  "RollupToggle": "Polaris-Navigation__RollupToggle",
  "Indicator": "Polaris-Navigation__Indicator",
  "SecondaryNavigationOpen": "Polaris-Navigation__SecondaryNavigationOpen"
};
let MatchState;
(function(MatchState2) {
  MatchState2[MatchState2["MatchForced"] = 0] = "MatchForced";
  MatchState2[MatchState2["MatchUrl"] = 1] = "MatchUrl";
  MatchState2[MatchState2["MatchPaths"] = 2] = "MatchPaths";
  MatchState2[MatchState2["Excluded"] = 3] = "Excluded";
  MatchState2[MatchState2["NoMatch"] = 4] = "NoMatch";
})(MatchState || (MatchState = {}));
function SecondaryNavigation({
  ItemComponent,
  icon,
  longestMatch,
  subNavigationItems,
  showExpanded,
  truncateText,
  secondaryNavigationId
}) {
  const uid = useId();
  const {
    onNavigationDismiss
  } = useContext(NavigationContext);
  const [hoveredItem, setHoveredItem] = useState();
  const matchedItemPosition = subNavigationItems.findIndex((item) => isEqual(item, longestMatch));
  const hoveredItemPosition = subNavigationItems.findIndex((item) => isEqual(item, hoveredItem));
  return /* @__PURE__ */ React.createElement("div", {
    className: classNames(styles$d.SecondaryNavigation, showExpanded && styles$d.SecondaryNavigationOpen, !icon && styles$d["SecondaryNavigation-noIcon"])
  }, /* @__PURE__ */ React.createElement(Collapsible, {
    id: secondaryNavigationId || uid,
    open: showExpanded,
    transition: false
  }, /* @__PURE__ */ React.createElement("ul", {
    className: styles$d.List
  }, subNavigationItems.map((item, index) => {
    const {
      label,
      ...rest
    } = item;
    const onClick = () => {
      onNavigationDismiss == null ? void 0 : onNavigationDismiss();
      if (item.onClick && item.onClick !== onNavigationDismiss) {
        item.onClick();
      }
    };
    const shouldShowVerticalLine = index < matchedItemPosition;
    return /* @__PURE__ */ React.createElement(ItemComponent, Object.assign({
      key: label
    }, rest, {
      label,
      showVerticalLine: shouldShowVerticalLine,
      showVerticalHoverPointer: index === hoveredItemPosition,
      level: 1,
      onMouseEnter: item.disabled ? void 0 : () => setHoveredItem(item),
      onMouseLeave: item.disabled ? void 0 : () => setHoveredItem(void 0),
      matches: isEqual(item, longestMatch),
      onClick,
      truncateText
    }));
  }))));
}
const MAX_SECONDARY_ACTIONS = 2;
const TOOLTIP_HOVER_DELAY = 1e3;
function Item2({
  url,
  icon: baseIcon,
  matchedItemIcon,
  label,
  subNavigationItems = [],
  secondaryAction,
  secondaryActions,
  displayActionsOnHover,
  disabled,
  onClick,
  accessibilityLabel,
  selected: selectedOverride,
  badge,
  new: isNew,
  matches: matches2,
  exactMatch,
  matchPaths,
  excludePaths,
  external,
  onToggleExpandedState,
  expanded,
  shouldResizeIcon,
  truncateText,
  showVerticalLine,
  showVerticalHoverPointer,
  level = 0,
  onMouseEnter,
  onMouseLeave
}) {
  const i18n = useI18n();
  const {
    isNavigationCollapsed
  } = useMediaQuery();
  const secondaryNavigationId = useId();
  const {
    location,
    onNavigationDismiss
  } = useContext(NavigationContext);
  const navTextRef = useRef(null);
  const [isTruncated, setIsTruncated] = useState(false);
  useEffect(() => {
    if (!isNavigationCollapsed && expanded) {
      onToggleExpandedState == null ? void 0 : onToggleExpandedState();
    }
  }, [expanded, isNavigationCollapsed, onToggleExpandedState]);
  useIsomorphicLayoutEffect(() => {
    const navTextNode = navTextRef.current;
    if (truncateText && navTextNode) {
      setIsTruncated(navTextNode.scrollHeight > navTextNode.clientHeight);
    }
  }, [truncateText]);
  const tabIndex = disabled ? -1 : 0;
  const hasNewChild = subNavigationItems.filter((subNavigationItem) => subNavigationItem.new).length > 0;
  const indicatorMarkup = hasNewChild ? /* @__PURE__ */ React.createElement("span", {
    className: styles$d.Indicator
  }, /* @__PURE__ */ React.createElement(Indicator, {
    pulse: true
  })) : null;
  const matchState = matchStateForItem({
    url,
    matches: matches2,
    exactMatch,
    matchPaths,
    excludePaths
  }, location);
  const matchingSubNavigationItems = subNavigationItems.filter((item) => {
    const subMatchState = matchStateForItem(item, location);
    return subMatchState === MatchState.MatchForced || subMatchState === MatchState.MatchUrl || subMatchState === MatchState.MatchPaths;
  });
  const childIsActive = matchingSubNavigationItems.length > 0;
  const selected = selectedOverride == null ? matchState === MatchState.MatchForced || matchState === MatchState.MatchUrl || matchState === MatchState.MatchPaths : selectedOverride;
  const icon = selected || childIsActive ? matchedItemIcon ?? baseIcon : baseIcon;
  const iconMarkup = icon ? /* @__PURE__ */ React.createElement("div", {
    className: classNames(styles$d.Icon, shouldResizeIcon && styles$d["Icon-resized"])
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: icon
  })) : null;
  let badgeMarkup = null;
  if (isNew) {
    badgeMarkup = /* @__PURE__ */ React.createElement(Badge, {
      tone: "new"
    }, i18n.translate("Polaris.Badge.TONE_LABELS.new"));
  } else if (typeof badge === "string") {
    badgeMarkup = /* @__PURE__ */ React.createElement(Badge, {
      tone: "new"
    }, badge);
  } else {
    badgeMarkup = badge;
  }
  const wrappedBadgeMarkup = badgeMarkup == null ? null : /* @__PURE__ */ React.createElement("div", {
    className: styles$d.Badge
  }, badgeMarkup);
  const tone = !showVerticalHoverPointer && !matches2 && level !== 0 ? "subdued" : void 0;
  let fontWeight = "regular";
  if ((matches2 || selected) && !childIsActive) {
    fontWeight = "semibold";
  } else if (level === 0 || showVerticalHoverPointer) {
    fontWeight = "medium";
  }
  const itemLabelMarkup = /* @__PURE__ */ React.createElement("span", {
    className: classNames(styles$d.Text, truncateText && styles$d["Text-truncated"]),
    ref: navTextRef
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "bodyMd",
    tone,
    fontWeight
  }, label), indicatorMarkup);
  if (url == null) {
    const className2 = classNames(styles$d.Item, disabled && styles$d["Item-disabled"], selectedOverride && styles$d["Item-selected"]);
    return /* @__PURE__ */ React.createElement("li", {
      className: styles$d.ListItem
    }, /* @__PURE__ */ React.createElement("div", {
      className: styles$d.ItemWrapper
    }, /* @__PURE__ */ React.createElement("div", {
      className: classNames(styles$d.ItemInnerWrapper, disabled && styles$d.ItemInnerDisabled, selectedOverride && styles$d["ItemInnerWrapper-selected"])
    }, /* @__PURE__ */ React.createElement("button", {
      type: "button",
      className: className2,
      disabled,
      "aria-disabled": disabled,
      "aria-label": accessibilityLabel,
      onClick: getClickHandler(onClick)
    }, iconMarkup, itemLabelMarkup, wrappedBadgeMarkup))));
  }
  if (secondaryAction && process.env.NODE_ENV === "development") {
    console.warn("Deprecation: The `secondaryAction` prop on the `Navigation.Item` has been deprecated. Use `secondaryActions` instead.");
  }
  const actions = secondaryActions || secondaryAction && [secondaryAction];
  if (actions && actions.length > MAX_SECONDARY_ACTIONS) {
    actions.length = MAX_SECONDARY_ACTIONS;
    if (process.env.NODE_ENV === "development") {
      console.warn(`secondaryActions must have a maximum of ${MAX_SECONDARY_ACTIONS} actions. Only the first ${MAX_SECONDARY_ACTIONS} actions will be rendered.`);
    }
  }
  const secondaryActionMarkup = (actions == null ? void 0 : actions.length) ? /* @__PURE__ */ React.createElement("span", {
    className: styles$d.SecondaryActions
  }, actions.map((action2) => /* @__PURE__ */ React.createElement(ItemSecondaryAction, Object.assign({
    key: action2.accessibilityLabel
  }, action2, {
    tabIndex,
    disabled
  })))) : null;
  const itemContentMarkup = /* @__PURE__ */ React.createElement(React.Fragment, null, iconMarkup, itemLabelMarkup, secondaryActionMarkup ? null : wrappedBadgeMarkup);
  const outerContentMarkup = /* @__PURE__ */ React.createElement(React.Fragment, null, secondaryActionMarkup ? wrappedBadgeMarkup : null);
  const showExpanded = selected || expanded || childIsActive;
  const itemClassName = classNames(styles$d.Item, disabled && styles$d["Item-disabled"], (selected || childIsActive) && styles$d["Item-selected"], showExpanded && styles$d.subNavigationActive, childIsActive && styles$d["Item-child-active"], showVerticalLine && styles$d["Item-line"], matches2 && styles$d["Item-line-pointer"], showVerticalHoverPointer && styles$d["Item-hover-pointer"]);
  let secondaryNavigationMarkup = null;
  if (subNavigationItems.length > 0) {
    const longestMatch = matchingSubNavigationItems.sort(({
      url: firstUrl
    }, {
      url: secondUrl
    }) => secondUrl.length - firstUrl.length)[0];
    secondaryNavigationMarkup = /* @__PURE__ */ React.createElement(SecondaryNavigation, {
      ItemComponent: Item2,
      icon,
      longestMatch,
      subNavigationItems,
      showExpanded,
      truncateText,
      secondaryNavigationId
    });
  }
  const className = classNames(styles$d.ListItem, Boolean(actions && actions.length) && styles$d["ListItem-hasAction"]);
  const itemLinkMarkup = () => {
    const linkMarkup = /* @__PURE__ */ React.createElement(UnstyledLink, Object.assign({
      url,
      className: itemClassName,
      external,
      tabIndex,
      "aria-disabled": disabled,
      "aria-label": accessibilityLabel,
      onClick: getClickHandler(onClick)
    }, normalizeAriaAttributes(secondaryNavigationId, subNavigationItems.length > 0, showExpanded)), itemContentMarkup);
    return isTruncated ? /* @__PURE__ */ React.createElement(Tooltip, {
      hoverDelay: TOOLTIP_HOVER_DELAY,
      content: label,
      preferredPosition: "above"
    }, linkMarkup) : linkMarkup;
  };
  return /* @__PURE__ */ React.createElement("li", {
    className,
    onMouseEnter: () => {
      onMouseEnter == null ? void 0 : onMouseEnter(label);
    },
    onMouseLeave
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$d.ItemWrapper
  }, /* @__PURE__ */ React.createElement("div", {
    className: classNames(styles$d.ItemInnerWrapper, selected && childIsActive && styles$d["ItemInnerWrapper-open"] || selected && !childIsActive && styles$d["ItemInnerWrapper-selected"], displayActionsOnHover && styles$d["ItemInnerWrapper-display-actions-on-hover"], disabled && styles$d.ItemInnerDisabled)
  }, displayActionsOnHover && secondaryActionMarkup && wrappedBadgeMarkup ? /* @__PURE__ */ React.createElement("span", {
    className: styles$d.ItemWithFloatingActions
  }, itemLinkMarkup(), secondaryActionMarkup) : /* @__PURE__ */ React.createElement(React.Fragment, null, itemLinkMarkup(), secondaryActionMarkup), outerContentMarkup)), secondaryNavigationMarkup);
  function getClickHandler(onClick2) {
    return (event) => {
      const {
        currentTarget
      } = event;
      if (currentTarget.getAttribute("href") === location) {
        event.preventDefault();
      }
      if (subNavigationItems && subNavigationItems.length > 0 && isNavigationCollapsed) {
        event.preventDefault();
        onToggleExpandedState == null ? void 0 : onToggleExpandedState();
      } else if (onNavigationDismiss) {
        onNavigationDismiss();
        if (onClick2 && onClick2 !== onNavigationDismiss) {
          onClick2();
        }
        return;
      }
      if (onClick2) {
        onClick2();
      }
    };
  }
}
function ItemSecondaryAction({
  url,
  icon,
  accessibilityLabel,
  tooltip,
  onClick,
  disabled,
  tabIndex
}) {
  const markup = url ? /* @__PURE__ */ React.createElement(UnstyledLink, {
    external: true,
    url,
    className: styles$d.SecondaryAction,
    tabIndex,
    "aria-disabled": disabled,
    "aria-label": accessibilityLabel,
    onClick
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: icon
  })) : /* @__PURE__ */ React.createElement(UnstyledButton, {
    className: styles$d.SecondaryAction,
    tabIndex,
    disabled,
    accessibilityLabel,
    onClick
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: icon
  }));
  return tooltip ? /* @__PURE__ */ React.createElement(Tooltip, tooltip, " ", markup, " ") : markup;
}
function normalizePathname(pathname) {
  const barePathname = pathname.split("?")[0].split("#")[0];
  return barePathname.endsWith("/") ? barePathname : `${barePathname}/`;
}
function safeEqual(location, path) {
  return normalizePathname(location) === normalizePathname(path);
}
function safeStartsWith(location, path) {
  return normalizePathname(location).startsWith(normalizePathname(path));
}
function matchStateForItem({
  url,
  matches: matches2,
  exactMatch,
  matchPaths,
  excludePaths
}, location) {
  if (url == null) {
    return MatchState.NoMatch;
  }
  if (matches2) {
    return MatchState.MatchForced;
  }
  if (matches2 === false || excludePaths && excludePaths.some((path) => safeStartsWith(location, path))) {
    return MatchState.Excluded;
  }
  if (matchPaths && matchPaths.some((path) => safeStartsWith(location, path))) {
    return MatchState.MatchPaths;
  }
  const matchesUrl = exactMatch ? safeEqual(location, url) : safeStartsWith(location, url);
  return matchesUrl ? MatchState.MatchUrl : MatchState.NoMatch;
}
function normalizeAriaAttributes(controlId, hasSubMenu, expanded) {
  return hasSubMenu ? {
    "aria-expanded": expanded,
    "aria-controls": controlId
  } : void 0;
}
function Section({
  title,
  fill,
  action: action2,
  items,
  rollup,
  separator
}) {
  const {
    value: expanded,
    toggle: toggleExpanded,
    setFalse: setExpandedFalse
  } = useToggle(false);
  const animationFrame = useRef(null);
  const {
    isNavigationCollapsed
  } = useMediaQuery();
  const [expandedIndex, setExpandedIndex] = useState();
  const handleClick = (onClick, hasSubNavItems) => {
    return () => {
      if (onClick) {
        onClick();
      }
      if (animationFrame.current) {
        cancelAnimationFrame(animationFrame.current);
      }
      if (!hasSubNavItems || !isNavigationCollapsed) {
        animationFrame.current = requestAnimationFrame(setExpandedFalse);
      }
    };
  };
  useEffect(() => {
    return () => {
      animationFrame.current && cancelAnimationFrame(animationFrame.current);
    };
  });
  const className = classNames(styles$d.Section, separator && styles$d["Section-withSeparator"], fill && styles$d["Section-fill"]);
  const buttonMarkup = action2 && /* @__PURE__ */ React.createElement("button", {
    type: "button",
    className: styles$d.Action,
    "aria-label": action2.accessibilityLabel,
    onClick: action2.onClick
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: action2.icon
  }));
  const actionMarkup = action2 && (action2.tooltip ? /* @__PURE__ */ React.createElement(Tooltip, action2.tooltip, buttonMarkup) : buttonMarkup);
  const sectionHeadingMarkup = title && /* @__PURE__ */ React.createElement("li", {
    className: styles$d.SectionHeading
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "bodySm",
    fontWeight: "medium",
    tone: "subdued"
  }, title), actionMarkup);
  const itemsMarkup = items.map((item, index) => {
    const {
      onClick,
      label,
      subNavigationItems,
      ...rest
    } = item;
    const hasSubNavItems = subNavigationItems != null && subNavigationItems.length > 0;
    const handleToggleExpandedState = () => {
      if (expandedIndex === index) {
        setExpandedIndex(-1);
      } else {
        setExpandedIndex(index);
      }
    };
    return /* @__PURE__ */ React.createElement(Item2, Object.assign({
      key: label
    }, rest, {
      label,
      subNavigationItems,
      onClick: handleClick(onClick, hasSubNavItems),
      onToggleExpandedState: handleToggleExpandedState,
      expanded: expandedIndex === index
    }));
  });
  const toggleClassName = classNames(styles$d.Item, styles$d.RollupToggle);
  const ariaLabel = rollup && (expanded ? rollup.hide : rollup.view);
  const toggleRollup = rollup && items.length > rollup.after && /* @__PURE__ */ React.createElement("div", {
    className: styles$d.ListItem,
    key: "List Item"
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$d.ItemWrapper
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$d.ItemInnerWrapper
  }, /* @__PURE__ */ React.createElement("button", {
    type: "button",
    className: toggleClassName,
    onClick: toggleExpanded,
    "aria-label": ariaLabel
  }, /* @__PURE__ */ React.createElement("span", {
    className: styles$d.Icon
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: MenuHorizontalIcon
  }))))));
  const activeItemIndex = items.findIndex((item) => {
    if (!rollup) {
      return false;
    }
    return rollup.activePath === item.url || item.url && rollup.activePath.startsWith(item.url) || (item.subNavigationItems ? item.subNavigationItems.some(({
      url: itemUrl
    }) => rollup.activePath.startsWith(itemUrl)) : false);
  });
  const sectionItems = rollup ? itemsMarkup.slice(0, rollup.after) : itemsMarkup;
  const additionalItems = rollup ? itemsMarkup.slice(rollup.after) : [];
  if (rollup && activeItemIndex !== -1 && activeItemIndex > rollup.after - 1) {
    sectionItems.push(...additionalItems.splice(activeItemIndex - rollup.after, 1));
  }
  const additionalItemsId = useId();
  const activeItemsMarkup = rollup && additionalItems.length > 0 && /* @__PURE__ */ React.createElement("li", {
    className: styles$d.RollupSection
  }, /* @__PURE__ */ React.createElement(Collapsible, {
    id: additionalItemsId,
    open: expanded
  }, /* @__PURE__ */ React.createElement("ul", {
    className: styles$d.List
  }, additionalItems)), toggleRollup);
  return /* @__PURE__ */ React.createElement("ul", {
    className
  }, sectionHeadingMarkup, sectionItems, activeItemsMarkup);
}
const Navigation$1 = function Navigation({
  children,
  contextControl,
  location,
  onDismiss,
  ariaLabelledBy,
  logoSuffix
}) {
  const {
    logo
  } = useFrame();
  const width = getWidth(logo, 104);
  const logoMarkup = logo ? /* @__PURE__ */ React.createElement("div", {
    className: classNames(styles$d.LogoContainer, logoSuffix && styles$d.hasLogoSuffix)
  }, /* @__PURE__ */ React.createElement(UnstyledLink, {
    url: logo.url || "",
    className: styles$d.LogoLink,
    style: {
      width
    }
  }, /* @__PURE__ */ React.createElement(Image, {
    source: logo.topBarSource || "",
    alt: logo.accessibilityLabel || "",
    className: styles$d.Logo,
    style: {
      width
    }
  })), logoSuffix) : null;
  const mediaMarkup = contextControl ? /* @__PURE__ */ React.createElement("div", {
    className: styles$d.ContextControl
  }, contextControl) : logoMarkup;
  const context = useMemo(() => ({
    location,
    onNavigationDismiss: onDismiss
  }), [location, onDismiss]);
  return /* @__PURE__ */ React.createElement(NavigationContext.Provider, {
    value: context
  }, /* @__PURE__ */ React.createElement(WithinContentContext.Provider, {
    value: true
  }, /* @__PURE__ */ React.createElement("nav", {
    className: styles$d.Navigation,
    "aria-labelledby": ariaLabelledBy
  }, mediaMarkup, /* @__PURE__ */ React.createElement(Scrollable, {
    className: styles$d.PrimaryNavigation
  }, children))));
};
Navigation$1.Item = Item2;
Navigation$1.Section = Section;
function isInterface(x) {
  return !/* @__PURE__ */ isValidElement(x) && x !== void 0;
}
function isReactElement(x) {
  return /* @__PURE__ */ isValidElement(x) && x !== void 0;
}
var styles$c = {
  "Page": "Polaris-Page",
  "fullWidth": "Polaris-Page--fullWidth",
  "narrowWidth": "Polaris-Page--narrowWidth",
  "Content": "Polaris-Page__Content"
};
var styles$b = {
  "TitleWrapper": "Polaris-Page-Header__TitleWrapper",
  "TitleWrapperExpand": "Polaris-Page-Header__TitleWrapperExpand",
  "BreadcrumbWrapper": "Polaris-Page-Header__BreadcrumbWrapper",
  "PaginationWrapper": "Polaris-Page-Header__PaginationWrapper",
  "PrimaryActionWrapper": "Polaris-Page-Header__PrimaryActionWrapper",
  "Row": "Polaris-Page-Header__Row",
  "mobileView": "Polaris-Page-Header--mobileView",
  "RightAlign": "Polaris-Page-Header__RightAlign",
  "noBreadcrumbs": "Polaris-Page-Header--noBreadcrumbs",
  "AdditionalMetaData": "Polaris-Page-Header__AdditionalMetaData",
  "Actions": "Polaris-Page-Header__Actions",
  "longTitle": "Polaris-Page-Header--longTitle",
  "mediumTitle": "Polaris-Page-Header--mediumTitle",
  "isSingleRow": "Polaris-Page-Header--isSingleRow"
};
var styles$a = {
  "Title": "Polaris-Header-Title",
  "TitleWithSubtitle": "Polaris-Header-Title__TitleWithSubtitle",
  "TitleWrapper": "Polaris-Header-Title__TitleWrapper",
  "SubTitle": "Polaris-Header-Title__SubTitle",
  "SubtitleCompact": "Polaris-Header-Title__SubtitleCompact",
  "SubtitleMaxWidth": "Polaris-Header-Title__SubtitleMaxWidth"
};
function Title({
  title,
  subtitle,
  titleMetadata,
  compactTitle,
  hasSubtitleMaxWidth
}) {
  const className = classNames(styles$a.Title, subtitle && styles$a.TitleWithSubtitle);
  const titleMarkup = title ? /* @__PURE__ */ React.createElement("h1", {
    className
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "headingLg",
    fontWeight: "bold"
  }, title)) : null;
  const titleMetadataMarkup = titleMetadata ? /* @__PURE__ */ React.createElement(Bleed, {
    marginBlock: "100"
  }, titleMetadata) : null;
  const wrappedTitleMarkup = /* @__PURE__ */ React.createElement("div", {
    className: styles$a.TitleWrapper
  }, titleMarkup, titleMetadataMarkup);
  const subtitleMarkup = subtitle ? /* @__PURE__ */ React.createElement("div", {
    className: classNames(styles$a.SubTitle, compactTitle && styles$a.SubtitleCompact, hasSubtitleMaxWidth && styles$a.SubtitleMaxWidth)
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "p",
    variant: "bodySm",
    tone: "subdued"
  }, subtitle)) : null;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, wrappedTitleMarkup, subtitleMarkup);
}
const SHORT_TITLE = 20;
const REALLY_SHORT_TITLE = 8;
const LONG_TITLE = 34;
function Header({
  title,
  subtitle,
  pageReadyAccessibilityLabel,
  titleMetadata,
  additionalMetadata,
  titleHidden = false,
  primaryAction,
  pagination,
  filterActions,
  backAction,
  secondaryActions = [],
  actionGroups = [],
  compactTitle = false,
  onActionRollup
}) {
  const i18n = useI18n();
  const {
    isNavigationCollapsed
  } = useMediaQuery();
  const isSingleRow = !primaryAction && !pagination && (isInterface(secondaryActions) && !secondaryActions.length || isReactElement(secondaryActions)) && !actionGroups.length;
  const hasActionGroupsOrSecondaryActions = actionGroups.length > 0 || isInterface(secondaryActions) && secondaryActions.length > 0 || isReactElement(secondaryActions);
  const breadcrumbMarkup = backAction ? /* @__PURE__ */ React.createElement("div", {
    className: styles$b.BreadcrumbWrapper
  }, /* @__PURE__ */ React.createElement(Box, {
    maxWidth: "100%",
    paddingInlineEnd: "100",
    printHidden: true
  }, /* @__PURE__ */ React.createElement(Breadcrumbs, {
    backAction
  }))) : null;
  const paginationMarkup = pagination && !isNavigationCollapsed ? /* @__PURE__ */ React.createElement("div", {
    className: styles$b.PaginationWrapper
  }, /* @__PURE__ */ React.createElement(Box, {
    printHidden: true
  }, /* @__PURE__ */ React.createElement(Pagination, Object.assign({}, pagination, {
    hasPrevious: pagination.hasPrevious,
    hasNext: pagination.hasNext
  })))) : null;
  const pageTitleMarkup = /* @__PURE__ */ React.createElement("div", {
    className: classNames(styles$b.TitleWrapper, !hasActionGroupsOrSecondaryActions && styles$b.TitleWrapperExpand)
  }, /* @__PURE__ */ React.createElement(Title, {
    title,
    subtitle,
    titleMetadata,
    compactTitle,
    hasSubtitleMaxWidth: hasActionGroupsOrSecondaryActions
  }));
  const labelForPageReadyAccessibilityLabel = pageReadyAccessibilityLabel || title;
  const pageReadyAccessibilityLabelMarkup = labelForPageReadyAccessibilityLabel ? /* @__PURE__ */ React.createElement("div", {
    role: "status"
  }, /* @__PURE__ */ React.createElement(Text, {
    visuallyHidden: true,
    as: "p"
  }, i18n.translate("Polaris.Page.Header.pageReadyAccessibilityLabel", {
    title: labelForPageReadyAccessibilityLabel
  }))) : void 0;
  const primaryActionMarkup = primaryAction ? /* @__PURE__ */ React.createElement(PrimaryActionMarkup, {
    primaryAction
  }) : null;
  let actionMenuMarkup = null;
  if (isInterface(secondaryActions) && (secondaryActions.length > 0 || hasGroupsWithActions(actionGroups))) {
    actionMenuMarkup = /* @__PURE__ */ React.createElement(ActionMenu, {
      actions: secondaryActions,
      groups: actionGroups,
      rollup: isNavigationCollapsed,
      rollupActionsLabel: title ? i18n.translate("Polaris.Page.Header.rollupActionsLabel", {
        title
      }) : void 0,
      onActionRollup
    });
  } else if (isReactElement(secondaryActions)) {
    actionMenuMarkup = /* @__PURE__ */ React.createElement(React.Fragment, null, secondaryActions);
  }
  const navigationMarkup = breadcrumbMarkup || paginationMarkup ? /* @__PURE__ */ React.createElement(Box, {
    printHidden: true,
    paddingBlockEnd: "100",
    paddingInlineEnd: actionMenuMarkup && isNavigationCollapsed ? "1000" : void 0
  }, /* @__PURE__ */ React.createElement(InlineStack, {
    gap: "400",
    align: "space-between",
    blockAlign: "center"
  }, breadcrumbMarkup, paginationMarkup)) : null;
  const additionalMetadataMarkup = additionalMetadata ? /* @__PURE__ */ React.createElement("div", {
    className: styles$b.AdditionalMetaData
  }, /* @__PURE__ */ React.createElement(Text, {
    tone: "subdued",
    as: "span",
    variant: "bodySm"
  }, additionalMetadata)) : null;
  const headerClassNames = classNames(isSingleRow && styles$b.isSingleRow, navigationMarkup && styles$b.hasNavigation, actionMenuMarkup && styles$b.hasActionMenu, isNavigationCollapsed && styles$b.mobileView, !backAction && styles$b.noBreadcrumbs, title && title.length < LONG_TITLE && styles$b.mediumTitle, title && title.length > LONG_TITLE && styles$b.longTitle);
  const {
    slot1,
    slot2,
    slot3,
    slot4,
    slot5
  } = determineLayout({
    actionMenuMarkup,
    additionalMetadataMarkup,
    breadcrumbMarkup,
    isNavigationCollapsed,
    pageTitleMarkup,
    paginationMarkup,
    primaryActionMarkup,
    title
  });
  return /* @__PURE__ */ React.createElement(Box, {
    position: "relative",
    paddingBlockStart: {
      xs: "400",
      md: "600"
    },
    paddingBlockEnd: {
      xs: "400",
      md: "600"
    },
    paddingInlineStart: {
      xs: "400",
      sm: "0"
    },
    paddingInlineEnd: {
      xs: "400",
      sm: "0"
    },
    visuallyHidden: titleHidden
  }, pageReadyAccessibilityLabelMarkup, /* @__PURE__ */ React.createElement("div", {
    className: headerClassNames
  }, /* @__PURE__ */ React.createElement(FilterActionsProvider, {
    filterActions: Boolean(filterActions)
  }, /* @__PURE__ */ React.createElement(ConditionalRender, {
    condition: [slot1, slot2, slot3, slot4].some(notNull)
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$b.Row
  }, slot1, slot2, /* @__PURE__ */ React.createElement(ConditionalRender, {
    condition: [slot3, slot4].some(notNull)
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$b.RightAlign
  }, /* @__PURE__ */ React.createElement(ConditionalWrapper, {
    condition: [slot3, slot4].every(notNull),
    wrapper: (children) => /* @__PURE__ */ React.createElement("div", {
      className: styles$b.Actions
    }, children)
  }, slot3, slot4))))), /* @__PURE__ */ React.createElement(ConditionalRender, {
    condition: [slot5].some(notNull)
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$b.Row
  }, /* @__PURE__ */ React.createElement(InlineStack, {
    gap: "400"
  }, slot5))))));
}
function PrimaryActionMarkup({
  primaryAction
}) {
  const {
    isNavigationCollapsed
  } = useMediaQuery();
  let actionMarkup;
  if (isInterface(primaryAction)) {
    const {
      primary: isPrimary,
      helpText
    } = primaryAction;
    const primary = isPrimary === void 0 ? true : isPrimary;
    const content = buttonFrom(shouldShowIconOnly(isNavigationCollapsed, primaryAction), {
      variant: primary ? "primary" : void 0
    });
    actionMarkup = helpText ? /* @__PURE__ */ React.createElement(Tooltip, {
      content: helpText
    }, content) : content;
  } else {
    actionMarkup = primaryAction;
  }
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$b.PrimaryActionWrapper
  }, /* @__PURE__ */ React.createElement(Box, {
    printHidden: true
  }, actionMarkup));
}
function shouldShowIconOnly(isMobile, action2) {
  let {
    content,
    accessibilityLabel
  } = action2;
  const {
    icon
  } = action2;
  if (icon == null) return {
    ...action2,
    icon: void 0
  };
  if (isMobile) {
    accessibilityLabel = accessibilityLabel || content;
    content = void 0;
  }
  return {
    ...action2,
    content,
    accessibilityLabel,
    icon
  };
}
function notNull(value) {
  return value != null;
}
function determineLayout({
  actionMenuMarkup,
  additionalMetadataMarkup,
  breadcrumbMarkup,
  isNavigationCollapsed,
  pageTitleMarkup,
  paginationMarkup,
  primaryActionMarkup,
  title
}) {
  const layouts = {
    mobileCompact: {
      slots: {
        slot1: null,
        slot2: pageTitleMarkup,
        slot3: actionMenuMarkup,
        slot4: primaryActionMarkup,
        slot5: additionalMetadataMarkup
      },
      condition: isNavigationCollapsed && breadcrumbMarkup == null && title != null && title.length <= REALLY_SHORT_TITLE
    },
    mobileDefault: {
      slots: {
        slot1: breadcrumbMarkup,
        slot2: pageTitleMarkup,
        slot3: actionMenuMarkup,
        slot4: primaryActionMarkup,
        slot5: additionalMetadataMarkup
      },
      condition: isNavigationCollapsed
    },
    desktopCompact: {
      slots: {
        slot1: breadcrumbMarkup,
        slot2: pageTitleMarkup,
        slot3: actionMenuMarkup,
        slot4: primaryActionMarkup,
        slot5: additionalMetadataMarkup
      },
      condition: !isNavigationCollapsed && paginationMarkup == null && actionMenuMarkup == null && title != null && title.length <= SHORT_TITLE
    },
    desktopDefault: {
      slots: {
        slot1: breadcrumbMarkup,
        slot2: pageTitleMarkup,
        slot3: /* @__PURE__ */ React.createElement(React.Fragment, null, actionMenuMarkup, primaryActionMarkup),
        slot4: paginationMarkup,
        slot5: additionalMetadataMarkup
      },
      condition: !isNavigationCollapsed
    }
  };
  const layout = Object.values(layouts).find((layout2) => layout2.condition) || layouts.desktopDefault;
  return layout.slots;
}
function Page$5({
  children,
  fullWidth,
  narrowWidth,
  ...rest
}) {
  const pageClassName = classNames(styles$c.Page, fullWidth && styles$c.fullWidth, narrowWidth && styles$c.narrowWidth);
  const hasHeaderContent = rest.title != null && rest.title !== "" || rest.subtitle != null && rest.subtitle !== "" || rest.primaryAction != null || rest.secondaryActions != null && (isInterface(rest.secondaryActions) && rest.secondaryActions.length > 0 || isReactElement(rest.secondaryActions)) || rest.actionGroups != null && rest.actionGroups.length > 0 || rest.backAction != null;
  const contentClassName = classNames(!hasHeaderContent && styles$c.Content);
  const headerMarkup = hasHeaderContent ? /* @__PURE__ */ React.createElement(Header, Object.assign({
    filterActions: true
  }, rest)) : null;
  return /* @__PURE__ */ React.createElement("div", {
    className: pageClassName
  }, headerMarkup, /* @__PURE__ */ React.createElement("div", {
    className: contentClassName
  }, children));
}
var styles$9 = {
  "Select": "Polaris-Select",
  "disabled": "Polaris-Select--disabled",
  "error": "Polaris-Select--error",
  "Backdrop": "Polaris-Select__Backdrop",
  "Input": "Polaris-Select__Input",
  "Content": "Polaris-Select__Content",
  "InlineLabel": "Polaris-Select__InlineLabel",
  "Icon": "Polaris-Select__Icon",
  "SelectedOption": "Polaris-Select__SelectedOption",
  "Prefix": "Polaris-Select__Prefix",
  "hover": "Polaris-Select--hover",
  "toneMagic": "Polaris-Select--toneMagic"
};
const PLACEHOLDER_VALUE = "";
function Select({
  options: optionsProp,
  label,
  labelAction,
  labelHidden: labelHiddenProp,
  labelInline,
  disabled,
  helpText,
  placeholder,
  id: idProp,
  name,
  value = PLACEHOLDER_VALUE,
  error,
  onChange,
  onFocus,
  onBlur,
  requiredIndicator,
  tone
}) {
  const {
    value: focused,
    toggle: toggleFocused
  } = useToggle(false);
  const uniqId = useId();
  const id = idProp ?? uniqId;
  const labelHidden = labelInline ? true : labelHiddenProp;
  const className = classNames(styles$9.Select, error && styles$9.error, tone && styles$9[variationName("tone", tone)], disabled && styles$9.disabled);
  const handleFocus = useCallback((event) => {
    toggleFocused();
    onFocus == null ? void 0 : onFocus(event);
  }, [onFocus, toggleFocused]);
  const handleBlur = useCallback((event) => {
    toggleFocused();
    onBlur == null ? void 0 : onBlur(event);
  }, [onBlur, toggleFocused]);
  const handleChange = onChange ? (event) => onChange(event.currentTarget.value, id) : void 0;
  const describedBy = [];
  if (helpText) {
    describedBy.push(helpTextID(id));
  }
  if (error) {
    describedBy.push(`${id}Error`);
  }
  const options2 = optionsProp || [];
  let normalizedOptions = options2.map(normalizeOption);
  if (placeholder) {
    normalizedOptions = [{
      label: placeholder,
      value: PLACEHOLDER_VALUE,
      disabled: true
    }, ...normalizedOptions];
  }
  const inlineLabelMarkup = labelInline && /* @__PURE__ */ React.createElement(Box, {
    paddingInlineEnd: "100"
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    variant: "bodyMd",
    tone: tone && tone === "magic" && !focused ? "magic-subdued" : "subdued",
    truncate: true
  }, label));
  const selectedOption = getSelectedOption(normalizedOptions, value);
  const prefixMarkup = selectedOption.prefix && /* @__PURE__ */ React.createElement("div", {
    className: styles$9.Prefix
  }, selectedOption.prefix);
  const contentMarkup = /* @__PURE__ */ React.createElement("div", {
    className: styles$9.Content,
    "aria-hidden": true,
    "aria-disabled": disabled
  }, inlineLabelMarkup, prefixMarkup, /* @__PURE__ */ React.createElement("span", {
    className: styles$9.SelectedOption
  }, selectedOption.label), /* @__PURE__ */ React.createElement("span", {
    className: styles$9.Icon
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: SelectIcon
  })));
  const optionsMarkup = normalizedOptions.map(renderOption);
  return /* @__PURE__ */ React.createElement(Labelled, {
    id,
    label,
    error,
    action: labelAction,
    labelHidden,
    helpText,
    requiredIndicator,
    disabled
  }, /* @__PURE__ */ React.createElement("div", {
    className
  }, /* @__PURE__ */ React.createElement("select", {
    id,
    name,
    value,
    className: styles$9.Input,
    disabled,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onChange: handleChange,
    "aria-invalid": Boolean(error),
    "aria-describedby": describedBy.length ? describedBy.join(" ") : void 0,
    "aria-required": requiredIndicator
  }, optionsMarkup), contentMarkup, /* @__PURE__ */ React.createElement("div", {
    className: styles$9.Backdrop
  })));
}
function isString(option) {
  return typeof option === "string";
}
function isGroup(option) {
  return typeof option === "object" && "options" in option && option.options != null;
}
function normalizeStringOption(option) {
  return {
    label: option,
    value: option
  };
}
function normalizeOption(option) {
  if (isString(option)) {
    return normalizeStringOption(option);
  } else if (isGroup(option)) {
    const {
      title,
      options: options2
    } = option;
    return {
      title,
      options: options2.map((option2) => {
        return isString(option2) ? normalizeStringOption(option2) : option2;
      })
    };
  }
  return option;
}
function getSelectedOption(options2, value) {
  const flatOptions = flattenOptions(options2);
  let selectedOption = flatOptions.find((option) => value === option.value);
  if (selectedOption === void 0) {
    selectedOption = flatOptions.find((option) => !option.hidden);
  }
  return selectedOption || {
    value: "",
    label: ""
  };
}
function flattenOptions(options2) {
  let flatOptions = [];
  options2.forEach((optionOrGroup) => {
    if (isGroup(optionOrGroup)) {
      flatOptions = flatOptions.concat(optionOrGroup.options);
    } else {
      flatOptions.push(optionOrGroup);
    }
  });
  return flatOptions;
}
function renderSingleOption(option) {
  const {
    value,
    label,
    prefix: _prefix,
    key,
    ...rest
  } = option;
  return /* @__PURE__ */ React.createElement("option", Object.assign({
    key: key ?? value,
    value
  }, rest), label);
}
function renderOption(optionOrGroup) {
  if (isGroup(optionOrGroup)) {
    const {
      title,
      options: options2
    } = optionOrGroup;
    return /* @__PURE__ */ React.createElement("optgroup", {
      label: title,
      key: title
    }, options2.map(renderSingleOption));
  }
  return renderSingleOption(optionOrGroup);
}
var styles$8 = {
  "TopBar": "Polaris-TopBar",
  "Container": "Polaris-TopBar__Container",
  "LogoDisplayControl": "Polaris-TopBar__LogoDisplayControl",
  "LogoDisplayContainer": "Polaris-TopBar__LogoDisplayContainer",
  "LogoContainer": "Polaris-TopBar__LogoContainer",
  "hasLogoSuffix": "Polaris-TopBar--hasLogoSuffix",
  "Logo": "Polaris-TopBar__Logo",
  "LogoLink": "Polaris-TopBar__LogoLink",
  "ContextControl": "Polaris-TopBar__ContextControl",
  "NavigationIcon": "Polaris-TopBar__NavigationIcon",
  "focused": "Polaris-TopBar--focused",
  "IconWrapper": "Polaris-TopBar__IconWrapper",
  "LeftContent": "Polaris-TopBar__LeftContent",
  "Search": "Polaris-TopBar__Search",
  "RightContent": "Polaris-TopBar__RightContent",
  "SecondaryMenu": "Polaris-TopBar__SecondaryMenu"
};
var styles$7 = {
  "Search": "Polaris-TopBar-Search",
  "SearchContent": "Polaris-TopBar-Search__SearchContent",
  "visible": "Polaris-TopBar-Search--visible",
  "Results": "Polaris-TopBar-Search__Results"
};
var styles$6 = {
  "SearchDismissOverlay": "Polaris-TopBar-SearchDismissOverlay",
  "visible": "Polaris-TopBar-SearchDismissOverlay--visible"
};
function SearchDismissOverlay({
  onDismiss,
  visible
}) {
  const node = useRef(null);
  const handleDismiss = useCallback(({
    target
  }) => {
    if (target === node.current && onDismiss != null) {
      onDismiss();
    }
  }, [onDismiss]);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, visible ? /* @__PURE__ */ React.createElement(ScrollLock, null) : null, /* @__PURE__ */ React.createElement("div", {
    ref: node,
    className: classNames(styles$6.SearchDismissOverlay, visible && styles$6.visible),
    onClick: handleDismiss
  }));
}
function Search({
  visible,
  children,
  onDismiss,
  overlayVisible = false
}) {
  if (children == null) {
    return null;
  }
  const overlayMarkup = visible ? /* @__PURE__ */ React.createElement(SearchDismissOverlay, {
    onDismiss,
    visible: overlayVisible
  }) : null;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, overlayMarkup, /* @__PURE__ */ React.createElement("div", {
    className: classNames(styles$7.Search, visible && styles$7.visible)
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$7.SearchContent
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$7.Results
  }, children))));
}
var styles$5 = {
  "SearchField": "Polaris-TopBar-SearchField",
  "focused": "Polaris-TopBar-SearchField--focused",
  "Input": "Polaris-TopBar-SearchField__Input",
  "Backdrop": "Polaris-TopBar-SearchField__Backdrop",
  "BackdropShowFocusBorder": "Polaris-TopBar-SearchField__BackdropShowFocusBorder",
  "Icon": "Polaris-TopBar-SearchField__Icon",
  "Clear": "Polaris-TopBar-SearchField__Clear"
};
function SearchField({
  value,
  focused,
  active,
  placeholder,
  onChange,
  onFocus,
  onBlur,
  onCancel,
  showFocusBorder
}) {
  const i18n = useI18n();
  const [forceActive, setForceActive] = useState(false);
  const input = useRef(null);
  const searchId = useId();
  const handleChange = useCallback(({
    currentTarget
  }) => {
    onChange(currentTarget.value);
  }, [onChange]);
  const handleFocus = useCallback(() => onFocus && onFocus(), [onFocus]);
  const handleBlur = useCallback(() => onBlur && onBlur(), [onBlur]);
  const handleClear = useCallback(() => {
    onCancel && onCancel();
    if (!input.current) {
      return;
    }
    input.current.value = "";
    onChange("");
    input.current.focus();
  }, [onCancel, onChange]);
  useEffect(() => {
    if (!input.current) {
      return;
    }
    if (focused) {
      input.current.focus();
    } else {
      input.current.blur();
    }
  }, [focused]);
  const clearMarkup = value !== "" && /* @__PURE__ */ React.createElement("button", {
    type: "button",
    "aria-label": i18n.translate("Polaris.TopBar.SearchField.clearButtonLabel"),
    className: styles$5.Clear,
    onClick: handleClear,
    onBlur: () => {
      setForceActive(false);
      handleClear();
    },
    onFocus: () => {
      handleFocus();
      setForceActive(true);
    }
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: XCircleIcon
  }));
  const className = classNames(styles$5.SearchField, (focused || active || forceActive) && styles$5.focused);
  return /* @__PURE__ */ React.createElement("div", {
    className,
    onFocus: handleFocus,
    onBlur: handleBlur
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "span",
    visuallyHidden: true
  }, /* @__PURE__ */ React.createElement("label", {
    htmlFor: searchId
  }, i18n.translate("Polaris.TopBar.SearchField.search"))), /* @__PURE__ */ React.createElement("input", {
    id: searchId,
    className: styles$5.Input,
    placeholder,
    type: "search",
    autoCapitalize: "off",
    autoComplete: "off",
    autoCorrect: "off",
    ref: input,
    value,
    onChange: handleChange,
    onKeyDown: preventDefault
  }), /* @__PURE__ */ React.createElement("span", {
    className: styles$5.Icon
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: SearchIcon
  })), clearMarkup, /* @__PURE__ */ React.createElement("div", {
    className: classNames(styles$5.Backdrop, showFocusBorder && styles$5.BackdropShowFocusBorder)
  }));
}
function preventDefault(event) {
  if (event.key === "Enter") {
    event.preventDefault();
  }
}
var styles$4 = {
  "Details": "Polaris-TopBar-UserMenu__Details"
};
var styles$3 = {
  "MessageIndicatorWrapper": "Polaris-MessageIndicator__MessageIndicatorWrapper",
  "MessageIndicator": "Polaris-MessageIndicator"
};
function MessageIndicator({
  children,
  active
}) {
  const indicatorMarkup = active && /* @__PURE__ */ React.createElement("div", {
    className: styles$3.MessageIndicator
  });
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$3.MessageIndicatorWrapper
  }, indicatorMarkup, children);
}
var styles$2 = {
  "ActivatorWrapper": "Polaris-TopBar-Menu__ActivatorWrapper",
  "Activator": "Polaris-TopBar-Menu__Activator",
  "Activator-userMenu": "Polaris-TopBar-Menu__Activator--userMenu"
};
var styles$1 = {
  "Section": "Polaris-Menu-Message__Section"
};
function Message({
  title,
  description,
  action: action2,
  link,
  badge
}) {
  const badgeMarkup = badge && /* @__PURE__ */ React.createElement(Badge, {
    tone: badge.tone
  }, badge.content);
  const {
    to,
    content: linkContent
  } = link;
  const {
    onClick,
    content: actionContent
  } = action2;
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$1.Section
  }, /* @__PURE__ */ React.createElement(Popover2.Section, null, /* @__PURE__ */ React.createElement(LegacyStack, {
    vertical: true,
    spacing: "tight"
  }, /* @__PURE__ */ React.createElement(TextContainer, null, /* @__PURE__ */ React.createElement(Text, {
    variant: "headingMd",
    as: "h2"
  }, title, badgeMarkup), /* @__PURE__ */ React.createElement("p", null, description)), /* @__PURE__ */ React.createElement(Link, {
    url: to
  }, linkContent), /* @__PURE__ */ React.createElement(Button, {
    variant: "plain",
    onClick
  }, actionContent))));
}
function Menu(props) {
  const {
    actions,
    onOpen,
    onClose,
    open,
    activatorContent,
    message,
    accessibilityLabel,
    customWidth,
    userMenu
  } = props;
  const badgeProps = message && message.badge && {
    content: message.badge.content,
    tone: message.badge.tone
  };
  const messageMarkup = message && /* @__PURE__ */ React.createElement(Message, {
    title: message.title,
    description: message.description,
    action: {
      onClick: message.action.onClick,
      content: message.action.content
    },
    link: {
      to: message.link.to,
      content: message.link.content
    },
    badge: badgeProps
  });
  return /* @__PURE__ */ React.createElement(Popover2, {
    activator: /* @__PURE__ */ React.createElement("div", {
      className: styles$2.ActivatorWrapper
    }, /* @__PURE__ */ React.createElement("button", {
      type: "button",
      className: classNames(styles$2.Activator, userMenu && styles$2["Activator-userMenu"]),
      onClick: onOpen,
      "aria-label": accessibilityLabel
    }, activatorContent)),
    active: open,
    onClose,
    fixed: true,
    fullHeight: true,
    preferredAlignment: "right"
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$2.MenuItems
  }, /* @__PURE__ */ React.createElement(Box, {
    width: customWidth
  }, /* @__PURE__ */ React.createElement(ActionList, {
    actionRole: "menuitem",
    onActionAnyItem: onClose,
    sections: actions
  }), messageMarkup)));
}
function UserMenu({
  name,
  detail,
  avatar,
  initials,
  actions,
  message,
  onToggle,
  open,
  accessibilityLabel,
  customActivator,
  customWidth
}) {
  const showIndicator = Boolean(message);
  const activatorContentMarkup = customActivator ? customActivator : /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("span", {
    className: styles$4.Details
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "p",
    variant: "bodySm",
    alignment: "start",
    fontWeight: "medium",
    truncate: true
  }, name), /* @__PURE__ */ React.createElement("span", {
    className: styles$4.Message
  }, /* @__PURE__ */ React.createElement(Text, {
    as: "p",
    variant: "bodyXs",
    alignment: "start",
    tone: "text-inverse-secondary",
    truncate: true
  }, detail))), /* @__PURE__ */ React.createElement(MessageIndicator, {
    active: showIndicator
  }, /* @__PURE__ */ React.createElement(Avatar, {
    size: "md",
    initials: initials && initials.replace(" ", ""),
    source: avatar,
    name
  })));
  return /* @__PURE__ */ React.createElement(Menu, {
    activatorContent: activatorContentMarkup,
    open,
    onOpen: onToggle,
    onClose: onToggle,
    actions,
    message,
    accessibilityLabel,
    customWidth,
    userMenu: true
  });
}
const TopBar = function TopBar2({
  showNavigationToggle,
  userMenu,
  searchResults,
  searchField,
  secondaryMenu,
  searchResultsVisible,
  searchResultsOverlayVisible = false,
  onNavigationToggle,
  onSearchResultsDismiss,
  contextControl,
  logoSuffix
}) {
  const i18n = useI18n();
  const {
    logo
  } = useFrame();
  const {
    value: focused,
    setTrue: forceTrueFocused,
    setFalse: forceFalseFocused
  } = useToggle(false);
  const iconClassName = classNames(styles$8.NavigationIcon, focused && styles$8.focused);
  const navigationButtonMarkup = showNavigationToggle ? /* @__PURE__ */ React.createElement("button", {
    type: "button",
    className: iconClassName,
    onClick: onNavigationToggle,
    onFocus: forceTrueFocused,
    onBlur: forceFalseFocused,
    "aria-label": i18n.translate("Polaris.TopBar.toggleMenuLabel")
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$8.IconWrapper
  }, /* @__PURE__ */ React.createElement(Icon, {
    source: MenuIcon
  }))) : null;
  const width = getWidth(logo, 104);
  let contextMarkup;
  if (contextControl) {
    contextMarkup = /* @__PURE__ */ React.createElement("div", {
      className: styles$8.ContextControl
    }, contextControl);
  } else if (logo) {
    const className = classNames(styles$8.LogoContainer, showNavigationToggle || searchField ? styles$8.LogoDisplayControl : styles$8.LogoDisplayContainer, logoSuffix && styles$8.hasLogoSuffix);
    contextMarkup = /* @__PURE__ */ React.createElement("div", {
      className
    }, /* @__PURE__ */ React.createElement(UnstyledLink, {
      url: logo.url || "",
      className: styles$8.LogoLink,
      style: {
        width
      }
    }, /* @__PURE__ */ React.createElement(Image, {
      source: logo.topBarSource || "",
      alt: logo.accessibilityLabel || "",
      className: styles$8.Logo,
      style: {
        width
      }
    })), logoSuffix);
  }
  const searchMarkup = searchField ? /* @__PURE__ */ React.createElement(React.Fragment, null, searchField, /* @__PURE__ */ React.createElement(Search, {
    visible: searchResultsVisible,
    onDismiss: onSearchResultsDismiss,
    overlayVisible: searchResultsOverlayVisible
  }, searchResults)) : null;
  return /* @__PURE__ */ React.createElement("div", {
    className: styles$8.TopBar
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$8.Container
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$8.LeftContent
  }, navigationButtonMarkup, contextMarkup), /* @__PURE__ */ React.createElement("div", {
    className: styles$8.Search
  }, searchMarkup), /* @__PURE__ */ React.createElement("div", {
    className: styles$8.RightContent
  }, /* @__PURE__ */ React.createElement("div", {
    className: styles$8.SecondaryMenu
  }, secondaryMenu), userMenu)));
};
TopBar.Menu = Menu;
TopBar.SearchField = SearchField;
TopBar.UserMenu = UserMenu;
const Polaris = /* @__PURE__ */ JSON.parse('{"ActionMenu":{"Actions":{"moreActions":"More actions"},"RollupActions":{"rollupButton":"View actions"}},"ActionList":{"SearchField":{"clearButtonLabel":"Clear","search":"Search","placeholder":"Search actions"}},"Avatar":{"label":"Avatar","labelWithInitials":"Avatar with initials {initials}"},"Autocomplete":{"spinnerAccessibilityLabel":"Loading","ellipsis":"{content}…"},"Badge":{"PROGRESS_LABELS":{"incomplete":"Incomplete","partiallyComplete":"Partially complete","complete":"Complete"},"TONE_LABELS":{"info":"Info","success":"Success","warning":"Warning","critical":"Critical","attention":"Attention","new":"New","readOnly":"Read-only","enabled":"Enabled"},"progressAndTone":"{toneLabel} {progressLabel}"},"Banner":{"dismissButton":"Dismiss notification"},"Button":{"spinnerAccessibilityLabel":"Loading"},"Common":{"checkbox":"checkbox","undo":"Undo","cancel":"Cancel","clear":"Clear","close":"Close","submit":"Submit","more":"More"},"ContextualSaveBar":{"save":"Save","discard":"Discard"},"DataTable":{"sortAccessibilityLabel":"sort {direction} by","navAccessibilityLabel":"Scroll table {direction} one column","totalsRowHeading":"Totals","totalRowHeading":"Total"},"DatePicker":{"previousMonth":"Show previous month, {previousMonthName} {showPreviousYear}","nextMonth":"Show next month, {nextMonth} {nextYear}","today":"Today ","start":"Start of range","end":"End of range","months":{"january":"January","february":"February","march":"March","april":"April","may":"May","june":"June","july":"July","august":"August","september":"September","october":"October","november":"November","december":"December"},"days":{"monday":"Monday","tuesday":"Tuesday","wednesday":"Wednesday","thursday":"Thursday","friday":"Friday","saturday":"Saturday","sunday":"Sunday"},"daysAbbreviated":{"monday":"Mo","tuesday":"Tu","wednesday":"We","thursday":"Th","friday":"Fr","saturday":"Sa","sunday":"Su"}},"DiscardConfirmationModal":{"title":"Discard all unsaved changes","message":"If you discard changes, you’ll delete any edits you made since you last saved.","primaryAction":"Discard changes","secondaryAction":"Continue editing"},"DropZone":{"single":{"overlayTextFile":"Drop file to upload","overlayTextImage":"Drop image to upload","overlayTextVideo":"Drop video to upload","actionTitleFile":"Add file","actionTitleImage":"Add image","actionTitleVideo":"Add video","actionHintFile":"or drop file to upload","actionHintImage":"or drop image to upload","actionHintVideo":"or drop video to upload","labelFile":"Upload file","labelImage":"Upload image","labelVideo":"Upload video"},"allowMultiple":{"overlayTextFile":"Drop files to upload","overlayTextImage":"Drop images to upload","overlayTextVideo":"Drop videos to upload","actionTitleFile":"Add files","actionTitleImage":"Add images","actionTitleVideo":"Add videos","actionHintFile":"or drop files to upload","actionHintImage":"or drop images to upload","actionHintVideo":"or drop videos to upload","labelFile":"Upload files","labelImage":"Upload images","labelVideo":"Upload videos"},"errorOverlayTextFile":"File type is not valid","errorOverlayTextImage":"Image type is not valid","errorOverlayTextVideo":"Video type is not valid"},"EmptySearchResult":{"altText":"Empty search results"},"Frame":{"skipToContent":"Skip to content","navigationLabel":"Navigation","Navigation":{"closeMobileNavigationLabel":"Close navigation"}},"FullscreenBar":{"back":"Back","accessibilityLabel":"Exit fullscreen mode"},"Filters":{"moreFilters":"More filters","moreFiltersWithCount":"More filters ({count})","filter":"Filter {resourceName}","noFiltersApplied":"No filters applied","cancel":"Cancel","done":"Done","clearAllFilters":"Clear all filters","clear":"Clear","clearLabel":"Clear {filterName}","addFilter":"Add filter","clearFilters":"Clear all","searchInView":"in:{viewName}"},"FilterPill":{"clear":"Clear","unsavedChanges":"Unsaved changes - {label}"},"IndexFilters":{"searchFilterTooltip":"Search and filter","searchFilterTooltipWithShortcut":"Search and filter (F)","searchFilterAccessibilityLabel":"Search and filter results","sort":"Sort your results","addView":"Add a new view","newView":"Custom search","SortButton":{"ariaLabel":"Sort the results","tooltip":"Sort","title":"Sort by","sorting":{"asc":"Ascending","desc":"Descending","az":"A-Z","za":"Z-A"}},"EditColumnsButton":{"tooltip":"Edit columns","accessibilityLabel":"Customize table column order and visibility"},"UpdateButtons":{"cancel":"Cancel","update":"Update","save":"Save","saveAs":"Save as","modal":{"title":"Save view as","label":"Name","sameName":"A view with this name already exists. Please choose a different name.","save":"Save","cancel":"Cancel"}}},"IndexProvider":{"defaultItemSingular":"Item","defaultItemPlural":"Items","allItemsSelected":"All {itemsLength}+ {resourceNamePlural} are selected","selected":"{selectedItemsCount} selected","a11yCheckboxDeselectAllSingle":"Deselect {resourceNameSingular}","a11yCheckboxSelectAllSingle":"Select {resourceNameSingular}","a11yCheckboxDeselectAllMultiple":"Deselect all {itemsLength} {resourceNamePlural}","a11yCheckboxSelectAllMultiple":"Select all {itemsLength} {resourceNamePlural}"},"IndexTable":{"emptySearchTitle":"No {resourceNamePlural} found","emptySearchDescription":"Try changing the filters or search term","onboardingBadgeText":"New","resourceLoadingAccessibilityLabel":"Loading {resourceNamePlural}…","selectAllLabel":"Select all {resourceNamePlural}","selected":"{selectedItemsCount} selected","undo":"Undo","selectAllItems":"Select all {itemsLength}+ {resourceNamePlural}","selectItem":"Select {resourceName}","selectButtonText":"Select","sortAccessibilityLabel":"sort {direction} by"},"Loading":{"label":"Page loading bar"},"Modal":{"iFrameTitle":"body markup","modalWarning":"These required properties are missing from Modal: {missingProps}"},"Page":{"Header":{"rollupActionsLabel":"View actions for {title}","pageReadyAccessibilityLabel":"{title}. This page is ready"}},"Pagination":{"previous":"Previous","next":"Next","pagination":"Pagination"},"ProgressBar":{"negativeWarningMessage":"Values passed to the progress prop shouldn’t be negative. Resetting {progress} to 0.","exceedWarningMessage":"Values passed to the progress prop shouldn’t exceed 100. Setting {progress} to 100."},"ResourceList":{"sortingLabel":"Sort by","defaultItemSingular":"item","defaultItemPlural":"items","showing":"Showing {itemsCount} {resource}","showingTotalCount":"Showing {itemsCount} of {totalItemsCount} {resource}","loading":"Loading {resource}","selected":"{selectedItemsCount} selected","allItemsSelected":"All {itemsLength}+ {resourceNamePlural} in your store are selected","allFilteredItemsSelected":"All {itemsLength}+ {resourceNamePlural} in this filter are selected","selectAllItems":"Select all {itemsLength}+ {resourceNamePlural} in your store","selectAllFilteredItems":"Select all {itemsLength}+ {resourceNamePlural} in this filter","emptySearchResultTitle":"No {resourceNamePlural} found","emptySearchResultDescription":"Try changing the filters or search term","selectButtonText":"Select","a11yCheckboxDeselectAllSingle":"Deselect {resourceNameSingular}","a11yCheckboxSelectAllSingle":"Select {resourceNameSingular}","a11yCheckboxDeselectAllMultiple":"Deselect all {itemsLength} {resourceNamePlural}","a11yCheckboxSelectAllMultiple":"Select all {itemsLength} {resourceNamePlural}","Item":{"actionsDropdownLabel":"Actions for {accessibilityLabel}","actionsDropdown":"Actions dropdown","viewItem":"View details for {itemName}"},"BulkActions":{"actionsActivatorLabel":"Actions","moreActionsActivatorLabel":"More actions"}},"SkeletonPage":{"loadingLabel":"Page loading"},"Tabs":{"newViewAccessibilityLabel":"Create new view","newViewTooltip":"Create view","toggleTabsLabel":"More views","Tab":{"rename":"Rename view","duplicate":"Duplicate view","edit":"Edit view","editColumns":"Edit columns","delete":"Delete view","copy":"Copy of {name}","deleteModal":{"title":"Delete view?","description":"This can’t be undone. {viewName} view will no longer be available in your admin.","cancel":"Cancel","delete":"Delete view"}},"RenameModal":{"title":"Rename view","label":"Name","cancel":"Cancel","create":"Save","errors":{"sameName":"A view with this name already exists. Please choose a different name."}},"DuplicateModal":{"title":"Duplicate view","label":"Name","cancel":"Cancel","create":"Create view","errors":{"sameName":"A view with this name already exists. Please choose a different name."}},"CreateViewModal":{"title":"Create new view","label":"Name","cancel":"Cancel","create":"Create view","errors":{"sameName":"A view with this name already exists. Please choose a different name."}}},"Tag":{"ariaLabel":"Remove {children}"},"TextField":{"characterCount":"{count} characters","characterCountWithMaxLength":"{count} of {limit} characters used"},"TooltipOverlay":{"accessibilityLabel":"Tooltip: {label}"},"TopBar":{"toggleMenuLabel":"Toggle menu","SearchField":{"clearButtonLabel":"Clear","search":"Search"}},"MediaCard":{"dismissButton":"Dismiss","popoverButton":"Actions"},"VideoThumbnail":{"playButtonA11yLabel":{"default":"Play video","defaultWithDuration":"Play video of length {duration}","duration":{"hours":{"other":{"only":"{hourCount} hours","andMinutes":"{hourCount} hours and {minuteCount} minutes","andMinute":"{hourCount} hours and {minuteCount} minute","minutesAndSeconds":"{hourCount} hours, {minuteCount} minutes, and {secondCount} seconds","minutesAndSecond":"{hourCount} hours, {minuteCount} minutes, and {secondCount} second","minuteAndSeconds":"{hourCount} hours, {minuteCount} minute, and {secondCount} seconds","minuteAndSecond":"{hourCount} hours, {minuteCount} minute, and {secondCount} second","andSeconds":"{hourCount} hours and {secondCount} seconds","andSecond":"{hourCount} hours and {secondCount} second"},"one":{"only":"{hourCount} hour","andMinutes":"{hourCount} hour and {minuteCount} minutes","andMinute":"{hourCount} hour and {minuteCount} minute","minutesAndSeconds":"{hourCount} hour, {minuteCount} minutes, and {secondCount} seconds","minutesAndSecond":"{hourCount} hour, {minuteCount} minutes, and {secondCount} second","minuteAndSeconds":"{hourCount} hour, {minuteCount} minute, and {secondCount} seconds","minuteAndSecond":"{hourCount} hour, {minuteCount} minute, and {secondCount} second","andSeconds":"{hourCount} hour and {secondCount} seconds","andSecond":"{hourCount} hour and {secondCount} second"}},"minutes":{"other":{"only":"{minuteCount} minutes","andSeconds":"{minuteCount} minutes and {secondCount} seconds","andSecond":"{minuteCount} minutes and {secondCount} second"},"one":{"only":"{minuteCount} minute","andSeconds":"{minuteCount} minute and {secondCount} seconds","andSecond":"{minuteCount} minute and {secondCount} second"}},"seconds":{"other":"{secondCount} seconds","one":"{secondCount} second"}}}}}');
const polarisTranslations = {
  Polaris
};
const polarisStyles = "/assets/styles-Cg-8NA1P.css";
function loginErrorMessage(loginErrors) {
  if ((loginErrors == null ? void 0 : loginErrors.shop) === LoginErrorType.MissingShop) {
    return { shop: "Please enter your shop domain to log in" };
  } else if ((loginErrors == null ? void 0 : loginErrors.shop) === LoginErrorType.InvalidShop) {
    return { shop: "Please enter a valid shop domain to log in" };
  }
  return {};
}
const links$4 = () => [{ rel: "stylesheet", href: polarisStyles }];
const loader$g = async ({ request }) => {
  const errors = loginErrorMessage(await login(request));
  return { errors, polarisTranslations };
};
const action$8 = async ({ request }) => {
  const errors = loginErrorMessage(await login(request));
  return {
    errors
  };
};
function Auth() {
  const loaderData = useLoaderData();
  const actionData = useActionData();
  const [shop, setShop] = useState("");
  const { errors } = actionData || loaderData;
  return /* @__PURE__ */ jsx(AppProvider, { i18n: loaderData.polarisTranslations, children: /* @__PURE__ */ jsx(Page$5, { children: /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsx(Form$1, { method: "post", children: /* @__PURE__ */ jsxs(FormLayout, { children: [
    /* @__PURE__ */ jsx(Text, { variant: "headingMd", as: "h2", children: "Log in" }),
    /* @__PURE__ */ jsx(
      TextField,
      {
        type: "text",
        name: "shop",
        label: "Shop domain",
        helpText: "example.myshopify.com",
        value: shop,
        onChange: setShop,
        autoComplete: "on",
        error: errors.shop
      }
    ),
    /* @__PURE__ */ jsx(Button, { submit: true, children: "Log in" })
  ] }) }) }) }) });
}
const route36 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$8,
  default: Auth,
  links: links$4,
  loader: loader$g
}, Symbol.toStringTag, { value: "Module" }));
const PlanContext = createContext(null);
const PLANS = {
  starter: {
    id: "starter",
    name: "Standard",
    monthlyPrice: 4.99,
    yearlyPrice: 39.99,
    campaignLimit: 20,
    features: [
      "Show on specific pages",
      "Up to 500 Spins/Month",
      "Basic Analytics",
      "Email Support",
      "20 Campaign"
    ],
    popular: false
  },
  lite: {
    id: "lite",
    name: "Lite",
    monthlyPrice: 4.99,
    yearlyPrice: 49.99,
    campaignLimit: 5,
    features: [
      "Upto 300 impressions",
      "Multiple campaigns",
      "Show on specific pages",
      "A/B testing",
      "Conversion Booster"
    ],
    popular: true
  },
  premium: {
    id: "premium",
    name: "Premium",
    monthlyPrice: 40,
    yearlyPrice: 400,
    campaignLimit: 20,
    features: [
      "Upto 300 impressions",
      "Multiple campaigns",
      "Show on specific pages",
      "A/B testing",
      "Conversion Booster",
      "Priority Support",
      "Custom Branding"
    ],
    popular: false
  }
};
function PlanProvider({ children, initialDiscountCodes = [] }) {
  const [discountCodes, setDiscountCodes] = useState(() => {
    if (typeof window !== "undefined") {
      try {
        const storedCodes = localStorage.getItem("GLOBAL_DISCOUNT_CODES");
        if (storedCodes) {
          const parsedCodes = JSON.parse(storedCodes);
          if (parsedCodes && parsedCodes.length > 0) {
            console.log(
              "PlanProvider - Using localStorage discount codes:",
              parsedCodes.length
            );
            return parsedCodes;
          }
        }
      } catch (e) {
        console.error("Error parsing stored discount codes:", e);
      }
    }
    if (typeof window !== "undefined" && window.GLOBAL_DISCOUNT_CODES && window.GLOBAL_DISCOUNT_CODES.length > 0) {
      console.log(
        "PlanProvider - Using global discount codes:",
        window.GLOBAL_DISCOUNT_CODES.length
      );
      return window.GLOBAL_DISCOUNT_CODES;
    }
    console.log(
      "PlanProvider - Using initial discount codes:",
      initialDiscountCodes
    );
    return initialDiscountCodes;
  });
  console.log("PlanProvider initialized with discount codes:", discountCodes);
  useEffect(() => {
    if (discountCodes.length === 0) {
      if (typeof window !== "undefined") {
        try {
          const storedCodes = localStorage.getItem("GLOBAL_DISCOUNT_CODES");
          if (storedCodes) {
            const parsedCodes = JSON.parse(storedCodes);
            if (parsedCodes && parsedCodes.length > 0) {
              console.log(
                "PlanProvider - Updating from localStorage:",
                parsedCodes.length
              );
              setDiscountCodes(parsedCodes);
              return;
            }
          }
        } catch (e) {
          console.error("Error parsing stored discount codes:", e);
        }
        if (window.GLOBAL_DISCOUNT_CODES && window.GLOBAL_DISCOUNT_CODES.length > 0) {
          console.log(
            "PlanProvider - Updating from global:",
            window.GLOBAL_DISCOUNT_CODES.length
          );
          setDiscountCodes(window.GLOBAL_DISCOUNT_CODES);
          return;
        }
      }
      if (initialDiscountCodes && initialDiscountCodes.length > 0) {
        console.log(
          "PlanProvider - Updating from initial props:",
          initialDiscountCodes.length
        );
        setDiscountCodes(initialDiscountCodes);
      }
    }
  }, [initialDiscountCodes, discountCodes.length]);
  const fetchAndSetDiscountCodes = async () => {
    try {
      console.log("PlanProvider - Fetching discount codes from API...");
      const response = await fetch("/api/discount-codes");
      if (!response.ok) {
        throw new Error(
          `Failed to fetch discount codes: ${response.statusText}`
        );
      }
      const data = await response.json();
      if (data.success && data.codes && data.codes.length > 0) {
        console.log("PlanProvider - Successfully fetched codes:", data.codes);
        setDiscountCodes(data.codes);
        if (typeof window !== "undefined") {
          window.GLOBAL_DISCOUNT_CODES = data.codes;
          try {
            localStorage.setItem(
              "GLOBAL_DISCOUNT_CODES",
              JSON.stringify(data.codes)
            );
          } catch (e) {
            console.error("Failed to store discount codes in localStorage:", e);
          }
        }
        return data.codes;
      } else {
        if (discountCodes.length > 0) {
          console.log(
            "PlanProvider - API returned no codes, using existing codes:",
            discountCodes.length
          );
          return discountCodes;
        }
        throw new Error(data.error || "No discount codes available");
      }
    } catch (error) {
      console.error("PlanProvider - Error fetching discount codes:", error);
      if (discountCodes.length > 0) {
        console.log(
          "PlanProvider - Fetch failed, using existing codes:",
          discountCodes.length
        );
        return discountCodes;
      }
      throw error;
    }
  };
  const [currentPlan, setCurrentPlan] = useState(() => {
    if (typeof window !== "undefined") {
      const storedPlan = localStorage.getItem("currentPlan");
      return storedPlan ? JSON.parse(storedPlan) : PLANS.starter;
    }
    return PLANS.starter;
  });
  const [billingCycle, setBillingCycle] = useState(() => {
    if (typeof window !== "undefined") {
      const storedCycle = localStorage.getItem("billingCycle");
      return storedCycle || "monthly";
    }
    return "monthly";
  });
  useEffect(() => {
    if (typeof window !== "undefined") {
      localStorage.setItem("currentPlan", JSON.stringify(currentPlan));
    }
  }, [currentPlan]);
  useEffect(() => {
    if (typeof window !== "undefined") {
      localStorage.setItem("billingCycle", billingCycle);
    }
  }, [billingCycle]);
  const changePlan = (planId) => {
    if (PLANS[planId]) {
      setCurrentPlan(PLANS[planId]);
      return true;
    }
    return false;
  };
  const changeBillingCycle = (cycle) => {
    if (cycle === "monthly" || cycle === "yearly") {
      setBillingCycle(cycle);
      return true;
    }
    return false;
  };
  const getPlans = () => {
    return Object.values(PLANS);
  };
  const canCreateCampaign = (campaignCount) => {
    return campaignCount < currentPlan.campaignLimit;
  };
  return /* @__PURE__ */ jsx(
    PlanContext.Provider,
    {
      value: {
        currentPlan,
        billingCycle,
        changePlan,
        changeBillingCycle,
        getPlans,
        canCreateCampaign,
        discountCodes,
        // <-- expose discount codes globally
        setDiscountCodes,
        // <-- allow setting discount codes
        fetchAndSetDiscountCodes,
        // <-- method to fetch codes
        PLANS
      },
      children
    }
  );
}
function usePlan() {
  const context = useContext(PlanContext);
  if (!context) {
    throw new Error("usePlan must be used within a PlanProvider");
  }
  return context;
}
var ee = { exports: {} }, L = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Oe;
function dr() {
  if (Oe)
    return L;
  Oe = 1;
  var R = React, v = Symbol.for("react.element"), y = Symbol.for("react.fragment"), c = Object.prototype.hasOwnProperty, C = R.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, x = { key: true, ref: true, __self: true, __source: true };
  function h(a, d, b) {
    var m, T = {}, w = null, E = null;
    b !== void 0 && (w = "" + b), d.key !== void 0 && (w = "" + d.key), d.ref !== void 0 && (E = d.ref);
    for (m in d)
      c.call(d, m) && !x.hasOwnProperty(m) && (T[m] = d[m]);
    if (a && a.defaultProps)
      for (m in d = a.defaultProps, d)
        T[m] === void 0 && (T[m] = d[m]);
    return { $$typeof: v, type: a, key: w, ref: E, props: T, _owner: C.current };
  }
  return L.Fragment = y, L.jsx = h, L.jsxs = h, L;
}
var $ = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Pe;
function vr() {
  return Pe || (Pe = 1, process.env.NODE_ENV !== "production" && function() {
    var R = React, v = Symbol.for("react.element"), y = Symbol.for("react.portal"), c = Symbol.for("react.fragment"), C = Symbol.for("react.strict_mode"), x = Symbol.for("react.profiler"), h = Symbol.for("react.provider"), a = Symbol.for("react.context"), d = Symbol.for("react.forward_ref"), b = Symbol.for("react.suspense"), m = Symbol.for("react.suspense_list"), T = Symbol.for("react.memo"), w = Symbol.for("react.lazy"), E = Symbol.for("react.offscreen"), k = Symbol.iterator, W = "@@iterator";
    function Y(e) {
      if (e === null || typeof e != "object")
        return null;
      var r = k && e[k] || e[W];
      return typeof r == "function" ? r : null;
    }
    var O = R.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function p(e) {
      {
        for (var r = arguments.length, t = new Array(r > 1 ? r - 1 : 0), n = 1; n < r; n++)
          t[n - 1] = arguments[n];
        ke("error", e, t);
      }
    }
    function ke(e, r, t) {
      {
        var n = O.ReactDebugCurrentFrame, u = n.getStackAddendum();
        u !== "" && (r += "%s", t = t.concat([u]));
        var s = t.map(function(o) {
          return String(o);
        });
        s.unshift("Warning: " + r), Function.prototype.apply.call(console[e], console, s);
      }
    }
    var De = false, Ae = false, Fe = false, Ie = false, Ne = false, te;
    te = Symbol.for("react.module.reference");
    function Le(e) {
      return !!(typeof e == "string" || typeof e == "function" || e === c || e === x || Ne || e === C || e === b || e === m || Ie || e === E || De || Ae || Fe || typeof e == "object" && e !== null && (e.$$typeof === w || e.$$typeof === T || e.$$typeof === h || e.$$typeof === a || e.$$typeof === d || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      e.$$typeof === te || e.getModuleId !== void 0));
    }
    function $e(e, r, t) {
      var n = e.displayName;
      if (n)
        return n;
      var u = r.displayName || r.name || "";
      return u !== "" ? t + "(" + u + ")" : t;
    }
    function ne(e) {
      return e.displayName || "Context";
    }
    function P(e) {
      if (e == null)
        return null;
      if (typeof e.tag == "number" && p("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof e == "function")
        return e.displayName || e.name || null;
      if (typeof e == "string")
        return e;
      switch (e) {
        case c:
          return "Fragment";
        case y:
          return "Portal";
        case x:
          return "Profiler";
        case C:
          return "StrictMode";
        case b:
          return "Suspense";
        case m:
          return "SuspenseList";
      }
      if (typeof e == "object")
        switch (e.$$typeof) {
          case a:
            var r = e;
            return ne(r) + ".Consumer";
          case h:
            var t = e;
            return ne(t._context) + ".Provider";
          case d:
            return $e(e, e.render, "ForwardRef");
          case T:
            var n = e.displayName || null;
            return n !== null ? n : P(e.type) || "Memo";
          case w: {
            var u = e, s = u._payload, o = u._init;
            try {
              return P(o(s));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    var D = Object.assign, I = 0, ae, ie, oe, ue, se, le, fe;
    function ce() {
    }
    ce.__reactDisabledLog = true;
    function We() {
      {
        if (I === 0) {
          ae = console.log, ie = console.info, oe = console.warn, ue = console.error, se = console.group, le = console.groupCollapsed, fe = console.groupEnd;
          var e = {
            configurable: true,
            enumerable: true,
            value: ce,
            writable: true
          };
          Object.defineProperties(console, {
            info: e,
            log: e,
            warn: e,
            error: e,
            group: e,
            groupCollapsed: e,
            groupEnd: e
          });
        }
        I++;
      }
    }
    function Ye() {
      {
        if (I--, I === 0) {
          var e = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: D({}, e, {
              value: ae
            }),
            info: D({}, e, {
              value: ie
            }),
            warn: D({}, e, {
              value: oe
            }),
            error: D({}, e, {
              value: ue
            }),
            group: D({}, e, {
              value: se
            }),
            groupCollapsed: D({}, e, {
              value: le
            }),
            groupEnd: D({}, e, {
              value: fe
            })
          });
        }
        I < 0 && p("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var J = O.ReactCurrentDispatcher, G;
    function M(e, r, t) {
      {
        if (G === void 0)
          try {
            throw Error();
          } catch (u) {
            var n = u.stack.trim().match(/\n( *(at )?)/);
            G = n && n[1] || "";
          }
        return `
` + G + e;
      }
    }
    var z = false, B;
    {
      var Me = typeof WeakMap == "function" ? WeakMap : Map;
      B = new Me();
    }
    function de(e, r) {
      if (!e || z)
        return "";
      {
        var t = B.get(e);
        if (t !== void 0)
          return t;
      }
      var n;
      z = true;
      var u = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var s;
      s = J.current, J.current = null, We();
      try {
        if (r) {
          var o = function() {
            throw Error();
          };
          if (Object.defineProperty(o.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(o, []);
            } catch (S) {
              n = S;
            }
            Reflect.construct(e, [], o);
          } else {
            try {
              o.call();
            } catch (S) {
              n = S;
            }
            e.call(o.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (S) {
            n = S;
          }
          e();
        }
      } catch (S) {
        if (S && n && typeof S.stack == "string") {
          for (var i = S.stack.split(`
`), g = n.stack.split(`
`), l = i.length - 1, f = g.length - 1; l >= 1 && f >= 0 && i[l] !== g[f]; )
            f--;
          for (; l >= 1 && f >= 0; l--, f--)
            if (i[l] !== g[f]) {
              if (l !== 1 || f !== 1)
                do
                  if (l--, f--, f < 0 || i[l] !== g[f]) {
                    var _ = `
` + i[l].replace(" at new ", " at ");
                    return e.displayName && _.includes("<anonymous>") && (_ = _.replace("<anonymous>", e.displayName)), typeof e == "function" && B.set(e, _), _;
                  }
                while (l >= 1 && f >= 0);
              break;
            }
        }
      } finally {
        z = false, J.current = s, Ye(), Error.prepareStackTrace = u;
      }
      var F = e ? e.displayName || e.name : "", we = F ? M(F) : "";
      return typeof e == "function" && B.set(e, we), we;
    }
    function Be(e, r, t) {
      return de(e, false);
    }
    function Ve(e) {
      var r = e.prototype;
      return !!(r && r.isReactComponent);
    }
    function V(e, r, t) {
      if (e == null)
        return "";
      if (typeof e == "function")
        return de(e, Ve(e));
      if (typeof e == "string")
        return M(e);
      switch (e) {
        case b:
          return M("Suspense");
        case m:
          return M("SuspenseList");
      }
      if (typeof e == "object")
        switch (e.$$typeof) {
          case d:
            return Be(e.render);
          case T:
            return V(e.type, r, t);
          case w: {
            var n = e, u = n._payload, s = n._init;
            try {
              return V(s(u), r, t);
            } catch {
            }
          }
        }
      return "";
    }
    var U = Object.prototype.hasOwnProperty, ve = {}, pe = O.ReactDebugCurrentFrame;
    function q(e) {
      if (e) {
        var r = e._owner, t = V(e.type, e._source, r ? r.type : null);
        pe.setExtraStackFrame(t);
      } else
        pe.setExtraStackFrame(null);
    }
    function Ue(e, r, t, n, u) {
      {
        var s = Function.call.bind(U);
        for (var o in e)
          if (s(e, o)) {
            var i = void 0;
            try {
              if (typeof e[o] != "function") {
                var g = Error((n || "React class") + ": " + t + " type `" + o + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof e[o] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw g.name = "Invariant Violation", g;
              }
              i = e[o](r, o, n, t, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (l) {
              i = l;
            }
            i && !(i instanceof Error) && (q(u), p("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", n || "React class", t, o, typeof i), q(null)), i instanceof Error && !(i.message in ve) && (ve[i.message] = true, q(u), p("Failed %s type: %s", t, i.message), q(null));
          }
      }
    }
    var qe = Array.isArray;
    function K(e) {
      return qe(e);
    }
    function Je(e) {
      {
        var r = typeof Symbol == "function" && Symbol.toStringTag, t = r && e[Symbol.toStringTag] || e.constructor.name || "Object";
        return t;
      }
    }
    function Ge(e) {
      try {
        return ye(e), false;
      } catch {
        return true;
      }
    }
    function ye(e) {
      return "" + e;
    }
    function he(e) {
      if (Ge(e))
        return p("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Je(e)), ye(e);
    }
    var N = O.ReactCurrentOwner, ze = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    }, me, ge;
    function Ke(e) {
      if (U.call(e, "ref")) {
        var r = Object.getOwnPropertyDescriptor(e, "ref").get;
        if (r && r.isReactWarning)
          return false;
      }
      return e.ref !== void 0;
    }
    function Xe(e) {
      if (U.call(e, "key")) {
        var r = Object.getOwnPropertyDescriptor(e, "key").get;
        if (r && r.isReactWarning)
          return false;
      }
      return e.key !== void 0;
    }
    function Ze(e, r) {
      if (typeof e.ref == "string" && N.current && r) ;
    }
    function Qe(e, r) {
      {
        var t = function() {
          me || (me = true, p("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", r));
        };
        t.isReactWarning = true, Object.defineProperty(e, "key", {
          get: t,
          configurable: true
        });
      }
    }
    function He(e, r) {
      {
        var t = function() {
          ge || (ge = true, p("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", r));
        };
        t.isReactWarning = true, Object.defineProperty(e, "ref", {
          get: t,
          configurable: true
        });
      }
    }
    var er = function(e, r, t, n, u, s, o) {
      var i = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: v,
        // Built-in properties that belong on the element
        type: e,
        key: r,
        ref: t,
        props: o,
        // Record the component responsible for creating this element.
        _owner: s
      };
      return i._store = {}, Object.defineProperty(i._store, "validated", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      }), Object.defineProperty(i, "_self", {
        configurable: false,
        enumerable: false,
        writable: false,
        value: n
      }), Object.defineProperty(i, "_source", {
        configurable: false,
        enumerable: false,
        writable: false,
        value: u
      }), Object.freeze && (Object.freeze(i.props), Object.freeze(i)), i;
    };
    function rr(e, r, t, n, u) {
      {
        var s, o = {}, i = null, g = null;
        t !== void 0 && (he(t), i = "" + t), Xe(r) && (he(r.key), i = "" + r.key), Ke(r) && (g = r.ref, Ze(r, u));
        for (s in r)
          U.call(r, s) && !ze.hasOwnProperty(s) && (o[s] = r[s]);
        if (e && e.defaultProps) {
          var l = e.defaultProps;
          for (s in l)
            o[s] === void 0 && (o[s] = l[s]);
        }
        if (i || g) {
          var f = typeof e == "function" ? e.displayName || e.name || "Unknown" : e;
          i && Qe(o, f), g && He(o, f);
        }
        return er(e, i, g, u, n, N.current, o);
      }
    }
    var Z = O.ReactCurrentOwner, Ee = O.ReactDebugCurrentFrame;
    function A(e) {
      if (e) {
        var r = e._owner, t = V(e.type, e._source, r ? r.type : null);
        Ee.setExtraStackFrame(t);
      } else
        Ee.setExtraStackFrame(null);
    }
    var Q;
    Q = false;
    function H(e) {
      return typeof e == "object" && e !== null && e.$$typeof === v;
    }
    function be() {
      {
        if (Z.current) {
          var e = P(Z.current.type);
          if (e)
            return `

Check the render method of \`` + e + "`.";
        }
        return "";
      }
    }
    function tr(e) {
      {
        return "";
      }
    }
    var _e = {};
    function nr(e) {
      {
        var r = be();
        if (!r) {
          var t = typeof e == "string" ? e : e.displayName || e.name;
          t && (r = `

Check the top-level render call using <` + t + ">.");
        }
        return r;
      }
    }
    function Re(e, r) {
      {
        if (!e._store || e._store.validated || e.key != null)
          return;
        e._store.validated = true;
        var t = nr(r);
        if (_e[t])
          return;
        _e[t] = true;
        var n = "";
        e && e._owner && e._owner !== Z.current && (n = " It was passed a child from " + P(e._owner.type) + "."), A(e), p('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', t, n), A(null);
      }
    }
    function Te(e, r) {
      {
        if (typeof e != "object")
          return;
        if (K(e))
          for (var t = 0; t < e.length; t++) {
            var n = e[t];
            H(n) && Re(n, r);
          }
        else if (H(e))
          e._store && (e._store.validated = true);
        else if (e) {
          var u = Y(e);
          if (typeof u == "function" && u !== e.entries)
            for (var s = u.call(e), o; !(o = s.next()).done; )
              H(o.value) && Re(o.value, r);
        }
      }
    }
    function ar(e) {
      {
        var r = e.type;
        if (r == null || typeof r == "string")
          return;
        var t;
        if (typeof r == "function")
          t = r.propTypes;
        else if (typeof r == "object" && (r.$$typeof === d || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        r.$$typeof === T))
          t = r.propTypes;
        else
          return;
        if (t) {
          var n = P(r);
          Ue(t, e.props, "prop", n, e);
        } else if (r.PropTypes !== void 0 && !Q) {
          Q = true;
          var u = P(r);
          p("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", u || "Unknown");
        }
        typeof r.getDefaultProps == "function" && !r.getDefaultProps.isReactClassApproved && p("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
    function ir(e) {
      {
        for (var r = Object.keys(e.props), t = 0; t < r.length; t++) {
          var n = r[t];
          if (n !== "children" && n !== "key") {
            A(e), p("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", n), A(null);
            break;
          }
        }
        e.ref !== null && (A(e), p("Invalid attribute `ref` supplied to `React.Fragment`."), A(null));
      }
    }
    function Ce(e, r, t, n, u, s) {
      {
        var o = Le(e);
        if (!o) {
          var i = "";
          (e === void 0 || typeof e == "object" && e !== null && Object.keys(e).length === 0) && (i += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var g = tr();
          g ? i += g : i += be();
          var l;
          e === null ? l = "null" : K(e) ? l = "array" : e !== void 0 && e.$$typeof === v ? (l = "<" + (P(e.type) || "Unknown") + " />", i = " Did you accidentally export a JSX literal instead of a component?") : l = typeof e, p("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", l, i);
        }
        var f = rr(e, r, t, u, s);
        if (f == null)
          return f;
        if (o) {
          var _ = r.children;
          if (_ !== void 0)
            if (n)
              if (K(_)) {
                for (var F = 0; F < _.length; F++)
                  Te(_[F], e);
                Object.freeze && Object.freeze(_);
              } else
                p("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else
              Te(_, e);
        }
        return e === c ? ir(f) : ar(f), f;
      }
    }
    function or(e, r, t) {
      return Ce(e, r, t, true);
    }
    function ur(e, r, t) {
      return Ce(e, r, t, false);
    }
    var sr = ur, lr = or;
    $.Fragment = c, $.jsx = sr, $.jsxs = lr;
  }()), $;
}
process.env.NODE_ENV === "production" ? ee.exports = dr() : ee.exports = vr();
var re = ee.exports;
const pr = forwardRef(function({ open: v, onShow: y, onHide: c, children: C, ...x }, h) {
  const [a, d] = useState(), { titleBar: b, saveBar: m, modalContent: T } = Children.toArray(C).reduce(
    (E, k) => {
      const W = yr(k), Y = W === "ui-title-bar", O = W === "ui-save-bar";
      return !Y && !O && E.modalContent.push(k), {
        ...E,
        titleBar: Y ? k : E.titleBar,
        saveBar: O ? k : E.saveBar
      };
    },
    { modalContent: [] }
  ), w = a && a.content ? cr.createPortal(T, a.content) : null;
  return useEffect(() => {
    a && (v ? a.show() : a.hide());
  }, [a, v]), useEffect(() => {
    if (!(!a || !y))
      return a.addEventListener("show", y), () => {
        a.removeEventListener("show", y);
      };
  }, [a, y]), useEffect(() => {
    if (!(!a || !c))
      return a.addEventListener("hide", c), () => {
        a.removeEventListener("hide", c);
      };
  }, [a, c]), useEffect(() => {
    if (a)
      return () => {
        a.hide();
      };
  }, [a]), /* @__PURE__ */ re.jsxs(
    "ui-modal",
    {
      ...x,
      ref: (E) => {
        d(E), h && (typeof h == "function" ? h(E) : h.current = E);
      },
      children: [
        b,
        m,
        /* @__PURE__ */ re.jsx("div", { children: w })
      ]
    }
  );
});
pr.displayName = "ui-modal";
function yr(R) {
  if (!R)
    return;
  const v = typeof R == "object" && "type" in R ? R.type : void 0, y = typeof v == "string" ? v : void 0, c = typeof v == "object" ? v.displayName : void 0;
  return y || (typeof c == "string" ? c : void 0);
}
const br = "ui-nav-menu", _r = "ui-title-bar", hr = forwardRef(function({ open: v, onShow: y, onHide: c, children: C, ...x }, h) {
  const [a, d] = useState();
  return useEffect(() => {
    a && (v ? a.show() : a.hide());
  }, [a, v]), useEffect(() => {
    if (!(!a || !y))
      return a.addEventListener("show", y), () => {
        a.removeEventListener("show", y);
      };
  }, [a, y]), useEffect(() => {
    if (!(!a || !c))
      return a.addEventListener("hide", c), () => {
        a.removeEventListener("hide", c);
      };
  }, [a, c]), useEffect(() => {
    if (a)
      return () => {
        a.hide();
      };
  }, [a]), /* @__PURE__ */ re.jsx(
    "ui-save-bar",
    {
      ...x,
      ref: (b) => {
        d(b), h && (typeof h == "function" ? h(b) : h.current = b);
      },
      children: C
    }
  );
});
hr.displayName = "ui-save-bar";
const mr = new Proxy(
  {},
  {
    get(R, v) {
      throw Error(
        `shopify.${String(
          v
        )} can't be used in a server environment. You likely need to move this code into an Effect.`
      );
    }
  }
);
function Rr() {
  if (typeof window > "u")
    return mr;
  if (!window.shopify)
    throw Error(
      "The shopify global is not defined. This likely means the App Bridge script tag was not added correctly to this page"
    );
  return window.shopify;
}
const CampaignContext = createContext(null);
const SAMPLE_CAMPAIGNS = [];
const DEFAULT_RULES = {
  appearingRules: {
    exitIntent: { enabled: false, device: "desktop" },
    timeDelay: { enabled: false, seconds: 5 },
    pageScroll: { enabled: false, percentage: 20 },
    pageCount: { enabled: false, pages: 2 },
    clicksCount: { enabled: false, clicks: 2 },
    inactivity: { enabled: false, seconds: 30 }
  },
  pageTargeting: {
    enabled: true,
    url: "www.yourdomain.com",
    urls: []
  },
  popupAgain: {
    enabled: true,
    timer: { minutes: 10, seconds: 0 }
  },
  displayFrequency: {
    enabled: true,
    frequency: "once_a_day",
    visitorType: "everyone"
    // everyone, new, return
  }
};
function CampaignProvider({ children }) {
  const app = Rr();
  const fetchWithAuth = authenticatedFetch(app);
  const { currentPlan } = usePlan();
  const [dbStatus, setDbStatus] = useState({
    connected: false,
    checking: true
  });
  useNavigate();
  const [shopInfo, setShopInfo] = useState({
    name: "wheel-of-wonders",
    formatted: "wheel-of-wonders"
  });
  const [isOfflineMode, setIsOfflineMode] = useState(false);
  const [campaignData, setCampaignData] = useState({
    name: "Campaign Name",
    step: 1,
    look: "custom",
    // custom or readyMade
    color: "singleTone",
    // singleTone or dualTone
    primaryColor: "#fe5300",
    secondaryColor: "#767676",
    tertiaryColor: "#444444",
    completionPercentage: 25,
    rules: DEFAULT_RULES,
    shop: "wheel-of-wonders"
    // Default shop name
  });
  const [allCampaigns, setAllCampaigns] = useState(SAMPLE_CAMPAIGNS);
  const [isLoading, setIsLoading] = useState(true);
  const safeJsonParse = async (response) => {
    const contentType = response.headers.get("content-type");
    if (!contentType || !contentType.includes("application/json")) {
      return null;
    }
    try {
      return await response.json();
    } catch (error) {
      return null;
    }
  };
  const getShopFromSources = () => {
    try {
      const urlParams = new URLSearchParams(window.location.search);
      let shop = urlParams.get("shop");
      if (shop) {
        return shop;
      }
      try {
        const hash = window.location.hash;
        if (hash) {
          const hashParams = new URLSearchParams(hash.substring(1));
          shop = hashParams.get("shop");
          if (shop) {
            return shop;
          }
        }
      } catch (e) {
      }
      try {
        shop = localStorage.getItem("shopify_shop_domain");
        if (shop) {
          return shop;
        }
      } catch (e) {
      }
      if (window.shopOrigin) {
        shop = window.shopOrigin;
        return shop;
      }
      try {
        if (window.shopify && window.shopify.config && window.shopify.config.shop) {
          shop = window.shopify.config.shop;
          return shop;
        }
      } catch (e) {
      }
      const hostname = window.location.hostname;
      if (hostname.includes(".myshopify.com")) {
        shop = hostname;
        return shop;
      }
      try {
        const referrer = document.referrer;
        if (referrer && referrer.includes(".myshopify.com")) {
          const referrerUrl = new URL(referrer);
          if (referrerUrl.hostname.includes(".myshopify.com")) {
            shop = referrerUrl.hostname;
            return shop;
          }
        }
      } catch (e) {
      }
      return null;
    } catch (error) {
      return null;
    }
  };
  useEffect(() => {
    const getShopInfo = async () => {
      try {
        const clientShop = getShopFromSources();
        if (clientShop) {
          const formattedName = clientShop.replace(/\.myshopify\.com$/i, "");
          setShopInfo({
            name: clientShop,
            formatted: formattedName
          });
          try {
            localStorage.setItem("shopify_shop_domain", clientShop);
          } catch (e) {
          }
          setCampaignData((prev) => ({
            ...prev,
            shop: clientShop
          }));
        }
        try {
          const response = await fetch("/", {
            method: "GET",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json"
            },
            credentials: "include"
          });
          if (response.ok) {
            const data = await safeJsonParse(response);
            if (data && data.shop) {
              const shopName = data.shop;
              const formattedName = shopName.replace(/\.myshopify\.com$/i, "");
              setShopInfo({
                name: shopName,
                formatted: formattedName
              });
              try {
                localStorage.setItem("shopify_shop_domain", shopName);
              } catch (e) {
              }
              setCampaignData((prev) => ({
                ...prev,
                shop: shopName
              }));
              setIsOfflineMode(false);
              return;
            }
          } else if (response.status === 401) {
          }
        } catch (fetchError) {
        }
        try {
          const statusResponse = await fetch("/api/db-status", {
            method: "GET",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json"
            },
            credentials: "include"
          });
          if (statusResponse.ok) {
            const statusData = await safeJsonParse(statusResponse);
            if (statusData && statusData.shop) {
              const shopName = statusData.shop;
              const formattedName = shopName.replace(/\.myshopify\.com$/i, "");
              setShopInfo({
                name: shopName,
                formatted: formattedName
              });
              try {
                localStorage.setItem("shopify_shop_domain", shopName);
              } catch (e) {
              }
              setCampaignData((prev) => ({
                ...prev,
                shop: shopName
              }));
              setIsOfflineMode(false);
              return;
            }
          }
        } catch (fallbackError) {
        }
        if (clientShop) {
          setIsOfflineMode(false);
        } else {
          setIsOfflineMode(true);
        }
      } catch (error) {
        const clientShop = getShopFromSources();
        if (clientShop) {
          const formattedName = clientShop.replace(/\.myshopify\.com$/i, "");
          setShopInfo({
            name: clientShop,
            formatted: formattedName
          });
          setCampaignData((prev) => ({
            ...prev,
            shop: clientShop
          }));
          setIsOfflineMode(false);
        } else {
          setIsOfflineMode(true);
        }
      }
    };
    getShopInfo();
  }, []);
  useEffect(() => {
    const checkDbConnection = async () => {
      try {
        const response = await fetch("/api/db-status", {
          method: "GET",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json"
          },
          credentials: "include"
        });
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        const data = await safeJsonParse(response);
        if (!data) {
          throw new Error("Invalid JSON response from db-status");
        }
        setDbStatus({
          connected: data.connected,
          checking: false,
          error: data.error,
          dbName: data.dbName,
          shop: data.shop
        });
        if (data.shop) {
          const formattedName = data.shop.replace(/\.myshopify\.com$/i, "");
          setShopInfo({
            name: data.shop,
            formatted: formattedName
          });
          try {
            localStorage.setItem("shopify_shop_domain", data.shop);
          } catch (e) {
          }
          setCampaignData((prev) => ({
            ...prev,
            shop: data.shop
          }));
        }
      } catch (error) {
        setDbStatus({
          connected: false,
          checking: false,
          error: error.message
        });
      }
    };
    checkDbConnection();
  }, []);
  useEffect(() => {
    const loadCampaigns = async () => {
      if (dbStatus.checking || !dbStatus.connected) {
        setIsLoading(false);
        return;
      }
      try {
        setIsLoading(true);
        const response = await fetch("/api/campaigns", {
          method: "GET",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json"
          },
          credentials: "include"
        });
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        const data = await safeJsonParse(response);
        if (!data) {
          throw new Error("Invalid JSON response from campaigns API");
        }
        const campaigns = data.campaigns || data;
        if (Array.isArray(campaigns) && campaigns.length > 0) {
          setAllCampaigns(campaigns);
          if (data.shop) {
            const formattedName = data.shop.replace(/\.myshopify\.com$/i, "");
            setShopInfo({
              name: data.shop,
              formatted: formattedName
            });
          }
        }
      } catch (error) {
      } finally {
        setIsLoading(false);
      }
    };
    loadCampaigns();
  }, [dbStatus]);
  const updateCampaignData = useCallback((newData) => {
    setCampaignData((prevData) => ({ ...prevData, ...newData }));
  }, []);
  const updateCampaignName = useCallback((name) => {
    setCampaignData((prevData) => ({
      ...prevData,
      name: name || "Campaign Name"
    }));
    toast.success("Campaign name updated!");
  }, []);
  const updateLook = useCallback((look) => {
    setCampaignData((prevData) => ({
      ...prevData,
      look
    }));
    toast.success(`Look updated to ${look}!`);
  }, []);
  const updateColor = useCallback((color) => {
    setCampaignData((prevData) => ({
      ...prevData,
      color
    }));
    toast.success(`Color type updated to ${color}!`);
  }, []);
  const updateColorValues = useCallback((colorType, value) => {
    setCampaignData((prevData) => {
      const updatedData = { ...prevData };
      if (colorType === "primary") {
        updatedData.primaryColor = value;
      } else if (colorType === "secondary") {
        updatedData.secondaryColor = value;
      } else if (colorType === "tertiary") {
        updatedData.tertiaryColor = value;
      }
      return updatedData;
    });
    toast.success(`${colorType} color updated!`);
  }, []);
  const updateCampaignRules = useCallback((ruleType, ruleData) => {
    setCampaignData((prevData) => {
      const currentRules = prevData.rules || {};
      const currentTypeRules = currentRules[ruleType] ? { ...currentRules[ruleType] } : {};
      const updatedRules = {
        ...currentRules,
        [ruleType]: {
          ...currentTypeRules,
          ...ruleData
        }
      };
      return {
        ...prevData,
        rules: updatedRules
      };
    });
  }, []);
  const toggleRuleEnabled = useCallback((ruleType, subRuleType = null) => {
    setCampaignData((prevData) => {
      const updatedRules = { ...prevData.rules };
      if (subRuleType) {
        updatedRules[ruleType] = {
          ...updatedRules[ruleType],
          [subRuleType]: {
            ...updatedRules[ruleType][subRuleType],
            enabled: !updatedRules[ruleType][subRuleType].enabled
          }
        };
      } else {
        updatedRules[ruleType] = {
          ...updatedRules[ruleType],
          enabled: !updatedRules[ruleType].enabled
        };
      }
      return {
        ...prevData,
        rules: updatedRules
      };
    });
    const ruleName = subRuleType || ruleType;
    toast.success(
      `${ruleName.charAt(0).toUpperCase() + ruleName.slice(1)} ${subRuleType ? "rule" : ""} toggled!`
    );
  }, []);
  const updateRuleValue = useCallback((ruleType, subRuleType, field, value) => {
    setCampaignData((prevData) => {
      const updatedRules = { ...prevData.rules };
      updatedRules[ruleType] = {
        ...updatedRules[ruleType],
        [subRuleType]: {
          ...updatedRules[ruleType][subRuleType],
          [field]: value
        }
      };
      return {
        ...prevData,
        rules: updatedRules
      };
    });
  }, []);
  const addPageTargetingUrl = useCallback((url) => {
    if (!url) return;
    setCampaignData((prevData) => {
      if (prevData.rules.pageTargeting.urls.includes(url)) {
        return prevData;
      }
      const updatedPageTargeting = {
        ...prevData.rules.pageTargeting,
        urls: [...prevData.rules.pageTargeting.urls, url]
      };
      return {
        ...prevData,
        rules: {
          ...prevData.rules,
          pageTargeting: updatedPageTargeting
        }
      };
    });
    toast.success(`URL "${url}" added to page targeting!`);
  }, []);
  const removePageTargetingUrl = useCallback((url) => {
    setCampaignData((prevData) => {
      const updatedUrls = prevData.rules.pageTargeting.urls.filter(
        (u) => u !== url
      );
      return {
        ...prevData,
        rules: {
          ...prevData.rules,
          pageTargeting: {
            ...prevData.rules.pageTargeting,
            urls: updatedUrls
          }
        }
      };
    });
    toast.success(`URL "${url}" removed from page targeting!`);
  }, []);
  const nextStep = useCallback(() => {
    setCampaignData((prevData) => {
      const newStep = Math.min(4, prevData.step + 1);
      const newPercentage = Math.min(100, newStep / 4 * 100);
      return {
        ...prevData,
        step: newStep,
        completionPercentage: newPercentage
      };
    });
    toast.success("Moving to next step!");
  }, []);
  const prevStep = useCallback(() => {
    setCampaignData((prevData) => {
      const newStep = Math.max(1, prevData.step - 1);
      const newPercentage = Math.max(25, newStep / 4 * 100);
      return {
        ...prevData,
        step: newStep,
        completionPercentage: newPercentage
      };
    });
    toast.success("Moving to previous step!");
  }, []);
  const checkCanCreateCampaign = useCallback(() => {
    return allCampaigns.length < currentPlan.campaignLimit;
  }, [allCampaigns.length, currentPlan.campaignLimit]);
  const deactivateOtherCampaigns = useCallback(
    async (activeId) => {
      const otherActiveCampaigns = allCampaigns.filter(
        (campaign) => campaign.id !== activeId && campaign.status === "active"
      );
      if (otherActiveCampaigns.length === 0) {
        return;
      }
      if (dbStatus.connected) {
        for (const campaign of otherActiveCampaigns) {
          try {
            await fetch(`/api/campaigns/${campaign.id}`, {
              method: "PUT",
              headers: { "Content-Type": "application/json" },
              credentials: "include",
              body: JSON.stringify({ ...campaign, status: "draft" })
            });
          } catch (error) {
          }
        }
      }
      setAllCampaigns(
        (prev) => prev.map(
          (campaign) => campaign.id !== activeId && campaign.status === "active" ? { ...campaign, status: "draft" } : campaign
        )
      );
      if (otherActiveCampaigns.length > 0) {
        toast.success(
          `Deactivated ${otherActiveCampaigns.length} other campaign(s)`
        );
      }
    },
    [allCampaigns, dbStatus.connected]
  );
  const saveCampaign = useCallback(
    async (campaign) => {
      let campaignWithId;
      try {
        campaignWithId = {
          ...campaign,
          id: campaign.id || `campaign-${Date.now()}`,
          name: campaign.name || "Campaign Name",
          createdAt: campaign.createdAt || (/* @__PURE__ */ new Date()).toISOString(),
          status: campaign.status || "draft",
          primaryColor: campaign.primaryColor || "#fe5300",
          secondaryColor: campaign.secondaryColor || "#767676",
          tertiaryColor: campaign.tertiaryColor || "#444444",
          look: campaign.look || "custom",
          color: campaign.color || "singleTone",
          rules: campaign.rules || campaignData.rules || {
            appearingRules: {
              exitIntent: { enabled: true, device: "desktop" },
              timeDelay: { enabled: true, seconds: 5 },
              pageScroll: { enabled: true, percentage: 20 },
              pageCount: { enabled: false, pages: 2 },
              clicksCount: { enabled: false, clicks: 2 },
              inactivity: { enabled: false, seconds: 30 }
            },
            pageTargeting: {
              enabled: true,
              url: "www.yourdomain.com",
              urls: []
            },
            popupAgain: {
              enabled: true,
              timer: { minutes: 10, seconds: 0 }
            },
            displayFrequency: {
              enabled: true,
              frequency: "once_a_day",
              visitorType: "everyone"
            }
          },
          shop: shopInfo.name || campaign.shop || "wheel-of-wonders.myshopify.com"
        };
        if (campaignWithId.status === "active") {
          await deactivateOtherCampaigns(campaignWithId.id);
        }
        if (dbStatus.connected) {
          const existingIndex = allCampaigns.findIndex(
            (c) => c.id === campaignWithId.id
          );
          if (existingIndex >= 0) {
            const response = await fetch(
              `/api/campaigns/${campaignWithId.id}`,
              {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                credentials: "include",
                body: JSON.stringify(campaignWithId)
              }
            );
            if (!response.ok) {
              throw new Error(
                `Failed to update campaign: ${response.statusText}`
              );
            }
            const updatedCampaign = await response.json();
            if (updatedCampaign.shop) {
              const formattedName = updatedCampaign.shop.replace(
                /\.myshopify\.com$/i,
                ""
              );
              setShopInfo({
                name: updatedCampaign.shop,
                formatted: formattedName
              });
            }
          } else {
            const response = await fetch("/api/campaigns", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              credentials: "include",
              body: JSON.stringify(campaignWithId)
            });
            if (!response.ok) {
              throw new Error(
                `Failed to create campaign: ${response.statusText}`
              );
            }
            const newCampaign = await response.json();
            if (newCampaign.shop) {
              const formattedName = newCampaign.shop.replace(
                /\.myshopify\.com$/i,
                ""
              );
              setShopInfo({
                name: newCampaign.shop,
                formatted: formattedName
              });
            }
          }
        }
        setAllCampaigns((prev) => {
          const existingIndex = prev.findIndex(
            (c) => c.id === campaignWithId.id
          );
          if (existingIndex >= 0) {
            return prev.map(
              (c) => c.id === campaignWithId.id ? campaignWithId : c
            );
          } else {
            return [...prev, campaignWithId];
          }
        });
        setCampaignData((prevData) => ({
          ...prevData,
          ...campaignWithId
        }));
        if (campaignWithId.status === "active") {
          try {
            const syncResponse = await fetchWithAuth(
              "/sync-campaign-metafields",
              {
                method: "POST",
                body: JSON.stringify({ campaignId: campaignWithId.id }),
                headers: {
                  "Content-Type": "application/json"
                }
              }
            );
            if (syncResponse.ok) {
              toast.success("Campaign saved and synced to storefront!");
            } else {
              toast.success(
                "Campaign saved! Sync to storefront may take a moment."
              );
            }
          } catch (syncError) {
            toast.success(
              "Campaign saved! Sync to storefront may take a moment."
            );
          }
        } else {
          toast.success("Campaign saved successfully!");
        }
        return campaignWithId;
      } catch (error) {
        toast.error(`Failed to save campaign: ${error.message}`);
        const existingIndex = allCampaigns.findIndex(
          (c) => c.id === campaignWithId.id
        );
        setAllCampaigns((prev) => {
          if (existingIndex >= 0) {
            return prev.map(
              (c) => c.id === campaignWithId.id ? campaignWithId : c
            );
          } else {
            return [...prev, campaignWithId];
          }
        });
        return campaignWithId;
      }
    },
    [
      allCampaigns,
      campaignData.rules,
      dbStatus.connected,
      shopInfo.name,
      deactivateOtherCampaigns
    ]
  );
  const deleteCampaign = useCallback(
    async (campaignId) => {
      try {
        if (dbStatus.connected) {
          const response = await fetch(`/api/campaigns/${campaignId}`, {
            method: "DELETE"
          });
          if (!response.ok) {
            throw new Error(
              `Failed to delete campaign: ${response.statusText}`
            );
          }
        }
        setAllCampaigns(
          (prev) => prev.filter((campaign) => campaign.id !== campaignId)
        );
        toast.success("Campaign deleted successfully!");
        return { success: true };
      } catch (error) {
        toast.error(`Failed to delete campaign: ${error.message}`);
        setAllCampaigns(
          (prev) => prev.filter((campaign) => campaign.id !== campaignId)
        );
        return { success: true };
      }
    },
    [dbStatus.connected]
  );
  const toggleCampaignStatus = useCallback(
    async (campaignId) => {
      try {
        const campaign = allCampaigns.find((c) => c.id === campaignId);
        if (!campaign) {
          throw new Error("Campaign not found");
        }
        const newStatus = campaign.status === "active" ? "draft" : "active";
        if (newStatus === "active") {
          await deactivateOtherCampaigns(campaignId);
        }
        if (dbStatus.connected) {
          const formData = new FormData();
          formData.append("status", newStatus);
          formData.append("shop", shopInfo.name || "");
          const response = await fetch(`/api/campaigns/status/${campaignId}`, {
            method: "POST",
            credentials: "include",
            body: formData
          });
          if (!response.ok) {
            throw new Error(
              `Failed to toggle campaign status: ${response.statusText}`
            );
          }
        }
        setAllCampaigns(
          (prev) => prev.map(
            (c) => c.id === campaignId ? { ...c, status: newStatus } : c
          )
        );
        console.log("activated new campaign", newStatus, campaignId);
        if (newStatus === "active") {
          try {
            const syncResponse = await fetch("/api/sync-campaign-metafields", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              credentials: "include",
              body: JSON.stringify({ campaignId })
            });
            if (syncResponse.ok) {
              toast.success("Campaign activated and synced to storefront!");
            } else {
              console.log("RELOADING PAGE not ok", syncResponse);
              toast.success(
                "Campaign activated! Sync to storefront may take a moment."
              );
            }
          } catch (syncError) {
            console.log("RELOADING PAGE", syncError);
            toast.success(
              "Campaign activated! Sync to storefront may take a moment."
            );
          }
        } else {
          try {
            const clearResponse = await fetch("/api/sync-campaign-metafields", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              credentials: "include",
              body: JSON.stringify({ campaignId: null, clear: true })
            });
            if (clearResponse.ok) {
              toast.success(
                "Campaign deactivated and removed from storefront!"
              );
            } else {
              toast.success("Campaign deactivated!");
            }
          } catch (clearError) {
            toast.success("Campaign deactivated!");
          }
        }
        return { success: true, status: newStatus };
      } catch (error) {
        toast.error(`Failed to toggle campaign status: ${error.message}`);
        const campaign = allCampaigns.find((c) => c.id === campaignId);
        if (campaign) {
          const newStatus = campaign.status === "active" ? "draft" : "active";
          if (newStatus === "active") {
            setAllCampaigns(
              (prev) => prev.map((c) => {
                if (c.id === campaignId) {
                  return { ...c, status: newStatus };
                } else if (c.status === "active") {
                  return { ...c, status: "draft" };
                }
                return c;
              })
            );
          } else {
            setAllCampaigns(
              (prev) => prev.map(
                (c) => c.id === campaignId ? { ...c, status: newStatus } : c
              )
            );
          }
          return { success: true, status: newStatus };
        }
        return { success: false };
      }
    },
    [allCampaigns, dbStatus.connected, deactivateOtherCampaigns, shopInfo.name]
  );
  const getActiveCampaign2 = useCallback(() => {
    return allCampaigns.find((campaign) => campaign.status === "active") || null;
  }, [allCampaigns]);
  return /* @__PURE__ */ jsx(
    CampaignContext.Provider,
    {
      value: {
        campaignData,
        allCampaigns,
        isLoading,
        dbStatus,
        shopInfo,
        isOfflineMode,
        updateCampaignData,
        updateCampaignName,
        updateLook,
        updateColor,
        updateColorValues,
        updateCampaignRules,
        toggleRuleEnabled,
        updateRuleValue,
        addPageTargetingUrl,
        removePageTargetingUrl,
        nextStep,
        prevStep,
        saveCampaign,
        deleteCampaign,
        toggleCampaignStatus,
        checkCanCreateCampaign,
        getActiveCampaign: getActiveCampaign2
      },
      children
    }
  );
}
function useCampaign() {
  const context = useContext(CampaignContext);
  if (!context) {
    throw new Error("useCampaign must be used within a CampaignProvider");
  }
  return context;
}
function Navigation2({ createButtonText = "Create Campaign" }) {
  const location = useLocation();
  const currentPath = location.pathname;
  useEffect(() => {
    console.log(`Current path: ${currentPath}`);
  }, [currentPath]);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsxs("div", { className: "flex justify-between mb-8", children: [
      /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 rounded-lg shadow-sm p-1 flex items-center flex-1 mr-4", children: [
        /* @__PURE__ */ jsx(
          Link$1,
          {
            to: "/index",
            className: `${currentPath === "/app" || currentPath === "/app" ? "bg-indigo-600 text-white" : "text-gray-700"} px-8 py-3 rounded-lg font-medium text-center flex-1`,
            children: "Home"
          }
        ),
        /* @__PURE__ */ jsx(
          Link$1,
          {
            to: "/campaigns",
            className: `${currentPath.startsWith("/campaigns") ? "bg-indigo-600 text-white" : "text-gray-700"} px-8 py-3 rounded-lg font-medium text-center flex-1`,
            children: "All Campaigns"
          }
        ),
        /* @__PURE__ */ jsx(
          Link$1,
          {
            to: "/tutorial",
            className: `${currentPath === "/tutorial" ? "bg-indigo-600 text-white" : "text-gray-700"} px-8 py-3 rounded-lg font-medium text-center flex-1`,
            children: "Tutorial"
          }
        )
      ] }),
      /* @__PURE__ */ jsx("div", { className: "flex items-center space-x-4", children: /* @__PURE__ */ jsx(
        Link$1,
        {
          to: currentPath.includes("/campaigns/create") ? "/campaigns" : "/campaigns/create",
          className: "bg-indigo-600 text-white px-6 py-3 rounded-lg font-medium whitespace-nowrap",
          children: createButtonText
        }
      ) })
    ] }),
    /* @__PURE__ */ jsx(Outlet, {})
  ] });
}
function CampaignActiveIndicator() {
  const { allCampaigns, isLoading } = useCampaign();
  const activeCampaign = allCampaigns.find(
    (campaign) => campaign.status === "active"
  );
  if (isLoading) {
    return /* @__PURE__ */ jsxs("div", { className: "flex items-center text-gray-500", children: [
      /* @__PURE__ */ jsx("div", { className: "animate-pulse h-3 w-3 rounded-full bg-gray-300 mr-2" }),
      "Loading campaigns..."
    ] });
  }
  if (!activeCampaign) {
    return /* @__PURE__ */ jsxs("div", { className: "flex items-center text-amber-600", children: [
      /* @__PURE__ */ jsx("div", { className: "h-3 w-3 rounded-full bg-amber-500 mr-2" }),
      "No active campaign"
    ] });
  }
  return /* @__PURE__ */ jsxs("div", { className: "flex items-center text-green-600", children: [
    /* @__PURE__ */ jsx("div", { className: "h-3 w-3 rounded-full bg-green-500 mr-2" }),
    "Active: ",
    activeCampaign.name
  ] });
}
const styles = "/assets/global-DdA01ViP.css";
const links$3 = () => [{ rel: "stylesheet", href: styles }];
function CampaignList() {
  const {
    allCampaigns,
    toggleCampaignStatus,
    deleteCampaign,
    isLoading,
    dbStatus
  } = useCampaign();
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [campaignToDelete, setCampaignToDelete] = useState(null);
  const navigate = useNavigate$1();
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric"
    });
  };
  const handleCreateClick = () => {
    navigate("/campaigns/create");
  };
  const handleViewClick = (campaignId) => {
    console.log("Navigating to view campaign:", campaignId);
    navigate(`/campaigns/${campaignId}`);
  };
  const handleEditClick = (campaignId) => {
    console.log("Navigating to edit campaign:", campaignId);
    navigate(`/campaigns/edit/${campaignId}`);
  };
  const handleToggleStatus = async (campaignId, currentStatus) => {
    try {
      await toggleCampaignStatus(campaignId);
      const newStatus = currentStatus === "active" ? "draft" : "active";
      toast.success(
        `Campaign ${newStatus === "active" ? "activated" : "deactivated"} successfully!`
      );
    } catch (error) {
      toast.error("Failed to update campaign status");
    }
  };
  const handleDeleteClick = (campaign) => {
    setCampaignToDelete(campaign);
    setShowDeleteModal(true);
  };
  const confirmDelete = async () => {
    if (!campaignToDelete) return;
    try {
      await deleteCampaign(campaignToDelete.id);
      setShowDeleteModal(false);
      setCampaignToDelete(null);
    } catch (error) {
      toast.error("Failed to delete campaign");
    }
  };
  useEffect(() => {
    if (dbStatus.status === "error") {
      toast.error(
        "Database connection error. Some features may not work properly."
      );
    }
  }, [dbStatus]);
  return /* @__PURE__ */ jsxs("div", { className: "container mx-auto px-4 py-6", children: [
    /* @__PURE__ */ jsx(Navigation2, {}),
    /* @__PURE__ */ jsxs("div", { className: "mt-8", children: [
      /* @__PURE__ */ jsx("div", { className: "flex justify-between items-center mb-8", children: /* @__PURE__ */ jsxs("div", { children: [
        /* @__PURE__ */ jsx("h1", { className: "text-3xl font-bold", children: "All Campaigns" }),
        /* @__PURE__ */ jsx("div", { className: "mt-2", children: /* @__PURE__ */ jsx(CampaignActiveIndicator, {}) })
      ] }) }),
      isLoading ? /* @__PURE__ */ jsx("div", { className: "flex justify-center py-10", children: /* @__PURE__ */ jsx("div", { className: "animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500" }) }) : allCampaigns.length > 0 ? /* @__PURE__ */ jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6", children: allCampaigns.map((campaign) => /* @__PURE__ */ jsxs(
        "div",
        {
          className: "bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300",
          children: [
            /* @__PURE__ */ jsx(
              "div",
              {
                className: "h-3",
                style: {
                  backgroundColor: campaign.primaryColor || "#fe5300"
                }
              }
            ),
            /* @__PURE__ */ jsxs("div", { className: "p-5", children: [
              /* @__PURE__ */ jsxs("div", { className: "flex justify-between items-start mb-4", children: [
                /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold text-gray-800 truncate", children: campaign.name || "Unnamed Campaign" }),
                /* @__PURE__ */ jsx("div", { className: "flex items-center", children: /* @__PURE__ */ jsx(
                  "button",
                  {
                    onClick: () => handleToggleStatus(
                      campaign.id || campaign._id,
                      campaign.status
                    ),
                    className: `relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 ${campaign.status === "active" ? "bg-indigo-600" : "bg-gray-200"}`,
                    children: /* @__PURE__ */ jsx(
                      "span",
                      {
                        className: `${campaign.status === "active" ? "translate-x-6" : "translate-x-1"} inline-block h-4 w-4 transform rounded-full bg-white transition-transform`
                      }
                    )
                  }
                ) })
              ] }),
              /* @__PURE__ */ jsx("div", { className: "flex items-center mb-4", children: /* @__PURE__ */ jsx(
                "span",
                {
                  className: `px-2 py-1 text-xs font-semibold rounded-full ${campaign.status === "active" ? "bg-green-100 text-green-800" : campaign.status === "draft" ? "bg-yellow-100 text-yellow-800" : "bg-gray-100 text-gray-800"}`,
                  children: campaign.status ? campaign.status.charAt(0).toUpperCase() + campaign.status.slice(1) : "Draft"
                }
              ) }),
              /* @__PURE__ */ jsxs("div", { className: "text-sm text-gray-600 mb-4", children: [
                /* @__PURE__ */ jsxs("div", { className: "flex items-center mb-1", children: [
                  /* @__PURE__ */ jsx(
                    "svg",
                    {
                      className: "w-4 h-4 mr-1",
                      fill: "none",
                      stroke: "currentColor",
                      viewBox: "0 0 24 24",
                      xmlns: "http://www.w3.org/2000/svg",
                      children: /* @__PURE__ */ jsx(
                        "path",
                        {
                          strokeLinecap: "round",
                          strokeLinejoin: "round",
                          strokeWidth: "2",
                          d: "M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                        }
                      )
                    }
                  ),
                  "Created:",
                  " ",
                  campaign.createdAt ? formatDate(campaign.createdAt) : "N/A"
                ] }),
                campaign.look && /* @__PURE__ */ jsxs("div", { className: "flex items-center mb-1", children: [
                  /* @__PURE__ */ jsx(
                    "svg",
                    {
                      className: "w-4 h-4 mr-1",
                      fill: "none",
                      stroke: "currentColor",
                      viewBox: "0 0 24 24",
                      xmlns: "http://www.w3.org/2000/svg",
                      children: /* @__PURE__ */ jsx(
                        "path",
                        {
                          strokeLinecap: "round",
                          strokeLinejoin: "round",
                          strokeWidth: "2",
                          d: "M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01"
                        }
                      )
                    }
                  ),
                  "Look:",
                  " ",
                  campaign.look ? campaign.look.charAt(0).toUpperCase() + campaign.look.slice(1) : "N/A"
                ] }),
                campaign.color && /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ jsx(
                    "svg",
                    {
                      className: "w-4 h-4 mr-1",
                      fill: "none",
                      stroke: "currentColor",
                      viewBox: "0 0 24 24",
                      xmlns: "http://www.w3.org/2000/svg",
                      children: /* @__PURE__ */ jsx(
                        "path",
                        {
                          strokeLinecap: "round",
                          strokeLinejoin: "round",
                          strokeWidth: "2",
                          d: "M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01"
                        }
                      )
                    }
                  ),
                  "Color:",
                  " ",
                  campaign.color ? campaign.color.charAt(0).toUpperCase() + campaign.color.slice(1) : "N/A"
                ] })
              ] }),
              /* @__PURE__ */ jsxs("div", { className: "flex justify-between pt-3 border-t border-gray-100", children: [
                /* @__PURE__ */ jsxs("div", { className: "flex space-x-2", children: [
                  /* @__PURE__ */ jsxs(
                    "button",
                    {
                      onClick: () => handleViewClick(campaign.id || campaign._id),
                      className: "text-indigo-600 hover:text-indigo-800 text-sm font-medium flex items-center",
                      children: [
                        /* @__PURE__ */ jsxs(
                          "svg",
                          {
                            xmlns: "http://www.w3.org/2000/svg",
                            className: "h-4 w-4 mr-1",
                            fill: "none",
                            viewBox: "0 0 24 24",
                            stroke: "currentColor",
                            children: [
                              /* @__PURE__ */ jsx(
                                "path",
                                {
                                  strokeLinecap: "round",
                                  strokeLinejoin: "round",
                                  strokeWidth: "2",
                                  d: "M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                                }
                              ),
                              /* @__PURE__ */ jsx(
                                "path",
                                {
                                  strokeLinecap: "round",
                                  strokeLinejoin: "round",
                                  strokeWidth: "2",
                                  d: "M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                                }
                              )
                            ]
                          }
                        ),
                        "View"
                      ]
                    }
                  ),
                  /* @__PURE__ */ jsxs(
                    "button",
                    {
                      onClick: () => handleEditClick(campaign.id || campaign._id),
                      className: "text-indigo-600 hover:text-indigo-800 text-sm font-medium flex items-center",
                      children: [
                        /* @__PURE__ */ jsx(
                          "svg",
                          {
                            xmlns: "http://www.w3.org/2000/svg",
                            className: "h-4 w-4 mr-1",
                            fill: "none",
                            viewBox: "0 0 24 24",
                            stroke: "currentColor",
                            children: /* @__PURE__ */ jsx(
                              "path",
                              {
                                strokeLinecap: "round",
                                strokeLinejoin: "round",
                                strokeWidth: "2",
                                d: "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
                              }
                            )
                          }
                        ),
                        "Edit"
                      ]
                    }
                  )
                ] }),
                /* @__PURE__ */ jsxs(
                  "button",
                  {
                    onClick: () => handleDeleteClick(campaign),
                    className: "text-red-500 hover:text-red-700 text-sm font-medium flex items-center",
                    children: [
                      /* @__PURE__ */ jsx(
                        "svg",
                        {
                          xmlns: "http://www.w3.org/2000/svg",
                          className: "h-4 w-4 mr-1",
                          fill: "none",
                          viewBox: "0 0 24 24",
                          stroke: "currentColor",
                          children: /* @__PURE__ */ jsx(
                            "path",
                            {
                              strokeLinecap: "round",
                              strokeLinejoin: "round",
                              strokeWidth: "2",
                              d: "M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                            }
                          )
                        }
                      ),
                      "Delete"
                    ]
                  }
                )
              ] })
            ] })
          ]
        },
        campaign.id || campaign._id || `campaign-${Math.random()}`
      )) }) : /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg shadow-md p-8 text-center", children: [
        /* @__PURE__ */ jsx(
          "svg",
          {
            className: "w-16 h-16 mx-auto text-gray-400 mb-4",
            fill: "none",
            stroke: "currentColor",
            viewBox: "0 0 24 24",
            xmlns: "http://www.w3.org/2000/svg",
            children: /* @__PURE__ */ jsx(
              "path",
              {
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "2",
                d: "M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
              }
            )
          }
        ),
        /* @__PURE__ */ jsx("h3", { className: "text-xl font-medium text-gray-700 mb-2", children: "No Campaigns Found" }),
        /* @__PURE__ */ jsx("p", { className: "text-gray-500 mb-6", children: "You haven't created any campaigns yet. Get started by creating your first campaign." }),
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: handleCreateClick,
            className: "px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors",
            disabled: dbStatus.status === "error",
            children: "Create Your First Campaign"
          }
        )
      ] })
    ] }),
    showDeleteModal && /* @__PURE__ */ jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ jsx("h3", { className: "text-xl font-bold mb-4", children: "Delete Campaign" }),
      /* @__PURE__ */ jsxs("p", { className: "text-gray-600 mb-6", children: [
        'Are you sure you want to delete "',
        campaignToDelete == null ? void 0 : campaignToDelete.name,
        '"? This action cannot be undone.'
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "flex justify-end space-x-3", children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: () => setShowDeleteModal(false),
            className: "px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors",
            children: "Cancel"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: confirmDelete,
            className: "px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors",
            children: "Delete"
          }
        )
      ] })
    ] }) })
  ] });
}
function Campaigns$1() {
  const location = useLocation();
  return /* @__PURE__ */ jsx(PlanProvider, { children: /* @__PURE__ */ jsxs(CampaignProvider, { children: [
    /* @__PURE__ */ jsx(Outlet, {}),
    location.pathname === "/campaigns" && /* @__PURE__ */ jsx(CampaignList, {})
  ] }) });
}
const route37 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Campaigns$1,
  links: links$3
}, Symbol.toStringTag, { value: "Module" }));
async function action$7({ request }) {
  console.log("=== Local Campaign Toggle Route Called ===");
  try {
    const formData = await request.formData();
    const campaignId = formData.get("campaignId");
    const action2 = formData.get("action");
    const shopName = formData.get("shopName") || "wheel-of-wonders.myshopify.com";
    console.log(
      "Campaign ID:",
      campaignId,
      "Action:",
      action2,
      "Shop:",
      shopName
    );
    if (!campaignId) {
      return json(
        { success: false, error: "Campaign ID is required" },
        { status: 400 }
      );
    }
    const { db } = await connectToDatabase$1(shopName);
    const campaign = await db.collection("campaigns").findOne({ id: campaignId });
    if (!campaign) {
      return json(
        { success: false, error: "Campaign not found" },
        { status: 404 }
      );
    }
    const newStatus = action2 === "activate" ? "active" : "draft";
    if (newStatus === "active") {
      await db.collection("campaigns").updateMany(
        { id: { $ne: campaignId }, status: "active" },
        { $set: { status: "draft" } }
      );
      console.log("Deactivated other active campaigns");
    }
    await db.collection("campaigns").updateOne({ id: campaignId }, { $set: { status: newStatus } });
    console.log(`Campaign ${campaignId} status updated to ${newStatus}`);
    const message = newStatus === "active" ? "Campaign activated successfully! (Storefront sync will be available once authentication is fixed)" : "Campaign deactivated successfully!";
    return json({
      success: true,
      message,
      status: newStatus,
      campaignId,
      authWarning: true
    });
  } catch (error) {
    console.error("Local campaign toggle error:", error);
    return json(
      {
        success: false,
        error: `Failed to toggle campaign: ${error.message}`
      },
      { status: 500 }
    );
  }
}
const route38 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$7
}, Symbol.toStringTag, { value: "Module" }));
function CampaignPreview() {
  const { campaignData } = useCampaign();
  const mainColor = campaignData.color === "singleTone" ? campaignData.primaryColor : campaignData.secondaryColor;
  const accentColor = campaignData.color === "dualTone" ? campaignData.primaryColor : campaignData.primaryColor;
  return /* @__PURE__ */ jsx("div", { className: "campaign-preview-container", children: /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 p-4 rounded-lg", children: [
    /* @__PURE__ */ jsx("div", { className: "flex items-center mb-4", children: /* @__PURE__ */ jsx("div", { className: "bg-indigo-600 text-white px-3 py-1 rounded-md text-sm font-medium", children: "Preview" }) }),
    /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg overflow-hidden shadow-md", children: [
      /* @__PURE__ */ jsx("div", { className: "p-6 border-b", children: /* @__PURE__ */ jsx("div", { className: "aspect-video bg-gray-50 rounded-lg flex items-center justify-center overflow-hidden", children: /* @__PURE__ */ jsxs("div", { className: "text-center p-4 max-w-md mx-auto", children: [
        /* @__PURE__ */ jsx(
          "h3",
          {
            className: "text-2xl font-bold mb-4",
            style: { color: mainColor },
            children: campaignData.name || "GO AHEAD GIVE IT A SPIN!"
          }
        ),
        /* @__PURE__ */ jsx("div", { className: "relative w-64 h-64 mx-auto my-4", children: /* @__PURE__ */ jsxs(
          "div",
          {
            className: "w-full h-full rounded-full relative",
            style: {
              background: campaignData.color === "dualTone" ? `conic-gradient(
                        ${mainColor} 0deg, 
                        ${mainColor} 90deg, 
                        ${accentColor} 90deg, 
                        ${accentColor} 180deg, 
                        ${mainColor} 180deg, 
                        ${mainColor} 270deg, 
                        ${accentColor} 270deg, 
                        ${accentColor} 360deg
                      )` : `conic-gradient(
                        ${mainColor} 0deg, 
                        ${mainColor} 90deg, 
                        white 90deg, 
                        white 180deg, 
                        ${mainColor} 180deg, 
                        ${mainColor} 270deg, 
                        white 270deg, 
                        white 360deg
                      )`
            },
            children: [
              /* @__PURE__ */ jsx("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-8 h-8 rounded-full bg-black" }) }),
              /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 right-0 transform translate-x-1/2 -translate-y-1/2", children: /* @__PURE__ */ jsx("div", { className: "w-4 h-4 bg-black rounded-full" }) })
            ]
          }
        ) }),
        /* @__PURE__ */ jsxs("div", { className: "mt-4", children: [
          /* @__PURE__ */ jsx(
            "input",
            {
              type: "text",
              className: "w-full p-2 border rounded mb-3 text-center",
              placeholder: "Enter your email"
            }
          ),
          /* @__PURE__ */ jsx(
            "button",
            {
              className: "w-full py-2 px-4 rounded font-bold text-white",
              style: { backgroundColor: mainColor },
              children: "SPIN NOW"
            }
          ),
          /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-500 mt-2", children: "*Terms and conditions apply" })
        ] })
      ] }) }) }),
      /* @__PURE__ */ jsx("div", { className: "p-6", children: /* @__PURE__ */ jsxs("div", { className: "w-40 mx-auto border border-gray-200 rounded-2xl overflow-hidden shadow-sm", children: [
        /* @__PURE__ */ jsx("div", { className: "bg-gray-100 h-6 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-16 h-1 bg-gray-300 rounded-full" }) }),
        /* @__PURE__ */ jsxs("div", { className: "bg-white p-2", children: [
          /* @__PURE__ */ jsx("div", { className: "flex justify-center mb-1", children: /* @__PURE__ */ jsx("div", { className: "w-6 h-6 rounded-full bg-red-500 flex items-center justify-center", children: /* @__PURE__ */ jsx("span", { className: "text-white text-xs", children: "S" }) }) }),
          /* @__PURE__ */ jsxs("div", { className: "text-center", children: [
            /* @__PURE__ */ jsx(
              "h4",
              {
                className: "text-xs font-bold",
                style: { color: mainColor },
                children: campaignData.name || "GO AHEAD GIVE IT A SPIN!"
              }
            ),
            /* @__PURE__ */ jsx("p", { className: "text-[6px] text-gray-500 my-1", children: "This is a special promotion just for you" }),
            /* @__PURE__ */ jsx(
              "button",
              {
                className: "w-full py-1 text-[8px] rounded font-bold text-white mt-2",
                style: { backgroundColor: mainColor },
                children: "SPIN NOW"
              }
            ),
            /* @__PURE__ */ jsx("p", { className: "text-[4px] text-gray-500 mt-1", children: "*Terms and conditions apply" })
          ] })
        ] })
      ] }) })
    ] })
  ] }) });
}
function StepOne() {
  const { campaignData, updateLook, updateColor, updateColorValues } = useCampaign();
  const [showColorPicker, setShowColorPicker] = useState(false);
  const [activeColorType, setActiveColorType] = useState("primary");
  const colorPalettes = {
    basic: [
      "#fe5300",
      "#ff0000",
      "#ff6b00",
      "#ffc700",
      "#00c853",
      "#00b0ff",
      "#304ffe",
      "#aa00ff"
    ],
    shopify: [
      "#95bf47",
      "#5e8e3e",
      "#212b35",
      "#637381",
      "#919eab",
      "#c4cdd5",
      "#dfe3e8",
      "#f4f6f8"
    ],
    modern: [
      "#ff5252",
      "#ff4081",
      "#e040fb",
      "#7c4dff",
      "#536dfe",
      "#448aff",
      "#40c4ff",
      "#18ffff"
    ],
    pastel: [
      "#ffcdd2",
      "#f8bbd0",
      "#e1bee7",
      "#d1c4e9",
      "#c5cae9",
      "#bbdefb",
      "#b3e5fc",
      "#b2ebf2"
    ],
    earth: [
      "#795548",
      "#a1887f",
      "#bcaaa4",
      "#d7ccc8",
      "#efebe9",
      "#8d6e63",
      "#6d4c41",
      "#5d4037"
    ]
  };
  const [activePalette, setActivePalette] = useState("basic");
  const handleLookChange = (look) => {
    console.log("Look change clicked:", look);
    updateLook(look);
  };
  const handleColorTypeChange = (colorType) => {
    console.log("Color type change clicked:", colorType);
    updateColor(colorType);
  };
  const handleColorChange = (colorType, value) => {
    console.log(`Color change: ${colorType} to ${value}`);
    updateColorValues(colorType, value);
    setShowColorPicker(false);
  };
  const toggleColorPicker = (colorType) => {
    console.log("Toggle color picker for:", colorType);
    setActiveColorType(colorType);
    setShowColorPicker(!showColorPicker);
  };
  return /* @__PURE__ */ jsxs("div", { className: "flex flex-col lg:flex-row gap-8 pb-24", children: [
    /* @__PURE__ */ jsxs("div", { className: "w-full lg:w-1/2", children: [
      /* @__PURE__ */ jsx("h2", { className: "text-2xl font-bold mb-6", children: "Pick Your" }),
      /* @__PURE__ */ jsxs("div", { className: "mb-8", children: [
        /* @__PURE__ */ jsx("h3", { className: "text-xl font-semibold text-indigo-700 mb-4", children: "Look" }),
        /* @__PURE__ */ jsx(
          "div",
          {
            className: `border p-4 mb-4 rounded-lg cursor-pointer ${campaignData.look === "custom" ? "border-indigo-500 bg-indigo-50" : "border-gray-300"}`,
            onClick: () => handleLookChange("custom"),
            children: /* @__PURE__ */ jsxs("div", { className: "flex items-start", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "radio",
                  id: "custom-layout",
                  name: "look",
                  className: "mt-1 mr-3",
                  checked: campaignData.look === "custom",
                  onChange: () => handleLookChange("custom")
                }
              ),
              /* @__PURE__ */ jsxs("div", { children: [
                /* @__PURE__ */ jsx(
                  "label",
                  {
                    htmlFor: "custom-layout",
                    className: "font-medium text-gray-900 cursor-pointer",
                    children: "Custom Layout"
                  }
                ),
                /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-500", children: "Design your way, from scratch." })
              ] })
            ] })
          }
        )
      ] }),
      /* @__PURE__ */ jsxs("div", { children: [
        /* @__PURE__ */ jsx("h3", { className: "text-xl font-semibold text-indigo-700 mb-4", children: "Color" }),
        /* @__PURE__ */ jsx(
          "div",
          {
            className: `border p-4 mb-4 rounded-lg cursor-pointer ${campaignData.color === "singleTone" ? "border-indigo-500 bg-indigo-50" : "border-gray-300"}`,
            onClick: () => handleColorTypeChange("singleTone"),
            children: /* @__PURE__ */ jsxs("div", { className: "flex items-start", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "radio",
                  id: "single-tone",
                  name: "color",
                  className: "mt-1 mr-3",
                  checked: campaignData.color === "singleTone",
                  onChange: () => handleColorTypeChange("singleTone")
                }
              ),
              /* @__PURE__ */ jsxs("div", { className: "flex-1", children: [
                /* @__PURE__ */ jsx(
                  "label",
                  {
                    htmlFor: "single-tone",
                    className: "font-medium text-gray-900 cursor-pointer",
                    children: "Single Tone"
                  }
                ),
                /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-500 mb-2", children: "Use one primary brand color" }),
                /* @__PURE__ */ jsxs("div", { className: "flex items-center mt-2", children: [
                  /* @__PURE__ */ jsx(
                    "button",
                    {
                      className: "w-10 h-10 rounded-full border border-gray-300 mr-2 shadow-sm hover:shadow-md",
                      style: { backgroundColor: campaignData.primaryColor },
                      onClick: (e) => {
                        e.stopPropagation();
                        toggleColorPicker("primary");
                      }
                    }
                  ),
                  /* @__PURE__ */ jsx("span", { className: "text-sm font-mono", children: campaignData.primaryColor })
                ] })
              ] })
            ] })
          }
        ),
        /* @__PURE__ */ jsx(
          "div",
          {
            className: `border p-4 rounded-lg cursor-pointer ${campaignData.color === "dualTone" ? "border-indigo-500 bg-indigo-50" : "border-gray-300"}`,
            onClick: () => handleColorTypeChange("dualTone"),
            children: /* @__PURE__ */ jsxs("div", { className: "flex items-start", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "radio",
                  id: "dual-tone",
                  name: "color",
                  className: "mt-1 mr-3",
                  checked: campaignData.color === "dualTone",
                  onChange: () => handleColorTypeChange("dualTone")
                }
              ),
              /* @__PURE__ */ jsxs("div", { className: "flex-1", children: [
                /* @__PURE__ */ jsx(
                  "label",
                  {
                    htmlFor: "dual-tone",
                    className: "font-medium text-gray-900 cursor-pointer",
                    children: "Dual Tone"
                  }
                ),
                /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-500 mb-2", children: "Select two of your brand colors" }),
                /* @__PURE__ */ jsxs("div", { className: "flex items-center mt-2 mb-2", children: [
                  /* @__PURE__ */ jsx(
                    "button",
                    {
                      className: "w-10 h-10 rounded-full border border-gray-300 mr-2 shadow-sm hover:shadow-md",
                      style: { backgroundColor: campaignData.secondaryColor },
                      onClick: (e) => {
                        e.stopPropagation();
                        toggleColorPicker("secondary");
                      }
                    }
                  ),
                  /* @__PURE__ */ jsx("span", { className: "text-sm font-mono", children: campaignData.secondaryColor })
                ] }),
                /* @__PURE__ */ jsxs("div", { className: "flex items-center mt-2", children: [
                  /* @__PURE__ */ jsx(
                    "button",
                    {
                      className: "w-10 h-10 rounded-full border border-gray-300 mr-2 shadow-sm hover:shadow-md",
                      style: { backgroundColor: campaignData.primaryColor },
                      onClick: (e) => {
                        e.stopPropagation();
                        toggleColorPicker("primary");
                      }
                    }
                  ),
                  /* @__PURE__ */ jsx("span", { className: "text-sm font-mono", children: campaignData.primaryColor })
                ] })
              ] })
            ] })
          }
        )
      ] }),
      showColorPicker && /* @__PURE__ */ jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxs("div", { className: "bg-white p-6 rounded-lg shadow-xl max-w-md w-full", children: [
        /* @__PURE__ */ jsxs("div", { className: "flex justify-between items-center mb-4", children: [
          /* @__PURE__ */ jsxs("h4", { className: "text-lg font-medium", children: [
            "Select Color for",
            " ",
            activeColorType === "primary" ? "Primary" : activeColorType === "secondary" ? "Secondary" : "Primary"
          ] }),
          /* @__PURE__ */ jsx(
            "button",
            {
              onClick: () => setShowColorPicker(false),
              className: "text-gray-500 hover:text-gray-700",
              children: /* @__PURE__ */ jsx(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  className: "h-6 w-6",
                  fill: "none",
                  viewBox: "0 0 24 24",
                  stroke: "currentColor",
                  children: /* @__PURE__ */ jsx(
                    "path",
                    {
                      strokeLinecap: "round",
                      strokeLinejoin: "round",
                      strokeWidth: 2,
                      d: "M6 18L18 6M6 6l12 12"
                    }
                  )
                }
              )
            }
          )
        ] }),
        /* @__PURE__ */ jsx("div", { className: "flex space-x-2 mb-4 overflow-x-auto pb-2", children: Object.keys(colorPalettes).map((palette) => /* @__PURE__ */ jsx(
          "button",
          {
            className: `px-3 py-1 text-sm rounded-full ${activePalette === palette ? "bg-indigo-600 text-white" : "bg-gray-200 text-gray-700"}`,
            onClick: () => setActivePalette(palette),
            children: palette.charAt(0).toUpperCase() + palette.slice(1)
          },
          palette
        )) }),
        /* @__PURE__ */ jsx("div", { className: "grid grid-cols-4 gap-3 mb-4", children: colorPalettes[activePalette].map((color) => /* @__PURE__ */ jsx(
          "button",
          {
            className: "w-12 h-12 rounded-full border hover:scale-110 transition-transform shadow-sm",
            style: { backgroundColor: color },
            onClick: () => handleColorChange(activeColorType, color)
          },
          color
        )) }),
        /* @__PURE__ */ jsxs("div", { className: "mt-4", children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium mb-1", children: "Custom Color:" }),
          /* @__PURE__ */ jsxs("div", { className: "flex", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "color",
                value: activeColorType === "primary" ? campaignData.primaryColor : activeColorType === "secondary" ? campaignData.secondaryColor : campaignData.primaryColor,
                onChange: (e) => handleColorChange(activeColorType, e.target.value),
                className: "w-10 h-10 p-0 border-0 rounded-full"
              }
            ),
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "text",
                value: activeColorType === "primary" ? campaignData.primaryColor : activeColorType === "secondary" ? campaignData.secondaryColor : campaignData.primaryColor,
                onChange: (e) => handleColorChange(activeColorType, e.target.value),
                className: "ml-2 text-sm border rounded px-2 py-1 w-24 font-mono",
                placeholder: "#000000"
              }
            ),
            /* @__PURE__ */ jsx(
              "button",
              {
                className: "ml-2 bg-indigo-600 text-white px-3 py-1 rounded text-sm",
                onClick: () => {
                  const currentColor = activeColorType === "primary" ? campaignData.primaryColor : activeColorType === "secondary" ? campaignData.secondaryColor : campaignData.primaryColor;
                  handleColorChange(activeColorType, currentColor);
                },
                children: "Apply"
              }
            )
          ] })
        ] })
      ] }) })
    ] }),
    /* @__PURE__ */ jsx("div", { className: "w-full lg:w-1/2", children: /* @__PURE__ */ jsx(CampaignPreview, {}) })
  ] });
}
function StepNavigation({
  onNext,
  nextButtonText,
  showNextButton = true,
  showPrevButton = true
}) {
  const { campaignData, updateCampaignName, nextStep, prevStep } = useCampaign();
  const [isEditing, setIsEditing] = useState(false);
  const [localName, setLocalName] = useState(campaignData.name);
  const [showLaunchModal, setShowLaunchModal] = useState(false);
  const inputRef = useRef(null);
  useEffect(() => {
    setLocalName(campaignData.name);
  }, [campaignData.name]);
  const handleCampaignNameChange = (e) => {
    setLocalName(e.target.value);
  };
  const handleCampaignNameClick = () => {
    console.log("Campaign name clicked, enabling edit mode");
    setIsEditing(true);
  };
  const handleCampaignNameBlur = () => {
    console.log("Campaign name input blurred, saving name:", localName);
    setIsEditing(false);
    if (localName !== campaignData.name) {
      updateCampaignName(localName);
    }
  };
  const handleKeyDown2 = (e) => {
    if (e.key === "Enter") {
      console.log("Enter key pressed in campaign name input");
      setIsEditing(false);
      if (localName !== campaignData.name) {
        updateCampaignName(localName);
      }
    }
  };
  const handleBackClick = () => {
    console.log("Back button clicked, current step:", campaignData.step);
    if (campaignData.step === 1) {
      toast.error("You're already at the first step!");
    } else {
      prevStep();
    }
  };
  const handleContinueClick = () => {
    console.log("Continue button clicked, current step:", campaignData.step);
    if (campaignData.step === 4) {
      if (onNext) {
        onNext();
      } else {
        setShowLaunchModal(true);
      }
    } else {
      nextStep();
    }
  };
  useEffect(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isEditing]);
  return /* @__PURE__ */ jsxs("div", { className: "fixed bottom-0 left-0 right-0 bg-white border-t shadow-md z-40", children: [
    /* @__PURE__ */ jsx("div", { className: "w-full h-1 bg-gray-200", children: /* @__PURE__ */ jsx(
      "div",
      {
        className: "h-full bg-indigo-600 transition-all duration-300",
        style: { width: `${campaignData.completionPercentage}%` }
      }
    ) }),
    /* @__PURE__ */ jsxs("div", { className: "container mx-auto px-4 py-4 flex items-center justify-between", children: [
      showPrevButton ? /* @__PURE__ */ jsx(
        "button",
        {
          onClick: handleBackClick,
          className: `px-6 py-3 rounded-lg font-medium transition-colors ${campaignData.step === 1 ? "bg-gray-100 text-gray-400 cursor-not-allowed" : "bg-gray-200 text-gray-800 hover:bg-gray-300"}`,
          disabled: campaignData.step === 1,
          children: "Back"
        }
      ) : /* @__PURE__ */ jsx("div", {}),
      /* @__PURE__ */ jsxs("div", { className: "text-center", children: [
        isEditing ? /* @__PURE__ */ jsx(
          "input",
          {
            ref: inputRef,
            type: "text",
            value: localName,
            onChange: handleCampaignNameChange,
            onBlur: handleCampaignNameBlur,
            onKeyDown: handleKeyDown2,
            className: "border-b border-indigo-500 text-center font-medium text-lg px-2 py-1 focus:outline-none"
          }
        ) : /* @__PURE__ */ jsxs(
          "div",
          {
            onClick: handleCampaignNameClick,
            className: "font-medium text-lg cursor-pointer hover:text-indigo-600 transition-colors flex items-center justify-center group",
            children: [
              campaignData.name,
              /* @__PURE__ */ jsx(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  className: "h-4 w-4 ml-1 text-gray-400 group-hover:text-indigo-500",
                  fill: "none",
                  viewBox: "0 0 24 24",
                  stroke: "currentColor",
                  children: /* @__PURE__ */ jsx(
                    "path",
                    {
                      strokeLinecap: "round",
                      strokeLinejoin: "round",
                      strokeWidth: 2,
                      d: "M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"
                    }
                  )
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsxs("div", { className: "text-sm text-gray-500", children: [
          "Step ",
          campaignData.step,
          " of 4"
        ] })
      ] }),
      showNextButton && /* @__PURE__ */ jsx(
        "button",
        {
          onClick: handleContinueClick,
          className: "px-6 py-3 bg-indigo-600 text-white rounded-lg font-medium hover:bg-indigo-700 transition-colors",
          children: nextButtonText || (campaignData.step === 4 ? "Finish" : "Continue")
        }
      )
    ] })
  ] });
}
function StepSidebar({ activeStep, onStepClick }) {
  return /* @__PURE__ */ jsxs("div", { className: "flex flex-col h-full", children: [
    /* @__PURE__ */ jsxs(
      "div",
      {
        className: `flex-col items-center p-4 rounded-lg mb-2 ${activeStep === 2 ? "bg-indigo-800" : "hover:bg-indigo-600 cursor-pointer"}`,
        onClick: () => onStepClick && onStepClick(2),
        children: [
          /* @__PURE__ */ jsx("div", { className: "w-8 h-8 flex items-center justify-center mr-3", children: /* @__PURE__ */ jsx(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-6 w-6",
              fill: "none",
              viewBox: "0 0 24 24",
              stroke: "currentColor",
              children: /* @__PURE__ */ jsx(
                "path",
                {
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 2,
                  d: "M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z"
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsx("span", { className: "font-medium", children: "Layout" })
        ]
      }
    ),
    /* @__PURE__ */ jsxs(
      "div",
      {
        className: `flex-col items-center p-4 rounded-lg mb-2 ${activeStep === 3 ? "bg-indigo-800" : "hover:bg-indigo-600 cursor-pointer opacity-70"}`,
        onClick: () => onStepClick && onStepClick(3),
        children: [
          /* @__PURE__ */ jsx("div", { className: "w-8 h-8 flex items-center justify-center mr-3", children: /* @__PURE__ */ jsx(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-6 w-6",
              fill: "none",
              viewBox: "0 0 24 24",
              stroke: "currentColor",
              children: /* @__PURE__ */ jsx(
                "path",
                {
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 2,
                  d: "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsx("span", { className: "font-medium", children: "Content" })
        ]
      }
    ),
    /* @__PURE__ */ jsxs(
      "div",
      {
        className: `flex-col items-center p-4 rounded-lg ${activeStep === 4 ? "bg-indigo-800" : "hover:bg-indigo-600 cursor-pointer opacity-70"}`,
        onClick: () => onStepClick && onStepClick(4),
        children: [
          /* @__PURE__ */ jsx("div", { className: "w-8 h-8 flex items-center justify-center mr-3", children: /* @__PURE__ */ jsx(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-6 w-6",
              fill: "none",
              viewBox: "0 0 24 24",
              stroke: "currentColor",
              children: /* @__PURE__ */ jsx(
                "path",
                {
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 2,
                  d: "M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4"
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsx("span", { className: "font-medium", children: "Campaign rules" })
        ]
      }
    )
  ] });
}
function StepTwo() {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r2, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K, _L, _M, _N, _O, _P, _Q, _R, _S, _T, _U, _V, _W, _X, _Y, _Z, __, _$, _aa, _ba, _ca, _da, _ea, _fa, _ga, _ha, _ia, _ja, _ka;
  const { campaignData, updateCampaignData } = useCampaign();
  const [activePreviewTab, setActivePreviewTab] = useState("landing");
  const [previewDevice, setPreviewDevice] = useState("desktop");
  const [logoFile, setLogoFile] = useState(null);
  const [logoPreview, setLogoPreview] = useState("");
  useRef(null);
  const [floatingButtonText, setFloatingButtonText] = useState("SPIN & WIN");
  useEffect(() => {
    if (!campaignData.layout) {
      updateCampaignData({
        layout: {
          theme: "light",
          wheelSectors: "eight",
          displayStyle: "popup",
          popupLayout: "center",
          showFloatingButton: true,
          floatingButtonPosition: "bottomRight",
          floatingButtonHasText: true,
          floatingButtonText: "SPIN & WIN",
          logo: null
        }
      });
    } else {
      setFloatingButtonText(
        campaignData.layout.floatingButtonText || "SPIN & WIN"
      );
      if (campaignData.layout.logo) {
        setLogoPreview(campaignData.layout.logo);
      }
    }
  }, [campaignData, updateCampaignData]);
  const handleThemeChange = (theme) => {
    updateCampaignData({
      layout: {
        ...campaignData.layout,
        theme
      }
    });
  };
  const handleWheelSectorsChange = (wheelSectors) => {
    updateCampaignData({
      layout: {
        ...campaignData.layout,
        wheelSectors
      }
    });
  };
  const handleDisplayStyleChange = (displayStyle) => {
    updateCampaignData({
      layout: {
        ...campaignData.layout,
        displayStyle
      }
    });
  };
  const handlePopupLayoutChange = (popupLayout) => {
    updateCampaignData({
      layout: {
        ...campaignData.layout,
        popupLayout
      }
    });
  };
  const handleFloatingButtonToggle = (showFloatingButton) => {
    updateCampaignData({
      layout: {
        ...campaignData.layout,
        showFloatingButton
      }
    });
  };
  const handleFloatingButtonPositionChange = (floatingButtonPosition) => {
    updateCampaignData({
      layout: {
        ...campaignData.layout,
        floatingButtonPosition
      }
    });
  };
  const handleFloatingButtonTextToggle = (floatingButtonHasText) => {
    updateCampaignData({
      layout: {
        ...campaignData.layout,
        floatingButtonHasText
      }
    });
  };
  const handleFloatingButtonTextChange = (e) => {
    const text = e.target.value;
    setFloatingButtonText(text);
    updateCampaignData({
      layout: {
        ...campaignData.layout,
        floatingButtonText: text
      }
    });
  };
  return /* @__PURE__ */ jsxs("div", { className: "flex flex-col justify-center lg:flex-row gap-8 pb-24", children: [
    /* @__PURE__ */ jsx("div", { className: "w-full lg:w-1/6 bg-indigo-700 text-white rounded-lg p-4", children: /* @__PURE__ */ jsx(
      StepSidebar,
      {
        activeStep: 2,
        onStepClick: (step) => {
          if (step !== 2) {
            if (step > campaignData.step) {
              if (step <= campaignData.step + 1) {
                updateCampaignData({ step });
              }
            } else {
              updateCampaignData({ step });
            }
          }
        }
      }
    ) }),
    /* @__PURE__ */ jsxs("div", { className: "w-full lg:w-2/5", children: [
      /* @__PURE__ */ jsxs("div", { className: "mb-6", children: [
        /* @__PURE__ */ jsxs("h3", { className: "flex items-center text-lg font-medium mb-2", children: [
          /* @__PURE__ */ jsx(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-5 w-5 mr-2",
              viewBox: "0 0 20 20",
              fill: "currentColor",
              children: /* @__PURE__ */ jsx(
                "path",
                {
                  fillRule: "evenodd",
                  d: "M4 2a2 2 0 00-2 2v11a3 3 0 106 0V4a2 2 0 00-2-2H4zm1 14a1 1 0 100-2 1 1 0 000 2zm5-1.757l4.9-4.9a2 2 0 000-2.828L13.485 5.1a2 2 0 00-2.828 0L10 5.757v8.486zM16 18H9.071l6-6H16a2 2 0 012 2v2a2 2 0 01-2 2z",
                  clipRule: "evenodd"
                }
              )
            }
          ),
          "Colour Selected"
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "bg-white p-3 rounded-md shadow-sm", children: [
          /* @__PURE__ */ jsxs("div", { className: "text-sm text-gray-500 mb-1", children: [
            campaignData.color === "singleTone" ? "Single Tone" : "Dual Tone",
            ": ",
            campaignData.color === "singleTone" ? "Color_01" : "Colors"
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsx(
              "div",
              {
                className: "w-8 h-8 rounded border border-gray-300 mr-2",
                style: { backgroundColor: campaignData.primaryColor }
              }
            ),
            /* @__PURE__ */ jsx("span", { className: "text-sm font-mono", children: campaignData.primaryColor }),
            campaignData.color === "dualTone" && /* @__PURE__ */ jsxs(Fragment, { children: [
              /* @__PURE__ */ jsx(
                "div",
                {
                  className: "w-8 h-8 rounded border border-gray-300 mx-2",
                  style: { backgroundColor: campaignData.secondaryColor }
                }
              ),
              /* @__PURE__ */ jsx("span", { className: "text-sm font-mono", children: campaignData.secondaryColor })
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "mb-6", children: [
        /* @__PURE__ */ jsxs("div", { className: "flex items-center mb-2", children: [
          /* @__PURE__ */ jsx("h3", { className: "text-lg font-medium", children: "Select your campaign theme" }),
          /* @__PURE__ */ jsx("div", { className: "ml-2 text-gray-500 cursor-help", children: /* @__PURE__ */ jsx(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-5 w-5",
              viewBox: "0 0 20 20",
              fill: "currentColor",
              children: /* @__PURE__ */ jsx(
                "path",
                {
                  fillRule: "evenodd",
                  d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z",
                  clipRule: "evenodd"
                }
              )
            }
          ) })
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "flex space-x-3", children: [
          /* @__PURE__ */ jsx(
            "button",
            {
              className: `flex-1 py-2 px-4 rounded-full ${((_a2 = campaignData.layout) == null ? void 0 : _a2.theme) === "light" ? "bg-indigo-100 border-2 border-indigo-500 text-indigo-700" : "bg-white border border-gray-300 text-gray-700"}`,
              onClick: () => handleThemeChange("light"),
              children: /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-center", children: [
                /* @__PURE__ */ jsx(
                  "div",
                  {
                    className: `w-4 h-4 rounded-full mr-2 ${((_b = campaignData.layout) == null ? void 0 : _b.theme) === "light" ? "bg-indigo-500" : "bg-gray-200"}`
                  }
                ),
                "Light Theme"
              ] })
            }
          ),
          /* @__PURE__ */ jsx(
            "button",
            {
              className: `flex-1 py-2 px-4 rounded-full ${((_c = campaignData.layout) == null ? void 0 : _c.theme) === "dark" ? "bg-indigo-100 border-2 border-indigo-500 text-indigo-700" : "bg-white border border-gray-300 text-gray-700"}`,
              onClick: () => handleThemeChange("dark"),
              children: /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-center", children: [
                /* @__PURE__ */ jsx(
                  "div",
                  {
                    className: `w-4 h-4 rounded-full mr-2 ${((_d = campaignData.layout) == null ? void 0 : _d.theme) === "dark" ? "bg-indigo-500" : "bg-gray-200"}`
                  }
                ),
                "Dark Theme"
              ] })
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "mb-6", children: [
        /* @__PURE__ */ jsxs("h3", { className: "flex items-center text-lg font-medium mb-2", children: [
          /* @__PURE__ */ jsxs(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-5 w-5 mr-2",
              viewBox: "0 0 20 20",
              fill: "currentColor",
              children: [
                /* @__PURE__ */ jsx("path", { d: "M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z" }),
                /* @__PURE__ */ jsx("path", { d: "M12 2.252A8.014 8.014 0 0117.748 8H12V2.252z" })
              ]
            }
          ),
          "Wheel Sector"
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-3 gap-4", children: [
          /* @__PURE__ */ jsxs(
            "div",
            {
              className: `cursor-pointer ${((_e = campaignData.layout) == null ? void 0 : _e.wheelSectors) === "four" ? "ring-2 ring-indigo-500 ring-offset-2" : ""}`,
              onClick: () => handleWheelSectorsChange("four"),
              children: [
                /* @__PURE__ */ jsx("div", { className: "bg-gray-100 p-4 rounded-md flex items-center justify-center", children: /* @__PURE__ */ jsxs("svg", { viewBox: "0 0 100 100", className: "w-16 h-16", children: [
                  /* @__PURE__ */ jsx("path", { d: "M50 50 L50 0 A50 50 0 0 1 100 50 Z", fill: "#e0e0ff" }),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M50 50 L100 50 A50 50 0 0 1 50 100 Z",
                      fill: "#d0d0ff"
                    }
                  ),
                  /* @__PURE__ */ jsx("path", { d: "M50 50 L50 100 A50 50 0 0 1 0 50 Z", fill: "#e0e0ff" }),
                  /* @__PURE__ */ jsx("path", { d: "M50 50 L0 50 A50 50 0 0 1 50 0 Z", fill: "#d0d0ff" }),
                  /* @__PURE__ */ jsx("circle", { cx: "50", cy: "50", r: "4", fill: "#4f46e5" })
                ] }) }),
                /* @__PURE__ */ jsx("div", { className: "text-center mt-2 text-sm", children: "Four" })
              ]
            }
          ),
          /* @__PURE__ */ jsxs(
            "div",
            {
              className: `cursor-pointer ${((_f = campaignData.layout) == null ? void 0 : _f.wheelSectors) === "six" ? "ring-2 ring-indigo-500 ring-offset-2" : ""}`,
              onClick: () => handleWheelSectorsChange("six"),
              children: [
                /* @__PURE__ */ jsx("div", { className: "bg-gray-100 p-4 rounded-md flex items-center justify-center", children: /* @__PURE__ */ jsxs("svg", { viewBox: "0 0 100 100", className: "w-16 h-16", children: [
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M50 50 L50 0 A50 50 0 0 1 93.3 25 Z",
                      fill: "#e0e0ff"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M50 50 L93.3 25 A50 50 0 0 1 93.3 75 Z",
                      fill: "#d0d0ff"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M50 50 L93.3 75 A50 50 0 0 1 50 100 Z",
                      fill: "#e0e0ff"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M50 50 L50 100 A50 50 0 0 1 6.7 75 Z",
                      fill: "#d0d0ff"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M50 50 L6.7 75 A50 50 0 0 1 6.7 25 Z",
                      fill: "#e0e0ff"
                    }
                  ),
                  /* @__PURE__ */ jsx("path", { d: "M50 50 L6.7 25 A50 50 0 0 1 50 0 Z", fill: "#d0d0ff" }),
                  /* @__PURE__ */ jsx("circle", { cx: "50", cy: "50", r: "4", fill: "#4f46e5" })
                ] }) }),
                /* @__PURE__ */ jsx("div", { className: "text-center mt-2 text-sm", children: "Six" })
              ]
            }
          ),
          /* @__PURE__ */ jsxs(
            "div",
            {
              className: `cursor-pointer ${((_g = campaignData.layout) == null ? void 0 : _g.wheelSectors) === "eight" ? "ring-2 ring-indigo-500 ring-offset-2" : ""}`,
              onClick: () => handleWheelSectorsChange("eight"),
              children: [
                /* @__PURE__ */ jsx("div", { className: "bg-gray-100 p-4 rounded-md flex items-center justify-center", children: /* @__PURE__ */ jsxs("svg", { viewBox: "0 0 100 100", className: "w-16 h-16", children: [
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M50 50 L50 0 A50 50 0 0 1 85.4 14.6 Z",
                      fill: "#e0e0ff"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M50 50 L85.4 14.6 A50 50 0 0 1 100 50 Z",
                      fill: "#d0d0ff"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M50 50 L100 50 A50 50 0 0 1 85.4 85.4 Z",
                      fill: "#e0e0ff"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M50 50 L85.4 85.4 A50 50 0 0 1 50 100 Z",
                      fill: "#d0d0ff"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M50 50 L50 100 A50 50 0 0 1 14.6 85.4 Z",
                      fill: "#e0e0ff"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M50 50 L14.6 85.4 A50 50 0 0 1 0 50 Z",
                      fill: "#d0d0ff"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M50 50 L0 50 A50 50 0 0 1 14.6 14.6 Z",
                      fill: "#e0e0ff"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M50 50 L14.6 14.6 A50 50 0 0 1 50 0 Z",
                      fill: "#d0d0ff"
                    }
                  ),
                  /* @__PURE__ */ jsx("circle", { cx: "50", cy: "50", r: "4", fill: "#4f46e5" })
                ] }) }),
                /* @__PURE__ */ jsx("div", { className: "text-center mt-2 text-sm", children: "Eight" })
              ]
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "mb-6", children: [
        /* @__PURE__ */ jsxs("h3", { className: "flex items-center text-lg font-medium mb-2", children: [
          /* @__PURE__ */ jsx(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-5 w-5 mr-2",
              viewBox: "0 0 20 20",
              fill: "currentColor",
              children: /* @__PURE__ */ jsx(
                "path",
                {
                  fillRule: "evenodd",
                  d: "M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zm0 6a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1v-2zm0 6a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1v-2z",
                  clipRule: "evenodd"
                }
              )
            }
          ),
          "Campaign Display Style"
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-2 gap-4", children: [
          /* @__PURE__ */ jsxs(
            "div",
            {
              className: `cursor-pointer ${((_h = campaignData.layout) == null ? void 0 : _h.displayStyle) === "fullscreen" ? "ring-2 ring-indigo-500 ring-offset-2" : ""}`,
              onClick: () => handleDisplayStyleChange("fullscreen"),
              children: [
                /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 p-4 rounded-md flex items-center justify-center", children: [
                  /* @__PURE__ */ jsxs("div", { className: "w-16 h-16 rounded-full overflow-hidden relative", children: [
                    /* @__PURE__ */ jsx("div", { className: "absolute inset-0 bg-indigo-200" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-1/2 w-6 h-6 bg-indigo-500 rounded-full transform -translate-x-1/2 -translate-y-1/2" })
                  ] }),
                  /* @__PURE__ */ jsx("div", { className: "absolute text-xs bg-indigo-600 text-white px-2 py-1 rounded-full", children: "15%" })
                ] }),
                /* @__PURE__ */ jsx("div", { className: "text-center mt-2 text-sm", children: "Full screen" })
              ]
            }
          ),
          /* @__PURE__ */ jsxs(
            "div",
            {
              className: `cursor-pointer ${((_i = campaignData.layout) == null ? void 0 : _i.displayStyle) === "popup" ? "ring-2 ring-indigo-500 ring-offset-2" : ""}`,
              onClick: () => handleDisplayStyleChange("popup"),
              children: [
                /* @__PURE__ */ jsx("div", { className: "bg-gray-100 p-4 rounded-md flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-20 h-16 border-2 border-indigo-300 rounded-md flex items-center justify-center", children: /* @__PURE__ */ jsxs("div", { className: "w-8 h-8 rounded-full overflow-hidden relative", children: [
                  /* @__PURE__ */ jsx("div", { className: "absolute inset-0 bg-indigo-200" }),
                  /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-1/2 w-3 h-3 bg-indigo-500 rounded-full transform -translate-x-1/2 -translate-y-1/2" })
                ] }) }) }),
                /* @__PURE__ */ jsx("div", { className: "text-center mt-2 text-sm", children: "Pop-Up" })
              ]
            }
          )
        ] })
      ] }),
      ((_j = campaignData.layout) == null ? void 0 : _j.displayStyle) === "popup" && /* @__PURE__ */ jsxs("div", { className: "mb-6", children: [
        /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-2", children: [
          /* @__PURE__ */ jsxs("h3", { className: "flex items-center text-lg font-medium", children: [
            /* @__PURE__ */ jsx(
              "svg",
              {
                xmlns: "http://www.w3.org/2000/svg",
                className: "h-5 w-5 mr-2",
                viewBox: "0 0 20 20",
                fill: "currentColor",
                children: /* @__PURE__ */ jsx(
                  "path",
                  {
                    fillRule: "evenodd",
                    d: "M5 2a1 1 0 011 1v1h1a1 1 0 010 2H6v1a1 1 0 01-2 0V6H3a1 1 0 010-2h1V3a1 1 0 011-1zm0 10a1 1 0 011 1v1h1a1 1 0 110 2H6v1a1 1 0 11-2 0v-1H3a1 1 0 110-2h1v-1a1 1 0 011-1zM12 2a1 1 0 01.967.744L14.146 7.2 17.5 9.134a1 1 0 010 1.732l-3.354 1.935-1.18 4.455a1 1 0 01-1.933 0L9.854 12.8 6.5 10.866a1 1 0 010-1.732l3.354-1.935 1.18-4.455A1 1 0 0112 2z",
                    clipRule: "evenodd"
                  }
                )
              }
            ),
            "Layout of the Popup"
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "flex space-x-2", children: [
            /* @__PURE__ */ jsx(
              "button",
              {
                className: `w-8 h-8 flex items-center justify-center rounded-md ${previewDevice === "mobile" ? "bg-indigo-600 text-white" : "bg-gray-200 text-gray-600"}`,
                onClick: () => setPreviewDevice("mobile"),
                children: /* @__PURE__ */ jsx(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    className: "h-5 w-5",
                    viewBox: "0 0 20 20",
                    fill: "currentColor",
                    children: /* @__PURE__ */ jsx(
                      "path",
                      {
                        fillRule: "evenodd",
                        d: "M7 2a2 2 0 00-2 2v12a2 2 0 002 2h6a2 2 0 002-2V4a2 2 0 00-2-2H7zm3 14a1 1 0 100-2 1 1 0 000 2z",
                        clipRule: "evenodd"
                      }
                    )
                  }
                )
              }
            ),
            /* @__PURE__ */ jsx(
              "button",
              {
                className: `w-8 h-8 flex items-center justify-center rounded-md ${previewDevice === "desktop" ? "bg-indigo-600 text-white" : "bg-gray-200 text-gray-600"}`,
                onClick: () => setPreviewDevice("desktop"),
                children: /* @__PURE__ */ jsx(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    className: "h-5 w-5",
                    viewBox: "0 0 20 20",
                    fill: "currentColor",
                    children: /* @__PURE__ */ jsx(
                      "path",
                      {
                        fillRule: "evenodd",
                        d: "M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z",
                        clipRule: "evenodd"
                      }
                    )
                  }
                )
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-3 gap-4", children: [
          /* @__PURE__ */ jsxs(
            "div",
            {
              className: `cursor-pointer ${((_k = campaignData.layout) == null ? void 0 : _k.popupLayout) === "center" ? "ring-2 ring-indigo-500 ring-offset-2" : ""}`,
              onClick: () => handlePopupLayoutChange("center"),
              children: [
                /* @__PURE__ */ jsx("div", { className: "bg-gray-100 p-4 rounded-md flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-16 h-16 border-2 border-indigo-300 rounded-md flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-8 h-8 rounded-full bg-indigo-200" }) }) }),
                /* @__PURE__ */ jsx("div", { className: "text-center mt-2 text-sm", children: "Centre" })
              ]
            }
          ),
          /* @__PURE__ */ jsxs(
            "div",
            {
              className: `cursor-pointer ${((_l = campaignData.layout) == null ? void 0 : _l.popupLayout) === "top" ? "ring-2 ring-indigo-500 ring-offset-2" : ""}`,
              onClick: () => handlePopupLayoutChange("top"),
              children: [
                /* @__PURE__ */ jsx("div", { className: "bg-gray-100 p-4 rounded-md flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-16 h-16 border-2 border-indigo-300 rounded-md flex items-start justify-center pt-2", children: /* @__PURE__ */ jsx("div", { className: "w-8 h-8 rounded-full bg-indigo-200" }) }) }),
                /* @__PURE__ */ jsx("div", { className: "text-center mt-2 text-sm", children: "Top" })
              ]
            }
          ),
          /* @__PURE__ */ jsxs(
            "div",
            {
              className: `cursor-pointer ${((_m = campaignData.layout) == null ? void 0 : _m.popupLayout) === "bottom" ? "ring-2 ring-indigo-500 ring-offset-2" : ""}`,
              onClick: () => handlePopupLayoutChange("bottom"),
              children: [
                /* @__PURE__ */ jsx("div", { className: "bg-gray-100 p-4 rounded-md flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-16 h-16 border-2 border-indigo-300 rounded-md flex items-end justify-center pb-2", children: /* @__PURE__ */ jsx("div", { className: "w-8 h-8 rounded-full bg-indigo-200" }) }) }),
                /* @__PURE__ */ jsx("div", { className: "text-center mt-2 text-sm", children: "Bottom" })
              ]
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "mb-6", children: [
        /* @__PURE__ */ jsxs("h3", { className: "flex items-center text-lg font-medium mb-2", children: [
          /* @__PURE__ */ jsx(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-5 w-5 mr-2",
              viewBox: "0 0 20 20",
              fill: "currentColor",
              children: /* @__PURE__ */ jsx(
                "path",
                {
                  fillRule: "evenodd",
                  d: "M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z",
                  clipRule: "evenodd"
                }
              )
            }
          ),
          "Floating Button"
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "flex items-center mb-4", children: [
          /* @__PURE__ */ jsx("span", { className: "mr-3 text-sm", children: "Show the Floating button" }),
          /* @__PURE__ */ jsxs("label", { className: "relative inline-flex items-center cursor-pointer", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "checkbox",
                className: "sr-only peer",
                checked: ((_n = campaignData.layout) == null ? void 0 : _n.showFloatingButton) || false,
                onChange: (e) => handleFloatingButtonToggle(e.target.checked)
              }
            ),
            /* @__PURE__ */ jsx("div", { className: "w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-indigo-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
          ] })
        ] }),
        ((_o = campaignData.layout) == null ? void 0 : _o.showFloatingButton) && /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsxs("div", { className: "mb-4", children: [
            /* @__PURE__ */ jsx("h4", { className: "text-sm font-medium mb-2", children: "Position on the page" }),
            /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-4 gap-3", children: [
              /* @__PURE__ */ jsxs(
                "div",
                {
                  className: `cursor-pointer ${((_p = campaignData.layout) == null ? void 0 : _p.floatingButtonPosition) === "bottomLeft" ? "ring-2 ring-indigo-500 ring-offset-2" : ""}`,
                  onClick: () => handleFloatingButtonPositionChange("bottomLeft"),
                  children: [
                    /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 p-2 rounded-md h-20 relative", children: [
                      /* @__PURE__ */ jsx("div", { className: "absolute bottom-1 left-1 w-6 h-6 bg-indigo-500 rounded-full" }),
                      /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full absolute top-2" }),
                      /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full absolute top-4" }),
                      /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full absolute top-6" })
                    ] }),
                    /* @__PURE__ */ jsx("div", { className: "text-center mt-1 text-xs", children: "Bottom left" })
                  ]
                }
              ),
              /* @__PURE__ */ jsxs(
                "div",
                {
                  className: `cursor-pointer ${((_q = campaignData.layout) == null ? void 0 : _q.floatingButtonPosition) === "bottomRight" ? "ring-2 ring-indigo-500 ring-offset-2" : ""}`,
                  onClick: () => handleFloatingButtonPositionChange("bottomRight"),
                  children: [
                    /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 p-2 rounded-md h-20 relative", children: [
                      /* @__PURE__ */ jsx("div", { className: "absolute bottom-1 right-1 w-6 h-6 bg-indigo-500 rounded-full" }),
                      /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full absolute top-2" }),
                      /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full absolute top-4" }),
                      /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full absolute top-6" })
                    ] }),
                    /* @__PURE__ */ jsx("div", { className: "text-center mt-1 text-xs", children: "Bottom right" })
                  ]
                }
              ),
              /* @__PURE__ */ jsxs(
                "div",
                {
                  className: `cursor-pointer ${((_r2 = campaignData.layout) == null ? void 0 : _r2.floatingButtonPosition) === "topRight" ? "ring-2 ring-indigo-500 ring-offset-2" : ""}`,
                  onClick: () => handleFloatingButtonPositionChange("topRight"),
                  children: [
                    /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 p-2 rounded-md h-20 relative", children: [
                      /* @__PURE__ */ jsx("div", { className: "absolute top-1 right-1 w-6 h-6 bg-indigo-500 rounded-full" }),
                      /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full absolute top-8" }),
                      /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full absolute top-10" }),
                      /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full absolute top-12" })
                    ] }),
                    /* @__PURE__ */ jsx("div", { className: "text-center mt-1 text-xs", children: "Top right" })
                  ]
                }
              ),
              /* @__PURE__ */ jsxs(
                "div",
                {
                  className: `cursor-pointer ${((_s = campaignData.layout) == null ? void 0 : _s.floatingButtonPosition) === "centerBottom" ? "ring-2 ring-indigo-500 ring-offset-2" : ""}`,
                  onClick: () => handleFloatingButtonPositionChange("centerBottom"),
                  children: [
                    /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 p-2 rounded-md h-20 relative", children: [
                      /* @__PURE__ */ jsx("div", { className: "absolute bottom-1 left-1/2 transform -translate-x-1/2 w-10 h-4 bg-indigo-500 rounded-md" }),
                      /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full absolute top-2" }),
                      /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full absolute top-4" }),
                      /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full absolute top-6" })
                    ] }),
                    /* @__PURE__ */ jsx("div", { className: "text-center mt-1 text-xs", children: "Centre bottom" })
                  ]
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "mb-4", children: [
            /* @__PURE__ */ jsx("h4", { className: "text-sm font-medium mb-2", children: "Want a text on floating button?" }),
            /* @__PURE__ */ jsxs("div", { className: "flex space-x-3", children: [
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: `py-2 px-6 rounded-full ${((_t = campaignData.layout) == null ? void 0 : _t.floatingButtonHasText) ? "bg-indigo-600 text-white" : "bg-white border border-gray-300 text-gray-700"}`,
                  onClick: () => handleFloatingButtonTextToggle(true),
                  children: "Yes"
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: `py-2 px-6 rounded-full ${!((_u = campaignData.layout) == null ? void 0 : _u.floatingButtonHasText) ? "bg-indigo-600 text-white" : "bg-white border border-gray-300 text-gray-700"}`,
                  onClick: () => handleFloatingButtonTextToggle(false),
                  children: "No"
                }
              )
            ] })
          ] }),
          ((_v = campaignData.layout) == null ? void 0 : _v.floatingButtonHasText) && /* @__PURE__ */ jsxs("div", { className: "mb-4", children: [
            /* @__PURE__ */ jsx("h4", { className: "text-sm font-medium mb-2", children: "Text" }),
            /* @__PURE__ */ jsxs("div", { className: "relative", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "text",
                  value: floatingButtonText || "",
                  onChange: handleFloatingButtonTextChange,
                  className: "w-full p-2 border rounded-md pr-12",
                  maxLength: 18,
                  placeholder: "SPIN & WIN"
                }
              ),
              /* @__PURE__ */ jsxs("div", { className: "absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-gray-500", children: [
                (floatingButtonText || "").length,
                "/18"
              ] })
            ] })
          ] })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsx("div", { className: "w-full lg:w-2/5", children: /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 p-4 rounded-lg sticky top-4", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-4", children: [
        /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-full overflow-hidden flex border border-indigo-600 p-1", children: [
          /* @__PURE__ */ jsxs(
            "button",
            {
              className: `px-4 py-2 rounded-full flex items-center ${previewDevice === "mobile" ? "bg-indigo-600 text-white" : "text-indigo-600"}`,
              onClick: () => setPreviewDevice("mobile"),
              children: [
                /* @__PURE__ */ jsx(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    className: "h-5 w-5 inline-block mr-1",
                    viewBox: "0 0 20 20",
                    fill: "currentColor",
                    children: /* @__PURE__ */ jsx(
                      "path",
                      {
                        fillRule: "evenodd",
                        d: "M7 2a2 2 0 00-2 2v12a2 2 0 002 2h6a2 2 0 002-2V4a2 2 0 00-2-2H7zm3 14a1 1 0 100-2 1 1 0 000 2z",
                        clipRule: "evenodd"
                      }
                    )
                  }
                ),
                "Mobile"
              ]
            }
          ),
          /* @__PURE__ */ jsxs(
            "button",
            {
              className: `px-4 py-2 rounded-full flex items-center ${previewDevice === "desktop" ? "bg-indigo-600 text-white" : "text-indigo-600"}`,
              onClick: () => setPreviewDevice("desktop"),
              children: [
                /* @__PURE__ */ jsx(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    className: "h-5 w-5 inline-block mr-1",
                    viewBox: "0 0 20 20",
                    fill: "currentColor",
                    children: /* @__PURE__ */ jsx(
                      "path",
                      {
                        fillRule: "evenodd",
                        d: "M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z",
                        clipRule: "evenodd"
                      }
                    )
                  }
                ),
                "Desktop"
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsxs("button", { className: "text-gray-500 flex items-center", children: [
          /* @__PURE__ */ jsxs(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-5 w-5 mr-1",
              viewBox: "0 0 20 20",
              fill: "currentColor",
              children: [
                /* @__PURE__ */ jsx("path", { d: "M10 12a2 2 0 100-4 2 2 0 000 4z" }),
                /* @__PURE__ */ jsx(
                  "path",
                  {
                    fillRule: "evenodd",
                    d: "M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z",
                    clipRule: "evenodd"
                  }
                )
              ]
            }
          ),
          "Preview"
        ] })
      ] }),
      /* @__PURE__ */ jsx("div", { className: "w-full h-full relative bg-gray-700 flex items-center justify-center", children: previewDevice === "desktop" ? /* @__PURE__ */ jsxs(Fragment, { children: [
        activePreviewTab === "landing" && /* @__PURE__ */ jsxs(
          "div",
          {
            className: `w-full h-full rounded-lg overflow-hidden p-4 ${((_w = campaignData.layout) == null ? void 0 : _w.theme) === "dark" ? "bg-gray-900" : "bg-white"}`,
            children: [
              /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-4", children: [
                /* @__PURE__ */ jsx("div", { className: "w-8 h-8" }),
                /* @__PURE__ */ jsx(
                  "div",
                  {
                    className: `text-center ${((_x = campaignData.layout) == null ? void 0 : _x.theme) === "dark" ? "text-white" : "text-gray-800"}`,
                    children: logoPreview && /* @__PURE__ */ jsx(
                      "img",
                      {
                        src: logoPreview || "/placeholder.svg",
                        alt: "Logo",
                        className: "h-8 mx-auto object-contain"
                      }
                    )
                  }
                ),
                /* @__PURE__ */ jsx("div", { className: "w-8 h-8 flex items-center justify-center", children: /* @__PURE__ */ jsx(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    className: `h-5 w-5 ${((_y = campaignData.layout) == null ? void 0 : _y.theme) === "dark" ? "text-white" : "text-gray-800"}`,
                    viewBox: "0 0 20 20",
                    fill: "currentColor",
                    children: /* @__PURE__ */ jsx(
                      "path",
                      {
                        fillRule: "evenodd",
                        d: "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z",
                        clipRule: "evenodd"
                      }
                    )
                  }
                ) })
              ] }),
              /* @__PURE__ */ jsxs("div", { className: "flex flex-row h-[calc(100%-3rem)]", children: [
                /* @__PURE__ */ jsxs("div", { className: "w-1/2 flex flex-col pr-6", children: [
                  /* @__PURE__ */ jsx(
                    "h2",
                    {
                      className: "text-2xl font-bold mb-4",
                      style: { color: campaignData.primaryColor },
                      children: "GO AHEAD GIVE IT A SPIN!"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "p",
                    {
                      className: `text-base mb-6 ${((_z = campaignData.layout) == null ? void 0 : _z.theme) === "dark" ? "text-gray-300" : "text-gray-600"}`,
                      children: "This is a demo of our spin to Win displays"
                    }
                  ),
                  /* @__PURE__ */ jsxs("div", { className: "flex items-center mb-6", children: [
                    /* @__PURE__ */ jsx(
                      "input",
                      {
                        type: "checkbox",
                        id: "preview-terms",
                        className: "mr-2",
                        checked: true,
                        readOnly: true
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "label",
                      {
                        htmlFor: "preview-terms",
                        className: `text-sm ${((_A = campaignData.layout) == null ? void 0 : _A.theme) === "dark" ? "text-gray-300" : "text-gray-600"}`,
                        children: "I accept the T&C and Privacy Notice."
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsx(
                    "input",
                    {
                      type: "email",
                      placeholder: "Enter your email",
                      className: "w-full p-3 border rounded mb-6",
                      readOnly: true
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "button",
                    {
                      className: "w-full py-3 font-bold text-white rounded text-lg",
                      style: { backgroundColor: campaignData.primaryColor },
                      children: "SPIN NOW"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "p",
                    {
                      className: `text-sm mt-4 ${((_B = campaignData.layout) == null ? void 0 : _B.theme) === "dark" ? "text-gray-400" : "text-gray-500"}`,
                      children: "No, I don't feel lucky today!"
                    }
                  )
                ] }),
                /* @__PURE__ */ jsx("div", { className: "w-1/2 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "relative w-64 h-64", children: /* @__PURE__ */ jsxs(
                  "div",
                  {
                    className: "w-full h-full rounded-full",
                    style: {
                      background: ((_C = campaignData.layout) == null ? void 0 : _C.wheelSectors) === "four" ? `conic-gradient(
                ${campaignData.primaryColor} 0deg, 
                ${campaignData.primaryColor} 90deg, 
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 90deg, 
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 180deg, 
                ${campaignData.primaryColor} 180deg, 
                ${campaignData.primaryColor} 270deg, 
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 270deg, 
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 360deg
              )` : ((_D = campaignData.layout) == null ? void 0 : _D.wheelSectors) === "six" ? `conic-gradient(
                ${campaignData.primaryColor} 0deg, 
                ${campaignData.primaryColor} 60deg, 
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 60deg, 
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 120deg, 
                ${campaignData.primaryColor} 120deg, 
                ${campaignData.primaryColor} 180deg,
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 180deg, 
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 240deg,
                ${campaignData.primaryColor} 240deg, 
                ${campaignData.primaryColor} 300deg,
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 300deg, 
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 360deg
              )` : `conic-gradient(
                ${campaignData.primaryColor} 0deg, 
                ${campaignData.primaryColor} 45deg, 
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 45deg, 
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 90deg,
                ${campaignData.primaryColor} 90deg, 
                ${campaignData.primaryColor} 135deg,
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 135deg, 
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 180deg,
                ${campaignData.primaryColor} 180deg, 
                ${campaignData.primaryColor} 225deg,
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 225deg, 
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 270deg,
                ${campaignData.primaryColor} 270deg, 
                ${campaignData.primaryColor} 315deg,
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 315deg, 
                ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 360deg
              )`
                    },
                    children: [
                      /* @__PURE__ */ jsx("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-10 h-10 rounded-full bg-black" }) }),
                      ((_E = campaignData.layout) == null ? void 0 : _E.wheelSectors) === "four" && /* @__PURE__ */ jsxs(Fragment, { children: [
                        /* @__PURE__ */ jsx("div", { className: "absolute top-1/4 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold", children: "10% OFF" }),
                        /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-3/4 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-90", children: "FREE SHIP" }),
                        /* @__PURE__ */ jsx("div", { className: "absolute top-3/4 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-180", children: "20% OFF" }),
                        /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-1/4 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-90", children: "NO LUCK" })
                      ] }),
                      ((_F = campaignData.layout) == null ? void 0 : _F.wheelSectors) === "six" && /* @__PURE__ */ jsxs(Fragment, { children: [
                        /* @__PURE__ */ jsx("div", { className: "absolute top-[13%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold", children: "10% OFF" }),
                        /* @__PURE__ */ jsx("div", { className: "absolute top-[30%] left-[80%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-60", children: "FREE SHIP" }),
                        /* @__PURE__ */ jsx("div", { className: "absolute top-[70%] left-[80%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-120", children: "15% OFF" }),
                        /* @__PURE__ */ jsx("div", { className: "absolute top-[87%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-180", children: "20% OFF" }),
                        /* @__PURE__ */ jsx("div", { className: "absolute top-[70%] left-[20%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-120", children: "5% OFF" }),
                        /* @__PURE__ */ jsx("div", { className: "absolute top-[30%] left-[20%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-60", children: "NO LUCK" })
                      ] }),
                      ((_G = campaignData.layout) == null ? void 0 : _G.wheelSectors) === "eight" && /* @__PURE__ */ jsxs(Fragment, { children: [
                        /* @__PURE__ */ jsx("div", { className: "absolute top-[10%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold", children: "10% OFF" }),
                        /* @__PURE__ */ jsx("div", { className: "absolute top-[25%] left-[85%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-45", children: "FREE SHIP" }),
                        /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-[90%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-90", children: "15% OFF" }),
                        /* @__PURE__ */ jsx("div", { className: "absolute top-[75%] left-[85%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-135", children: "BOGO" }),
                        /* @__PURE__ */ jsx("div", { className: "absolute top-[90%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-180", children: "20% OFF" }),
                        /* @__PURE__ */ jsx("div", { className: "absolute top-[75%] left-[15%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-135", children: "5% OFF" }),
                        /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-[10%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-90", children: "GIFT" }),
                        /* @__PURE__ */ jsx("div", { className: "absolute top-[25%] left-[15%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-45", children: "NO LUCK" })
                      ] })
                    ]
                  }
                ) }) })
              ] })
            ]
          }
        ),
        activePreviewTab === "result" && /* @__PURE__ */ jsxs(
          "div",
          {
            className: `w-full h-full rounded-lg overflow-hidden p-4 ${((_H = campaignData.layout) == null ? void 0 : _H.theme) === "dark" ? "bg-gray-900" : "bg-white"}`,
            children: [
              /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-4", children: [
                /* @__PURE__ */ jsx("div", { className: "w-8 h-8" }),
                /* @__PURE__ */ jsx(
                  "div",
                  {
                    className: `text-center ${((_I = campaignData.layout) == null ? void 0 : _I.theme) === "dark" ? "text-white" : "text-gray-800"}`,
                    children: logoPreview && /* @__PURE__ */ jsx(
                      "img",
                      {
                        src: logoPreview || "/placeholder.svg",
                        alt: "Logo",
                        className: "h-8 mx-auto object-contain"
                      }
                    )
                  }
                ),
                /* @__PURE__ */ jsx("div", { className: "w-8 h-8 flex items-center justify-center", children: /* @__PURE__ */ jsx(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    className: `h-5 w-5 ${((_J = campaignData.layout) == null ? void 0 : _J.theme) === "dark" ? "text-white" : "text-gray-800"}`,
                    viewBox: "0 0 20 20",
                    fill: "currentColor",
                    children: /* @__PURE__ */ jsx(
                      "path",
                      {
                        fillRule: "evenodd",
                        d: "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z",
                        clipRule: "evenodd"
                      }
                    )
                  }
                ) })
              ] }),
              /* @__PURE__ */ jsxs("div", { className: "flex flex-row h-[calc(100%-3rem)]", children: [
                /* @__PURE__ */ jsxs("div", { className: "w-1/2 flex flex-col pr-6", children: [
                  /* @__PURE__ */ jsx(
                    "h2",
                    {
                      className: "text-2xl font-bold mb-4",
                      style: { color: campaignData.primaryColor },
                      children: "CONGRATULATIONS!"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "p",
                    {
                      className: `text-base mb-6 ${((_K = campaignData.layout) == null ? void 0 : _K.theme) === "dark" ? "text-gray-300" : "text-gray-600"}`,
                      children: "You've won a 10% discount on your next purchase"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "div",
                    {
                      className: "w-full p-4 mb-6 text-center font-bold text-lg border-2 border-dashed",
                      style: {
                        borderColor: campaignData.primaryColor,
                        color: campaignData.primaryColor
                      },
                      children: "WINNER10"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "button",
                    {
                      className: "w-full py-3 font-bold text-white rounded mb-4 text-lg",
                      style: { backgroundColor: campaignData.primaryColor },
                      children: "COPY CODE"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "button",
                    {
                      className: `w-full py-3 font-bold rounded text-lg ${((_L = campaignData.layout) == null ? void 0 : _L.theme) === "dark" ? "bg-gray-700 text-white" : "bg-gray-200 text-gray-800"}`,
                      children: "SHOP NOW"
                    }
                  )
                ] }),
                /* @__PURE__ */ jsx("div", { className: "w-1/2 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "relative w-64 h-64 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-48 h-48 rounded-full bg-green-100 flex items-center justify-center", children: /* @__PURE__ */ jsx(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    className: "h-24 w-24 text-green-500",
                    fill: "none",
                    viewBox: "0 0 24 24",
                    stroke: "currentColor",
                    children: /* @__PURE__ */ jsx(
                      "path",
                      {
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        strokeWidth: 2,
                        d: "M5 13l4 4L19 7"
                      }
                    )
                  }
                ) }) }) })
              ] })
            ]
          }
        ),
        activePreviewTab === "floating" && ((_M = campaignData.layout) == null ? void 0 : _M.showFloatingButton) && /* @__PURE__ */ jsxs("div", { className: "w-full h-[400px] relative bg-gray-50 flex items-center justify-center", children: [
          /* @__PURE__ */ jsxs("div", { className: "w-full h-full p-4 flex flex-col", children: [
            /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full mb-2" }),
            /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full mb-2" }),
            /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full mb-2" }),
            /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full mb-2" }),
            /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full mb-2" }),
            /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full mb-2" }),
            /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full mb-2" })
          ] }),
          /* @__PURE__ */ jsx(
            "div",
            {
              className: `absolute ${((_N = campaignData.layout) == null ? void 0 : _N.floatingButtonPosition) === "bottomLeft" ? "bottom-4 left-4" : ((_O = campaignData.layout) == null ? void 0 : _O.floatingButtonPosition) === "bottomRight" ? "bottom-4 right-4" : ((_P = campaignData.layout) == null ? void 0 : _P.floatingButtonPosition) === "topRight" ? "top-4 right-4" : "bottom-4 left-1/2 transform -translate-x-1/2"}`,
              children: ((_Q = campaignData.layout) == null ? void 0 : _Q.floatingButtonHasText) ? /* @__PURE__ */ jsxs(
                "div",
                {
                  className: "flex items-center px-4 py-2 rounded-full text-white",
                  style: {
                    backgroundColor: campaignData.primaryColor
                  },
                  children: [
                    /* @__PURE__ */ jsx("div", { className: "w-8 h-8 bg-white rounded-full flex items-center justify-center mr-2", children: /* @__PURE__ */ jsxs(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        className: "h-5 w-5",
                        viewBox: "0 0 20 20",
                        fill: campaignData.primaryColor,
                        children: [
                          /* @__PURE__ */ jsx(
                            "path",
                            {
                              fillRule: "evenodd",
                              d: "M5 5a3 3 0 015-2.236A3 3 0 0114.83 6H16a2 2 0 110 4h-5V9a1 1 0 10-2 0v1H4a2 2 0 110-4h1.17C5.06 5.687 5 5.35 5 5zm4 1V5a1 1 0 10-1 1h1zm3 0a1 1 0 10-1-1v1h1z",
                              clipRule: "evenodd"
                            }
                          ),
                          /* @__PURE__ */ jsx("path", { d: "M9 11H3v5a2 2 0 002 2h4v-7zM11 18h4a2 2 0 002-2v-5h-6v7z" })
                        ]
                      }
                    ) }),
                    /* @__PURE__ */ jsx("span", { className: "font-bold", children: floatingButtonText || "SPIN & WIN" })
                  ]
                }
              ) : /* @__PURE__ */ jsx(
                "div",
                {
                  className: "w-12 h-12 rounded-full flex items-center justify-center",
                  style: {
                    backgroundColor: campaignData.primaryColor
                  },
                  children: /* @__PURE__ */ jsxs(
                    "svg",
                    {
                      xmlns: "http://www.w3.org/2000/svg",
                      className: "h-6 w-6 text-white",
                      viewBox: "0 0 20 20",
                      fill: "currentColor",
                      children: [
                        /* @__PURE__ */ jsx(
                          "path",
                          {
                            fillRule: "evenodd",
                            d: "M5 5a3 3 0 015-2.236A3 3 0 0114.83 6H16a2 2 0 110 4h-5V9a1 1 0 10-2 0v1H4a2 2 0 110-4h1.17C5.06 5.687 5 5.35 5 5zm4 1V5a1 1 0 10-1 1h1zm3 0a1 1 0 10-1-1v1h1z",
                            clipRule: "evenodd"
                          }
                        ),
                        /* @__PURE__ */ jsx("path", { d: "M9 11H3v5a2 2 0 002 2h4v-7zM11 18h4a2 2 0 002-2v-5h-6v7z" })
                      ]
                    }
                  )
                }
              )
            }
          )
        ] })
      ] }) : (
        // Mobile view
        /* @__PURE__ */ jsxs("div", { className: "w-56 h-[480px] bg-gray-900 rounded-3xl p-2 relative", children: [
          /* @__PURE__ */ jsx("div", { className: "absolute top-4 left-1/2 transform -translate-x-1/2 w-20 h-4 bg-black rounded-full" }),
          /* @__PURE__ */ jsxs("div", { className: "w-full h-full bg-gray-800 rounded-2xl overflow-hidden", children: [
            activePreviewTab === "landing" && /* @__PURE__ */ jsxs(
              "div",
              {
                className: `w-full h-full ${((_R = campaignData.layout) == null ? void 0 : _R.theme) === "dark" ? "bg-gray-900" : "bg-white"}`,
                children: [
                  /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between p-2", children: [
                    /* @__PURE__ */ jsx("div", { className: "w-6 h-6" }),
                    /* @__PURE__ */ jsx(
                      "div",
                      {
                        className: `text-center ${((_S = campaignData.layout) == null ? void 0 : _S.theme) === "dark" ? "text-white" : "text-gray-800"}`,
                        children: logoPreview && /* @__PURE__ */ jsx(
                          "img",
                          {
                            src: logoPreview || "/placeholder.svg",
                            alt: "Logo",
                            className: "h-6 mx-auto object-contain"
                          }
                        )
                      }
                    ),
                    /* @__PURE__ */ jsx("div", { className: "w-6 h-6 flex items-center justify-center", children: /* @__PURE__ */ jsx(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        className: `h-4 w-4 ${((_T = campaignData.layout) == null ? void 0 : _T.theme) === "dark" ? "text-white" : "text-gray-800"}`,
                        viewBox: "0 0 20 20",
                        fill: "currentColor",
                        children: /* @__PURE__ */ jsx(
                          "path",
                          {
                            fillRule: "evenodd",
                            d: "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z",
                            clipRule: "evenodd"
                          }
                        )
                      }
                    ) })
                  ] }),
                  /* @__PURE__ */ jsxs("div", { className: "p-3 flex flex-col items-center", children: [
                    /* @__PURE__ */ jsx(
                      "h2",
                      {
                        className: "text-base font-bold mb-1",
                        style: { color: campaignData.primaryColor },
                        children: "GO AHEAD GIVE IT A SPIN!"
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "p",
                      {
                        className: `text-xs mb-2 ${((_U = campaignData.layout) == null ? void 0 : _U.theme) === "dark" ? "text-gray-300" : "text-gray-600"}`,
                        children: "This is a demo of our spin to Win displays"
                      }
                    ),
                    /* @__PURE__ */ jsxs("div", { className: "flex items-center mb-2", children: [
                      /* @__PURE__ */ jsx(
                        "input",
                        {
                          type: "checkbox",
                          id: "preview-terms-mobile",
                          className: "mr-1",
                          checked: true,
                          readOnly: true
                        }
                      ),
                      /* @__PURE__ */ jsx(
                        "label",
                        {
                          htmlFor: "preview-terms-mobile",
                          className: `text-[10px] ${((_V = campaignData.layout) == null ? void 0 : _V.theme) === "dark" ? "text-gray-300" : "text-gray-600"}`,
                          children: "I accept the T&C and Privacy Notice."
                        }
                      )
                    ] }),
                    /* @__PURE__ */ jsx(
                      "input",
                      {
                        type: "email",
                        placeholder: "Enter your email",
                        className: "w-full p-1 text-sm border rounded mb-2",
                        readOnly: true
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "button",
                      {
                        className: "w-full py-1 text-sm font-bold text-white rounded",
                        style: { backgroundColor: campaignData.primaryColor },
                        children: "SPIN NOW"
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "p",
                      {
                        className: `text-[10px] mt-1 ${((_W = campaignData.layout) == null ? void 0 : _W.theme) === "dark" ? "text-gray-400" : "text-gray-500"}`,
                        children: "No, I don't feel lucky today!"
                      }
                    ),
                    /* @__PURE__ */ jsx("div", { className: "mt-4 relative w-40 h-40", children: /* @__PURE__ */ jsxs(
                      "div",
                      {
                        className: "w-full h-full rounded-full",
                        style: {
                          background: ((_X = campaignData.layout) == null ? void 0 : _X.wheelSectors) === "four" ? `conic-gradient(
                            ${campaignData.primaryColor} 0deg, 
                            ${campaignData.primaryColor} 90deg, 
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 90deg, 
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 180deg, 
                            ${campaignData.primaryColor} 180deg, 
                            ${campaignData.primaryColor} 270deg, 
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 270deg, 
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 360deg
                          )` : ((_Y = campaignData.layout) == null ? void 0 : _Y.wheelSectors) === "six" ? `conic-gradient(
                            ${campaignData.primaryColor} 0deg, 
                            ${campaignData.primaryColor} 60deg, 
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 60deg, 
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 120deg, 
                            ${campaignData.primaryColor} 120deg, 
                            ${campaignData.primaryColor} 180deg,
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 180deg, 
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 240deg,
                            ${campaignData.primaryColor} 240deg, 
                            ${campaignData.primaryColor} 300deg,
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 300deg, 
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 360deg
                          )` : `conic-gradient(
                            ${campaignData.primaryColor} 0deg, 
                            ${campaignData.primaryColor} 45deg, 
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 45deg, 
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 90deg,
                            ${campaignData.primaryColor} 90deg, 
                            ${campaignData.primaryColor} 135deg,
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 135deg, 
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 180deg,
                            ${campaignData.primaryColor} 180deg, 
                            ${campaignData.primaryColor} 225deg,
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 225deg, 
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 270deg,
                            ${campaignData.primaryColor} 270deg, 
                            ${campaignData.primaryColor} 315deg,
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 315deg, 
                            ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 360deg
                          )`
                        },
                        children: [
                          /* @__PURE__ */ jsx("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-6 h-6 rounded-full bg-white border-2 border-gray-300" }) }),
                          ((_Z = campaignData.layout) == null ? void 0 : _Z.wheelSectors) === "four" && /* @__PURE__ */ jsxs(Fragment, { children: [
                            /* @__PURE__ */ jsx("div", { className: "absolute top-1/4 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-[8px] font-bold", children: "10% OFF" }),
                            /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-3/4 transform -translate-x-1/2 -translate-y-1/2 text-[8px] font-bold rotate-90", children: "FREE SHIP" }),
                            /* @__PURE__ */ jsx("div", { className: "absolute top-3/4 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-[8px] font-bold rotate-180", children: "20% OFF" }),
                            /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-1/4 transform -translate-x-1/2 -translate-y-1/2 text-[8px] font-bold -rotate-90", children: "NO LUCK" })
                          ] }),
                          ((__ = campaignData.layout) == null ? void 0 : __.wheelSectors) === "six" && /* @__PURE__ */ jsxs(Fragment, { children: [
                            /* @__PURE__ */ jsx("div", { className: "absolute top-[13%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-[6px] font-bold", children: "10% OFF" }),
                            /* @__PURE__ */ jsx("div", { className: "absolute top-[30%] left-[80%] transform -translate-x-1/2 -translate-y-1/2 text-[6px] font-bold rotate-60", children: "FREE SHIP" }),
                            /* @__PURE__ */ jsx("div", { className: "absolute top-[70%] left-[80%] transform -translate-x-1/2 -translate-y-1/2 text-[6px] font-bold rotate-120", children: "15% OFF" }),
                            /* @__PURE__ */ jsx("div", { className: "absolute top-[87%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-[6px] font-bold rotate-180", children: "20% OFF" }),
                            /* @__PURE__ */ jsx("div", { className: "absolute top-[70%] left-[20%] transform -translate-x-1/2 -translate-y-1/2 text-[6px] font-bold -rotate-120", children: "5% OFF" }),
                            /* @__PURE__ */ jsx("div", { className: "absolute top-[30%] left-[20%] transform -translate-x-1/2 -translate-y-1/2 text-[6px] font-bold -rotate-60", children: "NO LUCK" })
                          ] }),
                          ((_$ = campaignData.layout) == null ? void 0 : _$.wheelSectors) === "eight" && /* @__PURE__ */ jsxs(Fragment, { children: [
                            /* @__PURE__ */ jsx("div", { className: "absolute top-[10%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-[6px] font-bold", children: "10% OFF" }),
                            /* @__PURE__ */ jsx("div", { className: "absolute top-[25%] left-[85%] transform -translate-x-1/2 -translate-y-1/2 text-[6px] font-bold rotate-45", children: "FREE SHIP" }),
                            /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-[90%] transform -translate-x-1/2 -translate-y-1/2 text-[6px] font-bold rotate-90", children: "15% OFF" }),
                            /* @__PURE__ */ jsx("div", { className: "absolute top-[75%] left-[85%] transform -translate-x-1/2 -translate-y-1/2 text-[6px] font-bold rotate-135", children: "BOGO" }),
                            /* @__PURE__ */ jsx("div", { className: "absolute top-[90%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-[6px] font-bold rotate-180", children: "20% OFF" }),
                            /* @__PURE__ */ jsx("div", { className: "absolute top-[75%] left-[15%] transform -translate-x-1/2 -translate-y-1/2 text-[6px] font-bold -rotate-135", children: "5% OFF" }),
                            /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-[10%] transform -translate-x-1/2 -translate-y-1/2 text-[6px] font-bold -rotate-90", children: "GIFT" }),
                            /* @__PURE__ */ jsx("div", { className: "absolute top-[25%] left-[15%] transform -translate-x-1/2 -translate-y-1/2 text-[6px] font-bold -rotate-45", children: "NO LUCK" })
                          ] })
                        ]
                      }
                    ) })
                  ] })
                ]
              }
            ),
            activePreviewTab === "result" && /* @__PURE__ */ jsxs(
              "div",
              {
                className: `w-full h-full ${((_aa = campaignData.layout) == null ? void 0 : _aa.theme) === "dark" ? "bg-gray-900" : "bg-white"}`,
                children: [
                  /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between p-2", children: [
                    /* @__PURE__ */ jsx("div", { className: "w-6 h-6" }),
                    /* @__PURE__ */ jsx(
                      "div",
                      {
                        className: `text-center ${((_ba = campaignData.layout) == null ? void 0 : _ba.theme) === "dark" ? "text-white" : "text-gray-800"}`,
                        children: logoPreview && /* @__PURE__ */ jsx(
                          "img",
                          {
                            src: logoPreview || "/placeholder.svg",
                            alt: "Logo",
                            className: "h-6 mx-auto object-contain"
                          }
                        )
                      }
                    ),
                    /* @__PURE__ */ jsx("div", { className: "w-6 h-6 flex items-center justify-center", children: /* @__PURE__ */ jsx(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        className: `h-4 w-4 ${((_ca = campaignData.layout) == null ? void 0 : _ca.theme) === "dark" ? "text-white" : "text-gray-800"}`,
                        viewBox: "0 0 20 20",
                        fill: "currentColor",
                        children: /* @__PURE__ */ jsx(
                          "path",
                          {
                            fillRule: "evenodd",
                            d: "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z",
                            clipRule: "evenodd"
                          }
                        )
                      }
                    ) })
                  ] }),
                  /* @__PURE__ */ jsxs("div", { className: "p-3 flex flex-col items-center", children: [
                    /* @__PURE__ */ jsx(
                      "h2",
                      {
                        className: "text-base font-bold mb-1",
                        style: { color: campaignData.primaryColor },
                        children: "CONGRATULATIONS!"
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "p",
                      {
                        className: `text-xs mb-2 ${((_da = campaignData.layout) == null ? void 0 : _da.theme) === "dark" ? "text-gray-300" : "text-gray-600"}`,
                        children: "You've won a 10% discount on your next purchase"
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "div",
                      {
                        className: "w-full p-2 mb-3 text-center font-bold text-sm border-2 border-dashed",
                        style: {
                          borderColor: campaignData.primaryColor,
                          color: campaignData.primaryColor
                        },
                        children: "WINNER10"
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "button",
                      {
                        className: "w-full py-1 text-sm font-bold text-white rounded mb-2",
                        style: { backgroundColor: campaignData.primaryColor },
                        children: "COPY CODE"
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "button",
                      {
                        className: `w-full py-1 text-sm font-bold rounded ${((_ea = campaignData.layout) == null ? void 0 : _ea.theme) === "dark" ? "bg-gray-700 text-white" : "bg-gray-200 text-gray-800"}`,
                        children: "SHOP NOW"
                      }
                    )
                  ] })
                ]
              }
            ),
            activePreviewTab === "floating" && ((_fa = campaignData.layout) == null ? void 0 : _fa.showFloatingButton) && /* @__PURE__ */ jsx(
              "div",
              {
                className: `w-full h-full relative ${((_ga = campaignData.layout) == null ? void 0 : _ga.theme) === "dark" ? "bg-gray-900" : "bg-white"}`,
                children: /* @__PURE__ */ jsx(
                  "div",
                  {
                    className: `absolute ${((_ha = campaignData.layout) == null ? void 0 : _ha.floatingButtonPosition) === "bottomLeft" ? "bottom-4 left-4" : ((_ia = campaignData.layout) == null ? void 0 : _ia.floatingButtonPosition) === "bottomRight" ? "bottom-4 right-4" : ((_ja = campaignData.layout) == null ? void 0 : _ja.floatingButtonPosition) === "topRight" ? "top-4 right-4" : "bottom-4 left-1/2 transform -translate-x-1/2"}`,
                    children: ((_ka = campaignData.layout) == null ? void 0 : _ka.floatingButtonHasText) ? /* @__PURE__ */ jsxs(
                      "div",
                      {
                        className: "flex items-center px-3 py-1 rounded-full text-white text-xs",
                        style: {
                          backgroundColor: campaignData.primaryColor
                        },
                        children: [
                          /* @__PURE__ */ jsx("div", { className: "w-6 h-6 bg-white rounded-full flex items-center justify-center mr-1", children: /* @__PURE__ */ jsxs(
                            "svg",
                            {
                              xmlns: "http://www.w3.org/2000/svg",
                              className: "h-4 w-4",
                              viewBox: "0 0 20 20",
                              fill: campaignData.primaryColor,
                              children: [
                                /* @__PURE__ */ jsx(
                                  "path",
                                  {
                                    fillRule: "evenodd",
                                    d: "M5 5a3 3 0 015-2.236A3 3 0 0114.83 6H16a2 2 0 110 4h-5V9a1 1 0 10-2 0v1H4a2 2 0 110-4h1.17C5.06 5.687 5 5.35 5 5zm4 1V5a1 1 0 10-1 1h1zm3 0a1 1 0 10-1-1v1h1z",
                                    clipRule: "evenodd"
                                  }
                                ),
                                /* @__PURE__ */ jsx("path", { d: "M9 11H3v5a2 2 0 002 2h4v-7zM11 18h4a2 2 0 002-2v-5h-6v7z" })
                              ]
                            }
                          ) }),
                          /* @__PURE__ */ jsx("span", { className: "font-bold", children: floatingButtonText || "SPIN & WIN" })
                        ]
                      }
                    ) : /* @__PURE__ */ jsx(
                      "div",
                      {
                        className: "w-10 h-10 rounded-full flex items-center justify-center",
                        style: {
                          backgroundColor: campaignData.primaryColor
                        },
                        children: /* @__PURE__ */ jsxs(
                          "svg",
                          {
                            xmlns: "http://www.w3.org/2000/svg",
                            className: "h-5 w-5 text-white",
                            viewBox: "0 0 20 20",
                            fill: "currentColor",
                            children: [
                              /* @__PURE__ */ jsx(
                                "path",
                                {
                                  fillRule: "evenodd",
                                  d: "M5 5a3 3 0 015-2.236A3 3 0 0114.83 6H16a2 2 0 110 4h-5V9a1 1 0 10-2 0v1H4a2 2 0 110-4h1.17C5.06 5.687 5 5.35 5 5zm4 1V5a1 1 0 10-1 1h1zm3 0a1 1 0 10-1-1v1h1z",
                                  clipRule: "evenodd"
                                }
                              ),
                              /* @__PURE__ */ jsx("path", { d: "M9 11H3v5a2 2 0 002 2h4v-7zM11 18h4a2 2 0 002-2v-5h-6v7z" })
                            ]
                          }
                        )
                      }
                    )
                  }
                )
              }
            )
          ] })
        ] })
      ) }),
      /* @__PURE__ */ jsxs("div", { className: "flex justify-center mt-4 border-b", children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            className: `px-4 py-2 ${activePreviewTab === "landing" ? "border-b-2 border-indigo-600 text-indigo-600 font-medium" : "text-gray-500"}`,
            onClick: () => setActivePreviewTab("landing"),
            children: "Landing Screen"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: `px-4 py-2 ${activePreviewTab === "result" ? "border-b-2 border-indigo-600 text-indigo-600 font-medium" : "text-gray-500"}`,
            onClick: () => setActivePreviewTab("result"),
            children: "Result screen"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: `px-4 py-2 ${activePreviewTab === "floating" ? "border-b-2 border-indigo-600 text-indigo-600 font-medium" : "text-gray-500"}`,
            onClick: () => setActivePreviewTab("floating"),
            children: "Floating Button"
          }
        )
      ] })
    ] }) }),
    /* @__PURE__ */ jsx(StepNavigation, {})
  ] });
}
function StepThree() {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r2, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K, _L, _M, _N, _O, _P, _Q, _R, _S, _T, _U, _V, _W, _X, _Y, _Z, __, _$, _aa, _ba, _ca, _da, _ea, _fa, _ga, _ha, _ia, _ja, _ka, _la, _ma, _na, _oa, _pa, _qa, _ra, _sa, _ta, _ua, _va, _wa, _xa, _ya, _za, _Aa, _Ba, _Ca, _Da, _Ea, _Fa, _Ga, _Ha, _Ia, _Ja, _Ka, _La, _Ma, _Na, _Oa, _Pa, _Qa, _Ra, _Sa, _Ta, _Ua, _Va, _Wa, _Xa, _Ya, _Za, __a, _$a, _ab, _bb, _cb, _db, _eb, _fb, _gb, _hb, _ib, _jb, _kb, _lb, _mb, _nb, _ob, _pb, _qb, _rb, _sb, _tb, _ub, _vb, _wb, _xb, _yb, _zb, _Ab, _Bb, _Cb, _Db, _Eb, _Fb, _Gb, _Hb, _Ib, _Jb, _Kb, _Lb, _Mb, _Nb, _Ob, _Pb, _Qb, _Rb, _Sb, _Tb, _Ub, _Vb, _Wb, _Xb, _Yb, _Zb, __b, _$b, _ac, _bc, _cc, _dc, _ec, _fc, _gc, _hc, _ic;
  const { campaignData, updateCampaignData } = useCampaign();
  const { discountCodes, setDiscountCodes, fetchAndSetDiscountCodes, currentPlan } = usePlan();
  const [activeTab, setActiveTab] = useState("landing");
  const [previewDevice, setPreviewDevice] = useState("desktop");
  const [showFileModal, setShowFileModal] = useState(false);
  const [currentFileField, setCurrentFileField] = useState(null);
  const fileInputRef = useRef(null);
  const [localDiscountCodes, setLocalDiscountCodes] = useState([]);
  const [loadingCodes, setLoadingCodes] = useState(false);
  const [codesError, setCodesError] = useState(null);
  console.log("=== StepThree Component Debug ===");
  console.log("Current Plan:", currentPlan);
  console.log("campaignData:", campaignData);
  console.log("discountCodes from context:", discountCodes);
  console.log("discountCodes length:", (discountCodes == null ? void 0 : discountCodes.length) || 0);
  console.log("discountCodes type:", typeof discountCodes);
  console.log(
    "Global discount codes:",
    typeof window !== "undefined" ? (_a2 = window.GLOBAL_DISCOUNT_CODES) == null ? void 0 : _a2.length : "N/A"
  );
  console.log(
    "localStorage codes:",
    typeof window !== "undefined" ? (() => {
      try {
        const stored = localStorage.getItem("GLOBAL_DISCOUNT_CODES");
        return stored ? JSON.parse(stored).length : "None";
      } catch (e) {
        return "Error";
      }
    })() : "N/A"
  );
  console.log("================================");
  useEffect(() => {
    console.log(
      "StepThree - Component mounted, checking for discount codes..."
    );
    let codes = [];
    if (discountCodes && discountCodes.length > 0) {
      console.log(
        "StepThree - Using context discount codes:",
        discountCodes.length
      );
      codes = discountCodes;
    } else if (typeof window !== "undefined") {
      try {
        const storedCodes = localStorage.getItem("GLOBAL_DISCOUNT_CODES");
        if (storedCodes) {
          const parsedCodes = JSON.parse(storedCodes);
          if (parsedCodes && parsedCodes.length > 0) {
            console.log(
              "StepThree - Using localStorage discount codes:",
              parsedCodes.length
            );
            codes = parsedCodes;
            setDiscountCodes(parsedCodes);
          }
        }
      } catch (e) {
        console.error("Error parsing stored discount codes:", e);
      }
      if (codes.length === 0 && window.GLOBAL_DISCOUNT_CODES && window.GLOBAL_DISCOUNT_CODES.length > 0) {
        console.log(
          "StepThree - Using global window discount codes:",
          window.GLOBAL_DISCOUNT_CODES.length
        );
        codes = window.GLOBAL_DISCOUNT_CODES;
        setDiscountCodes(window.GLOBAL_DISCOUNT_CODES);
      }
    }
    if (codes.length > 0) {
      setLocalDiscountCodes(codes);
    } else {
      console.log("StepThree - No discount codes found in any source");
    }
  }, []);
  useEffect(() => {
    if (discountCodes && discountCodes.length > 0) {
      console.log(
        "StepThree - Updating local codes from context:",
        discountCodes.length
      );
      setLocalDiscountCodes(discountCodes);
    }
  }, [discountCodes]);
  useEffect(() => {
    console.log(
      "StepThree - Local discount codes updated:",
      localDiscountCodes
    );
    if (localDiscountCodes && localDiscountCodes.length > 0) {
      console.log("StepThree - Available discount codes:");
      localDiscountCodes.forEach((code, index) => {
        console.log(
          `  ${index + 1}. Title: ${code.title}, Code: ${code.code}, ID: ${code.id}`
        );
      });
    }
  }, [localDiscountCodes]);
  useEffect(() => {
    console.log("StepThree - Tab changed to:", activeTab);
    if (activeTab === "wheel") {
      console.log("StepThree - Wheel tab accessed, checking discount codes...");
      const availableCodes = localDiscountCodes.length > 0 ? localDiscountCodes : discountCodes;
      if (availableCodes && availableCodes.length > 0) {
        console.log(
          "StepThree - Found discount codes, generating wheel configuration..."
        );
        generateWheelConfiguration(availableCodes);
      } else {
        console.log(
          "StepThree - No discount codes available, attempting to fetch..."
        );
        fetchDiscountCodes();
      }
    }
  }, [activeTab]);
  const fetchDiscountCodes = async () => {
    console.log("StepThree - fetchDiscountCodes called");
    setLoadingCodes(true);
    setCodesError(null);
    try {
      if (localDiscountCodes.length > 0) {
        console.log(
          "StepThree - Using existing local codes:",
          localDiscountCodes.length
        );
        generateWheelConfiguration(localDiscountCodes);
        setLoadingCodes(false);
        return;
      }
      if (typeof window !== "undefined") {
        try {
          const storedCodes = localStorage.getItem("GLOBAL_DISCOUNT_CODES");
          if (storedCodes) {
            const parsedCodes = JSON.parse(storedCodes);
            if (parsedCodes && parsedCodes.length > 0) {
              console.log(
                "StepThree - Using localStorage discount codes:",
                parsedCodes.length
              );
              setLocalDiscountCodes(parsedCodes);
              setDiscountCodes(parsedCodes);
              generateWheelConfiguration(parsedCodes);
              setLoadingCodes(false);
              return;
            }
          }
        } catch (e) {
          console.error("Error parsing stored discount codes:", e);
        }
        if (window.GLOBAL_DISCOUNT_CODES && window.GLOBAL_DISCOUNT_CODES.length > 0) {
          console.log(
            "StepThree - Using global window discount codes:",
            window.GLOBAL_DISCOUNT_CODES.length
          );
          setLocalDiscountCodes(window.GLOBAL_DISCOUNT_CODES);
          setDiscountCodes(window.GLOBAL_DISCOUNT_CODES);
          generateWheelConfiguration(window.GLOBAL_DISCOUNT_CODES);
          setLoadingCodes(false);
          return;
        }
      }
      console.log("StepThree - No codes in storage, fetching from API...");
      const codes = await fetchAndSetDiscountCodes();
      if (codes && codes.length > 0) {
        console.log(
          "StepThree - Successfully fetched codes from API:",
          codes.length
        );
        setLocalDiscountCodes(codes);
        generateWheelConfiguration(codes);
      } else {
        setCodesError(
          "No Discount Codes Found\n\nTo create discount codes:\n\n• Go to your Shopify admin panel\n• Navigate to Discounts → Create discount\n• Choose 'Discount code' type\n• Set up your discount details and save\n• Return here and refresh the page"
        );
      }
    } catch (error) {
      console.error("StepThree - Error fetching discount codes:", error);
      setCodesError(error.message);
    } finally {
      setLoadingCodes(false);
    }
  };
  const generateWheelConfiguration = (codes) => {
    var _a3, _b2;
    console.log(
      "StepThree - generateWheelConfiguration called with codes:",
      codes
    );
    if (!codes || codes.length === 0) {
      console.log(
        "StepThree - No codes provided to generateWheelConfiguration"
      );
      return;
    }
    const sectorCount = ((_a3 = campaignData.layout) == null ? void 0 : _a3.wheelSectors) === "four" ? 4 : ((_b2 = campaignData.layout) == null ? void 0 : _b2.wheelSectors) === "six" ? 6 : 8;
    console.log("StepThree - Sector count:", sectorCount);
    const sectors = [];
    const availableCodes = [...codes];
    for (let i = 1; i <= sectorCount; i++) {
      if (availableCodes.length > 0 && i <= codes.length) {
        const code = availableCodes.shift();
        console.log(`StepThree - Adding discount code to sector ${i}:`, code);
        sectors.push({
          id: i,
          rewardType: code.title,
          reward: code.code || code.title,
          // Use title if no specific code
          chance: i === 1 ? "40%" : "15%",
          // First sector gets higher chance
          discountCodeId: code.id,
          discountCode: code.code,
          discountTitle: code.title,
          discountType: code.type || "DiscountCodeBasic"
        });
      } else {
        console.log(
          `StepThree - Adding "Better luck next time" to sector ${i}`
        );
        sectors.push({
          id: i,
          rewardType: "Oops!",
          reward: "Better luck next time",
          chance: "5%",
          discountCodeId: null,
          discountCode: null,
          discountTitle: null,
          discountType: null
        });
      }
    }
    console.log("StepThree - Generated sectors:", sectors);
    updateCampaignData({
      content: {
        ...campaignData.content,
        wheel: {
          sectors,
          copySameCode: false
        }
      }
    });
    saveWheelConfiguration(sectors);
  };
  const saveWheelConfiguration = async (sectors) => {
    try {
      const configData = {
        campaignId: campaignData.id || `campaign-${Date.now()}`,
        wheelConfig: {
          sectors,
          copySameCode: false
        },
        timestamp: (/* @__PURE__ */ new Date()).toISOString(),
        shop: campaignData.shop
      };
      const response = await fetch("/api/wheel-config", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(configData)
      });
      if (!response.ok) {
        throw new Error(
          `Failed to save wheel configuration: ${response.statusText}`
        );
      }
      const result = await response.json();
      console.log("Wheel configuration saved successfully!");
      return result;
    } catch (error) {
      console.error("Error saving wheel configuration:", error);
      throw error;
    }
  };
  useEffect(() => {
    if (!campaignData.content) {
      updateCampaignData({
        content: {
          landing: {
            title: "GO AHEAD GIVE IT A SPIN!",
            showSubtitle: true,
            subtitle: "This is a demo of our Spin to Win displays",
            showEmail: true,
            emailPlaceholder: "Enter your email",
            showPrivacyPolicy: true,
            privacyPolicyText: "I accept the T&C and Privacy Notice.",
            privacyPolicyLink: "",
            buttonText: "SPIN NOW",
            showTerms: true,
            termsText: "I accept the T&C$",
            termsLink: ""
          },
          wheel: {
            sectors: [],
            copySameCode: true
          },
          result: {
            title: "LUCKY DAY!",
            showSubtitle: true,
            subtitle: "You have won 10% discount for your shopping",
            showButton: true,
            buttonText: "REDEEM NOW",
            buttonDestination: "www.yourdomain.com/productlist",
            showCopyIcon: true,
            showResultAgain: true,
            reminderTimer: {
              minutes: 10,
              seconds: 0
            }
          }
        }
      });
    }
  }, [campaignData, updateCampaignData]);
  const handleInputChange = (section, field, value) => {
    var _a3;
    updateCampaignData({
      content: {
        ...campaignData.content,
        [section]: {
          ...(_a3 = campaignData.content) == null ? void 0 : _a3[section],
          [field]: value
        }
      }
    });
  };
  const handleToggleChange = (section, field, value) => {
    var _a3;
    updateCampaignData({
      content: {
        ...campaignData.content,
        [section]: {
          ...(_a3 = campaignData.content) == null ? void 0 : _a3[section],
          [field]: value
        }
      }
    });
  };
  const handleReminderTimerChange = (field, value) => {
    let numValue = Number.parseInt(value, 10);
    if (isNaN(numValue)) numValue = 0;
    if (field === "minutes") {
      numValue = Math.min(Math.max(numValue, 0), 59);
    } else if (field === "seconds") {
      numValue = Math.min(Math.max(numValue, 0), 59);
    }
    updateCampaignData({
      content: {
        ...campaignData.content,
        result: {
          ...campaignData.content.result,
          reminderTimer: {
            ...campaignData.content.result.reminderTimer,
            [field]: numValue
          }
        }
      }
    });
  };
  const openFileModal = (field) => {
    setCurrentFileField(field);
    setShowFileModal(true);
  };
  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (file && currentFileField) {
      const reader = new FileReader();
      reader.onloadend = () => {
        const [section, field] = currentFileField.split(".");
        handleInputChange(section, `${field}Link`, reader.result);
        setShowFileModal(false);
      };
      reader.readAsDataURL(file);
    }
  };
  const handlePasteLink = (link) => {
    if (currentFileField) {
      const [section, field] = currentFileField.split(".");
      handleInputChange(section, `${field}Link`, link);
      setShowFileModal(false);
    }
  };
  function generateWheelGradient() {
    var _a3, _b2;
    const sectorCount = ((_a3 = campaignData.layout) == null ? void 0 : _a3.wheelSectors) === "four" ? 4 : ((_b2 = campaignData.layout) == null ? void 0 : _b2.wheelSectors) === "six" ? 6 : 8;
    const mainColor = campaignData.primaryColor;
    const secondaryColor = campaignData.color === "dualTone" ? campaignData.secondaryColor : "white";
    let gradient = "";
    const sectorAngle = 360 / sectorCount;
    for (let i = 0; i < sectorCount; i++) {
      const startAngle = i * sectorAngle;
      const endAngle = (i + 1) * sectorAngle;
      const color = i % 2 === 0 ? mainColor : secondaryColor;
      gradient += `${color} ${startAngle}deg, ${color} ${endAngle}deg${i < sectorCount - 1 ? ", " : ""}`;
    }
    return `conic-gradient(${gradient})`;
  }
  return /* @__PURE__ */ jsxs("div", { className: "flex flex-col lg:flex-row gap-8 pb-24", children: [
    /* @__PURE__ */ jsx("div", { className: "w-full lg:w-1/6 bg-indigo-700 text-white rounded-lg p-4", children: /* @__PURE__ */ jsx(
      StepSidebar,
      {
        activeStep: 3,
        onStepClick: (step) => {
          if (step !== 3) {
            if (step > campaignData.step) {
              if (step <= campaignData.step + 1) {
                updateCampaignData({ step });
              }
            } else {
              updateCampaignData({ step });
            }
          }
        }
      }
    ) }),
    /* @__PURE__ */ jsxs("div", { className: "w-full lg:w-2/5", children: [
      /* @__PURE__ */ jsx("div", { className: "mb-6 border-b", children: /* @__PURE__ */ jsxs("div", { className: "flex space-x-4", children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            className: `px-4 py-2 ${activeTab === "landing" ? "border-b-2 border-indigo-600 text-indigo-600 font-medium" : "text-gray-500"}`,
            onClick: () => setActiveTab("landing"),
            children: "Landing Screen"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: `px-4 py-2 ${activeTab === "wheel" ? "border-b-2 border-indigo-600 text-indigo-600 font-medium" : "text-gray-500"}`,
            onClick: () => setActiveTab("wheel"),
            children: "Wheel"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: `px-4 py-2 ${activeTab === "result" ? "border-b-2 border-indigo-600 text-indigo-600 font-medium" : "text-gray-500"}`,
            onClick: () => setActiveTab("result"),
            children: "Result Screen"
          }
        )
      ] }) }),
      activeTab === "landing" && /* @__PURE__ */ jsxs("div", { className: "space-y-6", children: [
        /* @__PURE__ */ jsx("h3", { className: "text-xl font-semibold text-indigo-700", children: "Landing Screen" }),
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Title" }),
          /* @__PURE__ */ jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "text",
                value: ((_c = (_b = campaignData.content) == null ? void 0 : _b.landing) == null ? void 0 : _c.title) || "",
                onChange: (e) => handleInputChange("landing", "title", e.target.value),
                className: "w-full p-2 border rounded-md",
                maxLength: 50
              }
            ),
            /* @__PURE__ */ jsxs("div", { className: "absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-gray-500", children: [
              ((_f = (_e = (_d = campaignData.content) == null ? void 0 : _d.landing) == null ? void 0 : _e.title) == null ? void 0 : _f.length) || 0,
              "/50"
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-1", children: [
            /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Sub Title" }),
            /* @__PURE__ */ jsxs("label", { className: "relative inline-flex items-center cursor-pointer", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  className: "sr-only peer",
                  checked: (_h = (_g = campaignData.content) == null ? void 0 : _g.landing) == null ? void 0 : _h.showSubtitle,
                  onChange: (e) => handleToggleChange(
                    "landing",
                    "showSubtitle",
                    e.target.checked
                  )
                }
              ),
              /* @__PURE__ */ jsx("div", { className: "w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-indigo-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
            ] })
          ] }),
          ((_j = (_i = campaignData.content) == null ? void 0 : _i.landing) == null ? void 0 : _j.showSubtitle) && /* @__PURE__ */ jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "text",
                value: ((_l = (_k = campaignData.content) == null ? void 0 : _k.landing) == null ? void 0 : _l.subtitle) || "",
                onChange: (e) => handleInputChange("landing", "subtitle", e.target.value),
                className: "w-full p-2 border rounded-md",
                maxLength: 50
              }
            ),
            /* @__PURE__ */ jsxs("div", { className: "absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-gray-500", children: [
              ((_o = (_n = (_m = campaignData.content) == null ? void 0 : _m.landing) == null ? void 0 : _n.subtitle) == null ? void 0 : _o.length) || 0,
              "/50"
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-1", children: [
            /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Email" }),
            /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
              /* @__PURE__ */ jsx("span", { className: "text-xs text-gray-500 mr-2", children: "Show the input field" }),
              /* @__PURE__ */ jsxs("label", { className: "relative inline-flex items-center cursor-pointer", children: [
                /* @__PURE__ */ jsx(
                  "input",
                  {
                    type: "checkbox",
                    className: "sr-only peer",
                    checked: (_q = (_p = campaignData.content) == null ? void 0 : _p.landing) == null ? void 0 : _q.showEmail,
                    onChange: (e) => handleToggleChange(
                      "landing",
                      "showEmail",
                      e.target.checked
                    )
                  }
                ),
                /* @__PURE__ */ jsx("div", { className: "w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-indigo-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
              ] })
            ] })
          ] }),
          ((_s = (_r2 = campaignData.content) == null ? void 0 : _r2.landing) == null ? void 0 : _s.showEmail) && /* @__PURE__ */ jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "text",
                value: ((_u = (_t = campaignData.content) == null ? void 0 : _t.landing) == null ? void 0 : _u.emailPlaceholder) || "",
                onChange: (e) => handleInputChange(
                  "landing",
                  "emailPlaceholder",
                  e.target.value
                ),
                className: "w-full p-2 border rounded-md",
                maxLength: 20,
                placeholder: "Placeholder text"
              }
            ),
            /* @__PURE__ */ jsxs("div", { className: "absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-gray-500", children: [
              ((_x = (_w = (_v = campaignData.content) == null ? void 0 : _v.landing) == null ? void 0 : _w.emailPlaceholder) == null ? void 0 : _x.length) || 0,
              "/20"
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-1", children: [
            /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Privacy & Policy" }),
            /* @__PURE__ */ jsxs("label", { className: "relative inline-flex items-center cursor-pointer", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  className: "sr-only peer",
                  checked: (_z = (_y = campaignData.content) == null ? void 0 : _y.landing) == null ? void 0 : _z.showPrivacyPolicy,
                  onChange: (e) => handleToggleChange(
                    "landing",
                    "showPrivacyPolicy",
                    e.target.checked
                  )
                }
              ),
              /* @__PURE__ */ jsx("div", { className: "w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-indigo-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
            ] })
          ] }),
          ((_B = (_A = campaignData.content) == null ? void 0 : _A.landing) == null ? void 0 : _B.showPrivacyPolicy) && /* @__PURE__ */ jsxs("div", { className: "relative flex", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "text",
                value: ((_D = (_C = campaignData.content) == null ? void 0 : _C.landing) == null ? void 0 : _D.privacyPolicyText) || "",
                onChange: (e) => handleInputChange(
                  "landing",
                  "privacyPolicyText",
                  e.target.value
                ),
                className: "w-full p-2 border rounded-md",
                maxLength: 30
              }
            ),
            /* @__PURE__ */ jsx(
              "button",
              {
                className: "ml-2 p-2 bg-indigo-100 text-indigo-600 rounded-md hover:bg-indigo-200",
                onClick: () => openFileModal("landing.privacyPolicy"),
                children: /* @__PURE__ */ jsx(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    className: "h-5 w-5",
                    viewBox: "0 0 20 20",
                    fill: "currentColor",
                    children: /* @__PURE__ */ jsx(
                      "path",
                      {
                        fillRule: "evenodd",
                        d: "M8 4a3 3 0 00-3 3v4a3 3 0 006 0V7a1 1 0 112 0v4a5 5 0 01-10 0V7a5 5 0 0110 0v1.5a1.5 1.5 0 01-3 0V6a1 1 0 012 0v2.5a3.5 3.5 0 01-7 0V6a1 1 0 012 0v4a1 1 0 002 0V7a3 3 0 00-3-3z",
                        clipRule: "evenodd"
                      }
                    )
                  }
                )
              }
            ),
            /* @__PURE__ */ jsxs("div", { className: "absolute right-12 top-1/2 transform -translate-y-1/2 text-xs text-gray-500", children: [
              ((_G = (_F = (_E = campaignData.content) == null ? void 0 : _E.landing) == null ? void 0 : _F.privacyPolicyText) == null ? void 0 : _G.length) || 0,
              "/30"
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Button" }),
          /* @__PURE__ */ jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "text",
                value: ((_I = (_H = campaignData.content) == null ? void 0 : _H.landing) == null ? void 0 : _I.buttonText) || "",
                onChange: (e) => handleInputChange("landing", "buttonText", e.target.value),
                className: "w-full p-2 border rounded-md",
                maxLength: 18
              }
            ),
            /* @__PURE__ */ jsxs("div", { className: "absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-gray-500", children: [
              ((_L = (_K = (_J = campaignData.content) == null ? void 0 : _J.landing) == null ? void 0 : _K.buttonText) == null ? void 0 : _L.length) || 0,
              "/18"
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-1", children: [
            /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Terms & Conditions" }),
            /* @__PURE__ */ jsxs("label", { className: "relative inline-flex items-center cursor-pointer", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  className: "sr-only peer",
                  checked: (_N = (_M = campaignData.content) == null ? void 0 : _M.landing) == null ? void 0 : _N.showTerms,
                  onChange: (e) => handleToggleChange(
                    "landing",
                    "showTerms",
                    e.target.checked
                  )
                }
              ),
              /* @__PURE__ */ jsx("div", { className: "w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-indigo-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
            ] })
          ] }),
          ((_P = (_O = campaignData.content) == null ? void 0 : _O.landing) == null ? void 0 : _P.showTerms) && /* @__PURE__ */ jsxs("div", { className: "relative flex", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "text",
                value: ((_R = (_Q = campaignData.content) == null ? void 0 : _Q.landing) == null ? void 0 : _R.termsText) || "",
                onChange: (e) => handleInputChange("landing", "termsText", e.target.value),
                className: "w-full p-2 border rounded-md",
                maxLength: 30
              }
            ),
            /* @__PURE__ */ jsx(
              "button",
              {
                className: "ml-2 p-2 bg-indigo-100 text-indigo-600 rounded-md hover:bg-indigo-200",
                onClick: () => openFileModal("landing.terms"),
                children: /* @__PURE__ */ jsx(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    className: "h-5 w-5",
                    viewBox: "0 0 20 20",
                    fill: "currentColor",
                    children: /* @__PURE__ */ jsx(
                      "path",
                      {
                        fillRule: "evenodd",
                        d: "M8 4a3 3 0 00-3 3v4a3 3 0 006 0V7a1 1 0 112 0v4a5 5 0 01-10 0V7a5 5 0 0110 0v1.5a1.5 1.5 0 01-3 0V6a1 1 0 012 0v2.5a3.5 3.5 0 01-7 0V6a1 1 0 012 0v4a1 1 0 002 0V7a3 3 0 00-3-3z",
                        clipRule: "evenodd"
                      }
                    )
                  }
                )
              }
            ),
            /* @__PURE__ */ jsxs("div", { className: "absolute right-12 top-1/2 transform -translate-y-1/2 text-xs text-gray-500", children: [
              ((_U = (_T = (_S = campaignData.content) == null ? void 0 : _S.landing) == null ? void 0 : _T.termsText) == null ? void 0 : _U.length) || 0,
              "/30"
            ] })
          ] })
        ] })
      ] }),
      activeTab === "wheel" && /* @__PURE__ */ jsxs("div", { className: "space-y-6", children: [
        /* @__PURE__ */ jsx("h3", { className: "text-xl font-semibold text-indigo-700", children: "Wheel Configuration" }),
        /* @__PURE__ */ jsxs("div", { className: "bg-blue-50 border border-blue-200 rounded-lg p-4", children: [
          /* @__PURE__ */ jsx("h4", { className: "font-medium text-blue-900 mb-2", children: "Shopify Discount Codes" }),
          /* @__PURE__ */ jsx("p", { className: "text-sm text-blue-700 mb-3", children: "Your wheel will be automatically configured using discount codes from your Shopify store." }),
          loadingCodes && /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-center py-4", children: [
            /* @__PURE__ */ jsxs(
              "svg",
              {
                className: "animate-spin -ml-1 mr-3 h-5 w-5 text-blue-600",
                xmlns: "http://www.w3.org/2000/svg",
                fill: "none",
                viewBox: "0 0 24 24",
                children: [
                  /* @__PURE__ */ jsx(
                    "circle",
                    {
                      className: "opacity-25",
                      cx: "12",
                      cy: "12",
                      r: "10",
                      stroke: "currentColor",
                      strokeWidth: "4"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      className: "opacity-75",
                      fill: "currentColor",
                      d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                    }
                  )
                ]
              }
            ),
            /* @__PURE__ */ jsx("span", { className: "text-blue-700", children: "Loading discount codes..." })
          ] }),
          codesError && /* @__PURE__ */ jsx("div", { className: "mt-3 p-4 bg-red-50 border border-red-200 rounded-md", children: /* @__PURE__ */ jsxs("div", { className: "flex", children: [
            /* @__PURE__ */ jsx("div", { className: "flex-shrink-0", children: /* @__PURE__ */ jsx(
              "svg",
              {
                className: "h-5 w-5 text-red-400",
                xmlns: "http://www.w3.org/2000/svg",
                viewBox: "0 0 20 20",
                fill: "currentColor",
                children: /* @__PURE__ */ jsx(
                  "path",
                  {
                    fillRule: "evenodd",
                    d: "M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z",
                    clipRule: "evenodd"
                  }
                )
              }
            ) }),
            /* @__PURE__ */ jsxs("div", { className: "ml-3", children: [
              /* @__PURE__ */ jsx("h3", { className: "text-sm font-medium text-red-800", children: "No Discount Codes Found" }),
              /* @__PURE__ */ jsxs("div", { className: "mt-2 text-sm text-red-700", children: [
                /* @__PURE__ */ jsx("p", { children: codesError }),
                /* @__PURE__ */ jsxs("div", { className: "mt-3 p-3 bg-red-100 rounded-md", children: [
                  /* @__PURE__ */ jsx("p", { className: "font-medium text-red-800", children: "To create discount codes:" }),
                  /* @__PURE__ */ jsxs("ol", { className: "list-decimal list-inside mt-2 space-y-1 text-red-700", children: [
                    /* @__PURE__ */ jsx("li", { children: "Go to your Shopify admin panel" }),
                    /* @__PURE__ */ jsx("li", { children: "Navigate to Discounts → Create discount" }),
                    /* @__PURE__ */ jsx("li", { children: 'Choose "Discount code" type' }),
                    /* @__PURE__ */ jsx("li", { children: "Set up your discount details and save" }),
                    /* @__PURE__ */ jsx("li", { children: "Return here and refresh the page" })
                  ] })
                ] })
              ] })
            ] })
          ] }) }),
          discountCodes && discountCodes.length > 0 && !codesError && /* @__PURE__ */ jsx("div", { className: "mt-3 p-3 bg-green-50 border border-green-200 rounded-md", children: /* @__PURE__ */ jsxs("div", { className: "flex", children: [
            /* @__PURE__ */ jsx("div", { className: "flex-shrink-0", children: /* @__PURE__ */ jsx(
              "svg",
              {
                className: "h-5 w-5 text-green-400",
                xmlns: "http://www.w3.org/2000/svg",
                viewBox: "0 0 20 20",
                fill: "currentColor",
                children: /* @__PURE__ */ jsx(
                  "path",
                  {
                    fillRule: "evenodd",
                    d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z",
                    clipRule: "evenodd"
                  }
                )
              }
            ) }),
            /* @__PURE__ */ jsxs("div", { className: "ml-3", children: [
              /* @__PURE__ */ jsxs("p", { className: "text-sm text-green-700", children: [
                "✓ Successfully loaded ",
                discountCodes.length,
                " discount codes from Shopify"
              ] }),
              /* @__PURE__ */ jsxs("div", { className: "mt-2", children: [
                /* @__PURE__ */ jsx("p", { className: "text-xs text-green-600", children: "Available codes:" }),
                /* @__PURE__ */ jsx("div", { className: "flex flex-wrap gap-1 mt-1", children: discountCodes.map((code, index) => /* @__PURE__ */ jsx(
                  "span",
                  {
                    className: "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800",
                    children: code.title
                  },
                  code.id || index
                )) })
              ] })
            ] })
          ] }) }),
          /* @__PURE__ */ jsx("div", { className: "mt-3", children: /* @__PURE__ */ jsx(
            "button",
            {
              onClick: () => fetchDiscountCodes(),
              disabled: loadingCodes,
              className: "px-4 py-2 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 disabled:opacity-50",
              children: loadingCodes ? "Loading..." : "Refresh Discount Codes"
            }
          ) })
        ] }),
        ((_X = (_W = (_V = campaignData.content) == null ? void 0 : _V.wheel) == null ? void 0 : _W.sectors) == null ? void 0 : _X.length) > 0 && /* @__PURE__ */ jsxs("div", { className: "space-y-4", children: [
          /* @__PURE__ */ jsxs("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ jsx("h4", { className: "font-medium text-gray-900", children: "Generated Wheel Configuration" }),
            /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ jsxs("span", { className: "text-sm text-gray-500", children: [
                campaignData.content.wheel.sectors.length,
                " segments"
              ] }),
              /* @__PURE__ */ jsx(
                "button",
                {
                  onClick: () => fetchDiscountCodes(),
                  className: "px-3 py-1 bg-indigo-600 text-white text-sm rounded-md hover:bg-indigo-700",
                  children: "Regenerate"
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "bg-gray-50 rounded-lg p-4", children: [
            /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-12 gap-2 bg-gray-200 p-2 rounded-t-md font-medium text-gray-700 text-sm", children: [
              /* @__PURE__ */ jsx("div", { className: "col-span-1", children: "#" }),
              /* @__PURE__ */ jsx("div", { className: "col-span-4", children: "Reward Type" }),
              /* @__PURE__ */ jsx("div", { className: "col-span-4", children: "Reward Code" }),
              /* @__PURE__ */ jsx("div", { className: "col-span-3", children: "Chance %" })
            ] }),
            campaignData.content.wheel.sectors.map((sector, index) => /* @__PURE__ */ jsxs(
              "div",
              {
                className: `grid grid-cols-12 gap-2 p-2 ${index % 2 === 0 ? "bg-white" : "bg-gray-100"} ${sector.discountCodeId ? "border-l-4 border-green-500" : sector.reward === "Better luck next time" ? "border-l-4 border-red-300" : "border-l-4 border-gray-300"}`,
                children: [
                  /* @__PURE__ */ jsxs("div", { className: "col-span-1 flex items-center justify-center font-medium text-gray-700", children: [
                    sector.id,
                    sector.discountCodeId && /* @__PURE__ */ jsx(
                      "span",
                      {
                        className: "ml-1 text-green-600",
                        title: "Shopify discount code",
                        children: "✓"
                      }
                    ),
                    sector.reward === "Better luck next time" && /* @__PURE__ */ jsx(
                      "span",
                      {
                        className: "ml-1 text-red-500",
                        title: "No prize sector",
                        children: "✗"
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsx("div", { className: "col-span-4 flex items-center", children: /* @__PURE__ */ jsx(
                    "span",
                    {
                      className: `text-sm ${sector.discountCodeId ? "text-green-700 font-medium" : sector.reward === "Better luck next time" ? "text-red-600" : "text-gray-700"}`,
                      children: sector.rewardType
                    }
                  ) }),
                  /* @__PURE__ */ jsx("div", { className: "col-span-4 flex items-center", children: /* @__PURE__ */ jsx(
                    "span",
                    {
                      className: `text-sm font-mono ${sector.discountCodeId ? "text-green-700 font-medium" : sector.reward === "Better luck next time" ? "text-red-600" : "text-gray-700"}`,
                      children: sector.reward
                    }
                  ) }),
                  /* @__PURE__ */ jsx("div", { className: "col-span-3 flex items-center", children: /* @__PURE__ */ jsx("span", { className: "text-sm text-gray-700", children: sector.chance }) })
                ]
              },
              sector.id
            ))
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "bg-gray-50 p-3 rounded-md", children: [
            /* @__PURE__ */ jsx("h5", { className: "font-medium text-gray-900 mb-2", children: "Wheel Statistics" }),
            /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-3 gap-4 text-sm", children: [
              /* @__PURE__ */ jsxs("div", { children: [
                /* @__PURE__ */ jsx("span", { className: "text-gray-600", children: "Total Segments:" }),
                /* @__PURE__ */ jsx("span", { className: "ml-1 font-medium", children: campaignData.content.wheel.sectors.length })
              ] }),
              /* @__PURE__ */ jsxs("div", { children: [
                /* @__PURE__ */ jsx("span", { className: "text-gray-600", children: "Discount Codes:" }),
                /* @__PURE__ */ jsx("span", { className: "ml-1 font-medium text-green-600", children: campaignData.content.wheel.sectors.filter(
                  (s) => s.discountCodeId
                ).length })
              ] }),
              /* @__PURE__ */ jsxs("div", { children: [
                /* @__PURE__ */ jsx("span", { className: "text-gray-600", children: "No Prize:" }),
                /* @__PURE__ */ jsx("span", { className: "ml-1 font-medium text-red-600", children: campaignData.content.wheel.sectors.filter(
                  (s) => s.reward === "Better luck next time"
                ).length })
              ] })
            ] })
          ] })
        ] })
      ] }),
      activeTab === "result" && /* @__PURE__ */ jsxs("div", { className: "space-y-6", children: [
        /* @__PURE__ */ jsx("h3", { className: "text-xl font-semibold text-indigo-700", children: "Result Screen" }),
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Title" }),
          /* @__PURE__ */ jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "text",
                value: ((_Z = (_Y = campaignData.content) == null ? void 0 : _Y.result) == null ? void 0 : _Z.title) || "",
                onChange: (e) => handleInputChange("result", "title", e.target.value),
                className: "w-full p-2 border rounded-md",
                maxLength: 30
              }
            ),
            /* @__PURE__ */ jsxs("div", { className: "absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-gray-500", children: [
              ((_aa = (_$ = (__ = campaignData.content) == null ? void 0 : __.result) == null ? void 0 : _$.title) == null ? void 0 : _aa.length) || 0,
              "/30"
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-1", children: [
            /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Sub Title" }),
            /* @__PURE__ */ jsxs("label", { className: "relative inline-flex items-center cursor-pointer", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  className: "sr-only peer",
                  checked: (_ca = (_ba = campaignData.content) == null ? void 0 : _ba.result) == null ? void 0 : _ca.showSubtitle,
                  onChange: (e) => handleToggleChange(
                    "result",
                    "showSubtitle",
                    e.target.checked
                  )
                }
              ),
              /* @__PURE__ */ jsx("div", { className: "w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-indigo-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
            ] })
          ] }),
          ((_ea = (_da = campaignData.content) == null ? void 0 : _da.result) == null ? void 0 : _ea.showSubtitle) && /* @__PURE__ */ jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "text",
                value: ((_ga = (_fa = campaignData.content) == null ? void 0 : _fa.result) == null ? void 0 : _ga.subtitle) || "",
                onChange: (e) => handleInputChange("result", "subtitle", e.target.value),
                className: "w-full p-2 border rounded-md",
                maxLength: 25
              }
            ),
            /* @__PURE__ */ jsxs("div", { className: "absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-gray-500", children: [
              ((_ja = (_ia = (_ha = campaignData.content) == null ? void 0 : _ha.result) == null ? void 0 : _ia.subtitle) == null ? void 0 : _ja.length) || 0,
              "/25"
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-1", children: [
            /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Button" }),
            /* @__PURE__ */ jsxs("label", { className: "relative inline-flex items-center cursor-pointer", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  className: "sr-only peer",
                  checked: (_la = (_ka = campaignData.content) == null ? void 0 : _ka.result) == null ? void 0 : _la.showButton,
                  onChange: (e) => handleToggleChange(
                    "result",
                    "showButton",
                    e.target.checked
                  )
                }
              ),
              /* @__PURE__ */ jsx("div", { className: "w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-indigo-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
            ] })
          ] }),
          ((_na = (_ma = campaignData.content) == null ? void 0 : _ma.result) == null ? void 0 : _na.showButton) && /* @__PURE__ */ jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "text",
                value: ((_pa = (_oa = campaignData.content) == null ? void 0 : _oa.result) == null ? void 0 : _pa.buttonText) || "",
                onChange: (e) => handleInputChange("result", "buttonText", e.target.value),
                className: "w-full p-2 border rounded-md",
                maxLength: 15
              }
            ),
            /* @__PURE__ */ jsxs("div", { className: "absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-gray-500", children: [
              ((_sa = (_ra = (_qa = campaignData.content) == null ? void 0 : _qa.result) == null ? void 0 : _ra.buttonText) == null ? void 0 : _sa.length) || 0,
              "/15"
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Set Button Destination" }),
          /* @__PURE__ */ jsx(
            "input",
            {
              type: "text",
              value: ((_ua = (_ta = campaignData.content) == null ? void 0 : _ta.result) == null ? void 0 : _ua.buttonDestination) || "",
              onChange: (e) => handleInputChange(
                "result",
                "buttonDestination",
                e.target.value
              ),
              className: "w-full p-2 border rounded-md",
              placeholder: "https://example.com"
            }
          )
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Copy Icon" }),
          /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsx("span", { className: "text-xs text-gray-500 mr-2", children: "Show the copy icon" }),
            /* @__PURE__ */ jsxs("label", { className: "relative inline-flex items-center cursor-pointer", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  className: "sr-only peer",
                  checked: (_wa = (_va = campaignData.content) == null ? void 0 : _va.result) == null ? void 0 : _wa.showCopyIcon,
                  onChange: (e) => handleToggleChange(
                    "result",
                    "showCopyIcon",
                    e.target.checked
                  )
                }
              ),
              /* @__PURE__ */ jsx("div", { className: "w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-indigo-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between", children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700", children: "Show result again as reminder?" }),
          /* @__PURE__ */ jsxs("label", { className: "relative inline-flex items-center cursor-pointer", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "checkbox",
                className: "sr-only peer",
                checked: (_ya = (_xa = campaignData.content) == null ? void 0 : _xa.result) == null ? void 0 : _ya.showResultAgain,
                onChange: (e) => handleToggleChange(
                  "result",
                  "showResultAgain",
                  e.target.checked
                )
              }
            ),
            /* @__PURE__ */ jsx("div", { className: "w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-indigo-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
          ] })
        ] }),
        ((_Aa = (_za = campaignData.content) == null ? void 0 : _za.result) == null ? void 0 : _Aa.showResultAgain) && /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Set a timer for to show the result screen." }),
          /* @__PURE__ */ jsxs("div", { className: "flex items-center space-x-2", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "number",
                min: "0",
                max: "59",
                value: ((_Da = (_Ca = (_Ba = campaignData.content) == null ? void 0 : _Ba.result) == null ? void 0 : _Ca.reminderTimer) == null ? void 0 : _Da.minutes) || 0,
                onChange: (e) => handleReminderTimerChange("minutes", e.target.value),
                className: "w-16 p-2 border rounded-md text-center"
              }
            ),
            /* @__PURE__ */ jsx("span", { className: "text-sm text-gray-700", children: ":" }),
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "number",
                min: "0",
                max: "59",
                value: ((_Ga = (_Fa = (_Ea = campaignData.content) == null ? void 0 : _Ea.result) == null ? void 0 : _Fa.reminderTimer) == null ? void 0 : _Ga.seconds) || 0,
                onChange: (e) => handleReminderTimerChange("seconds", e.target.value),
                className: "w-16 p-2 border rounded-md text-center"
              }
            )
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "flex mt-1", children: [
            /* @__PURE__ */ jsx("div", { className: "w-16 text-xs text-gray-500 text-center", children: "Minutes" }),
            /* @__PURE__ */ jsx("div", { className: "w-4" }),
            /* @__PURE__ */ jsx("div", { className: "w-16 text-xs text-gray-500 text-center", children: "Seconds" })
          ] })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsx("div", { className: "w-full lg:w-2/5", children: /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 p-4 rounded-lg sticky top-4", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-4", children: [
        /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-full overflow-hidden flex border border-indigo-600 p-1", children: [
          /* @__PURE__ */ jsxs(
            "button",
            {
              className: `px-4 py-2 rounded-full flex items-center ${previewDevice === "mobile" ? "bg-indigo-600 text-white" : "text-indigo-600"}`,
              onClick: () => setPreviewDevice("mobile"),
              children: [
                /* @__PURE__ */ jsx(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    className: "h-5 w-5 inline-block mr-1",
                    viewBox: "0 0 20 20",
                    fill: "currentColor",
                    children: /* @__PURE__ */ jsx(
                      "path",
                      {
                        fillRule: "evenodd",
                        d: "M7 2a2 2 0 00-2 2v12a2 2 0 002 2h6a2 2 0 002-2V4a2 2 0 00-2-2H7zm3 14a1 1 0 100-2 1 1 0 000 2z",
                        clipRule: "evenodd"
                      }
                    )
                  }
                ),
                "Mobile"
              ]
            }
          ),
          /* @__PURE__ */ jsxs(
            "button",
            {
              className: `px-4 py-2 rounded-full flex items-center ${previewDevice === "desktop" ? "bg-indigo-600 text-white" : "text-indigo-600"}`,
              onClick: () => setPreviewDevice("desktop"),
              children: [
                /* @__PURE__ */ jsx(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    className: "h-5 w-5 inline-block mr-1",
                    viewBox: "0 0 20 20",
                    fill: "currentColor",
                    children: /* @__PURE__ */ jsx(
                      "path",
                      {
                        fillRule: "evenodd",
                        d: "M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z",
                        clipRule: "evenodd"
                      }
                    )
                  }
                ),
                "Desktop"
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsxs("button", { className: "text-gray-500 flex items-center", children: [
          /* @__PURE__ */ jsxs(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-5 w-5 mr-1",
              viewBox: "0 0 20 20",
              fill: "currentColor",
              children: [
                /* @__PURE__ */ jsx("path", { d: "M10 12a2 2 0 100-4 2 2 0 000 4z" }),
                /* @__PURE__ */ jsx(
                  "path",
                  {
                    fillRule: "evenodd",
                    d: "M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z",
                    clipRule: "evenodd"
                  }
                )
              ]
            }
          ),
          "Preview"
        ] })
      ] }),
      /* @__PURE__ */ jsx("div", { className: "w-full h-full relative bg-gray-700 flex items-center justify-center", children: previewDevice === "desktop" ? /* @__PURE__ */ jsx("div", { className: "w-full h-full rounded-lg overflow-hidden", children: /* @__PURE__ */ jsx("div", { className: "bg-gray-800 p-4 h-[400px] flex items-center justify-center", children: /* @__PURE__ */ jsxs(
        "div",
        {
          className: `bg-white rounded-lg shadow-lg w-full max-w-[800px] h-[320px] p-0 relative overflow-hidden`,
          children: [
            /* @__PURE__ */ jsx("button", { className: "absolute top-3 right-3 text-gray-400 hover:text-gray-600 z-10", children: /* @__PURE__ */ jsx(
              "svg",
              {
                xmlns: "http://www.w3.org/2000/svg",
                className: "h-5 w-5",
                viewBox: "0 0 20 20",
                fill: "currentColor",
                children: /* @__PURE__ */ jsx(
                  "path",
                  {
                    fillRule: "evenodd",
                    d: "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z",
                    clipRule: "evenodd"
                  }
                )
              }
            ) }),
            /* @__PURE__ */ jsx("div", { className: "flex h-full", children: activeTab === "landing" || activeTab === "wheel" ? /* @__PURE__ */ jsxs(Fragment, { children: [
              /* @__PURE__ */ jsxs("div", { className: "w-1/2 p-8 flex flex-col justify-center", children: [
                /* @__PURE__ */ jsx(
                  "h2",
                  {
                    className: "text-3xl font-bold mb-3",
                    style: { color: campaignData.primaryColor },
                    children: ((_Ia = (_Ha = campaignData.content) == null ? void 0 : _Ha.landing) == null ? void 0 : _Ia.title) || "GO AHEAD GIVE IT A SPIN!"
                  }
                ),
                ((_Ka = (_Ja = campaignData.content) == null ? void 0 : _Ja.landing) == null ? void 0 : _Ka.showSubtitle) && /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-600 mb-5", children: ((_Ma = (_La = campaignData.content) == null ? void 0 : _La.landing) == null ? void 0 : _Ma.subtitle) || "This is a demo of our Spin to Win displays" }),
                ((_Oa = (_Na = campaignData.content) == null ? void 0 : _Na.landing) == null ? void 0 : _Oa.showPrivacyPolicy) && /* @__PURE__ */ jsxs("div", { className: "flex items-center mb-4", children: [
                  /* @__PURE__ */ jsx(
                    "input",
                    {
                      type: "checkbox",
                      id: "preview-privacy",
                      className: "mr-2",
                      checked: true,
                      readOnly: true
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "label",
                    {
                      htmlFor: "preview-privacy",
                      className: "text-xs text-gray-600",
                      children: ((_Qa = (_Pa = campaignData.content) == null ? void 0 : _Pa.landing) == null ? void 0 : _Qa.privacyPolicyText) || "I accept the T&C and Privacy Notice."
                    }
                  )
                ] }),
                ((_Sa = (_Ra = campaignData.content) == null ? void 0 : _Ra.landing) == null ? void 0 : _Sa.showEmail) && /* @__PURE__ */ jsx(
                  "input",
                  {
                    type: "email",
                    placeholder: ((_Ua = (_Ta = campaignData.content) == null ? void 0 : _Ta.landing) == null ? void 0 : _Ua.emailPlaceholder) || "Enter your email",
                    className: "w-full p-3 border rounded-md mb-4 text-center"
                  }
                ),
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    className: "w-full py-3 font-bold text-white rounded-md text-lg",
                    style: {
                      backgroundColor: campaignData.primaryColor
                    },
                    children: ((_Wa = (_Va = campaignData.content) == null ? void 0 : _Va.landing) == null ? void 0 : _Wa.buttonText) || "SPIN NOW"
                  }
                ),
                ((_Ya = (_Xa = campaignData.content) == null ? void 0 : _Xa.landing) == null ? void 0 : _Ya.showTerms) && /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-500 mt-3 text-center", children: ((__a = (_Za = campaignData.content) == null ? void 0 : _Za.landing) == null ? void 0 : __a.termsText) || "I accept the T&C$" })
              ] }),
              /* @__PURE__ */ jsx("div", { className: "w-1/2 bg-gray-50 flex items-center justify-center relative", children: /* @__PURE__ */ jsx("div", { className: "relative w-[280px] h-[280px]", children: /* @__PURE__ */ jsxs(
                "div",
                {
                  className: "w-full h-full rounded-full",
                  style: {
                    background: generateWheelGradient()
                  },
                  children: [
                    /* @__PURE__ */ jsx("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-12 h-12 rounded-full bg-black" }) }),
                    (_bb = (_ab = (_$a = campaignData.content) == null ? void 0 : _$a.wheel) == null ? void 0 : _ab.sectors) == null ? void 0 : _bb.map(
                      (sector, index) => {
                        const sectorCount = campaignData.content.wheel.sectors.length;
                        const angle = 360 / sectorCount * index + 360 / sectorCount / 2;
                        const radius = 110;
                        const x = radius * Math.cos((angle - 90) * (Math.PI / 180));
                        const y = radius * Math.sin((angle - 90) * (Math.PI / 180));
                        return /* @__PURE__ */ jsx(
                          "div",
                          {
                            className: "absolute text-xs font-bold text-center",
                            style: {
                              left: `calc(50% + ${x}px)`,
                              top: `calc(50% + ${y}px)`,
                              transform: "translate(-50%, -50%) rotate(" + angle + "deg)",
                              width: "60px",
                              color: index % 2 === 0 ? "white" : "black"
                            },
                            children: sector.rewardType
                          },
                          sector.id
                        );
                      }
                    )
                  ]
                }
              ) }) })
            ] }) : /* @__PURE__ */ jsxs(Fragment, { children: [
              /* @__PURE__ */ jsxs("div", { className: "w-1/2 p-8 flex flex-col justify-center", children: [
                /* @__PURE__ */ jsx(
                  "h2",
                  {
                    className: "text-3xl font-bold mb-3",
                    style: { color: campaignData.primaryColor },
                    children: ((_db = (_cb = campaignData.content) == null ? void 0 : _cb.result) == null ? void 0 : _db.title) || "LUCKY DAY!"
                  }
                ),
                ((_fb = (_eb = campaignData.content) == null ? void 0 : _eb.result) == null ? void 0 : _fb.showSubtitle) && /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-600 mb-5", children: ((_hb = (_gb = campaignData.content) == null ? void 0 : _gb.result) == null ? void 0 : _hb.subtitle) || "You have won 10% discount for your shopping" }),
                /* @__PURE__ */ jsxs("div", { className: "mb-5", children: [
                  /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-600 mb-2", children: "Your discount code is" }),
                  /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
                    /* @__PURE__ */ jsx("div", { className: "border border-gray-300 rounded-md p-3 bg-gray-50 font-mono text-lg flex-grow text-center", children: ((_lb = (_kb = (_jb = (_ib = campaignData.content) == null ? void 0 : _ib.wheel) == null ? void 0 : _jb.sectors) == null ? void 0 : _kb.find(
                      (s) => s.discountCodeId
                    )) == null ? void 0 : _lb.reward) || "SAMPLE10" }),
                    ((_nb = (_mb = campaignData.content) == null ? void 0 : _mb.result) == null ? void 0 : _nb.showCopyIcon) && /* @__PURE__ */ jsx("button", { className: "ml-2 p-2 bg-gray-100 text-gray-600 rounded-md hover:bg-gray-200", children: /* @__PURE__ */ jsxs(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        className: "h-6 w-6",
                        viewBox: "0 0 20 20",
                        fill: "currentColor",
                        children: [
                          /* @__PURE__ */ jsx("path", { d: "M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" }),
                          /* @__PURE__ */ jsx("path", { d: "M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z" })
                        ]
                      }
                    ) })
                  ] })
                ] }),
                ((_pb = (_ob = campaignData.content) == null ? void 0 : _ob.result) == null ? void 0 : _pb.showButton) && /* @__PURE__ */ jsx(
                  "button",
                  {
                    className: "w-full py-3 font-bold text-white rounded-md text-lg",
                    style: {
                      backgroundColor: campaignData.primaryColor
                    },
                    children: ((_rb = (_qb = campaignData.content) == null ? void 0 : _qb.result) == null ? void 0 : _rb.buttonText) || "REDEEM NOW"
                  }
                )
              ] }),
              /* @__PURE__ */ jsx("div", { className: "w-1/2 bg-gray-50 flex items-center justify-center relative", children: /* @__PURE__ */ jsx("div", { className: "relative w-[280px] h-[280px]", children: /* @__PURE__ */ jsxs(
                "div",
                {
                  className: "w-full h-full rounded-full",
                  style: {
                    background: generateWheelGradient()
                  },
                  children: [
                    /* @__PURE__ */ jsx("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-12 h-12 rounded-full bg-black" }) }),
                    (_ub = (_tb = (_sb = campaignData.content) == null ? void 0 : _sb.wheel) == null ? void 0 : _tb.sectors) == null ? void 0 : _ub.map(
                      (sector, index) => {
                        const sectorCount = campaignData.content.wheel.sectors.length;
                        const angle = 360 / sectorCount * index + 360 / sectorCount / 2;
                        const radius = 110;
                        const x = radius * Math.cos((angle - 90) * (Math.PI / 180));
                        const y = radius * Math.sin((angle - 90) * (Math.PI / 180));
                        return /* @__PURE__ */ jsx(
                          "div",
                          {
                            className: "absolute text-xs font-bold text-center",
                            style: {
                              left: `calc(50% + ${x}px)`,
                              top: `calc(50% + ${y}px)`,
                              transform: "translate(-50%, -50%) rotate(" + angle + "deg)",
                              width: "60px",
                              color: index % 2 === 0 ? "white" : "black"
                            },
                            children: sector.rewardType
                          },
                          sector.id
                        );
                      }
                    )
                  ]
                }
              ) }) })
            ] }) })
          ]
        }
      ) }) }) : (
        // Mobile view
        /* @__PURE__ */ jsxs("div", { className: "w-56 h-[480px] bg-gray-900 rounded-3xl p-2 relative", children: [
          /* @__PURE__ */ jsx("div", { className: "absolute top-4 left-1/2 transform -translate-x-1/2 w-20 h-4 bg-black rounded-full" }),
          /* @__PURE__ */ jsx("div", { className: "w-full h-full bg-gray-800 rounded-2xl overflow-hidden", children: /* @__PURE__ */ jsx("div", { className: "bg-white h-full p-4 flex flex-col items-center", children: activeTab === "landing" || activeTab === "wheel" ? /* @__PURE__ */ jsxs(Fragment, { children: [
            /* @__PURE__ */ jsxs("div", { className: "text-center w-full", children: [
              /* @__PURE__ */ jsx(
                "h2",
                {
                  className: "text-xl font-bold mb-2",
                  style: { color: campaignData.primaryColor },
                  children: ((_wb = (_vb = campaignData.content) == null ? void 0 : _vb.landing) == null ? void 0 : _wb.title) || "GO AHEAD GIVE IT A SPIN!"
                }
              ),
              ((_yb = (_xb = campaignData.content) == null ? void 0 : _xb.landing) == null ? void 0 : _yb.showSubtitle) && /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-600 mb-3", children: ((_Ab = (_zb = campaignData.content) == null ? void 0 : _zb.landing) == null ? void 0 : _Ab.subtitle) || "This is a demo of our Spin to Win displays" }),
              ((_Cb = (_Bb = campaignData.content) == null ? void 0 : _Bb.landing) == null ? void 0 : _Cb.showPrivacyPolicy) && /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-center mb-3", children: [
                /* @__PURE__ */ jsx(
                  "input",
                  {
                    type: "checkbox",
                    id: "preview-privacy-mobile",
                    className: "mr-1 h-3 w-3",
                    checked: true,
                    readOnly: true
                  }
                ),
                /* @__PURE__ */ jsx(
                  "label",
                  {
                    htmlFor: "preview-privacy-mobile",
                    className: "text-[10px] text-gray-600",
                    children: ((_Eb = (_Db = campaignData.content) == null ? void 0 : _Db.landing) == null ? void 0 : _Eb.privacyPolicyText) || "I accept the T&C and Privacy Notice."
                  }
                )
              ] }),
              ((_Gb = (_Fb = campaignData.content) == null ? void 0 : _Fb.landing) == null ? void 0 : _Gb.showEmail) && /* @__PURE__ */ jsx(
                "input",
                {
                  type: "email",
                  placeholder: ((_Ib = (_Hb = campaignData.content) == null ? void 0 : _Hb.landing) == null ? void 0 : _Ib.emailPlaceholder) || "Enter your email",
                  className: "w-full p-2 text-xs border rounded-md mb-3 text-center"
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: "w-full py-2 text-sm font-bold text-white rounded-md",
                  style: {
                    backgroundColor: campaignData.primaryColor
                  },
                  children: ((_Kb = (_Jb = campaignData.content) == null ? void 0 : _Jb.landing) == null ? void 0 : _Kb.buttonText) || "SPIN NOW"
                }
              ),
              ((_Mb = (_Lb = campaignData.content) == null ? void 0 : _Lb.landing) == null ? void 0 : _Mb.showTerms) && /* @__PURE__ */ jsx("p", { className: "text-[8px] text-gray-500 mt-2 text-center", children: ((_Ob = (_Nb = campaignData.content) == null ? void 0 : _Nb.landing) == null ? void 0 : _Ob.termsText) || "I accept the T&C$" })
            ] }),
            /* @__PURE__ */ jsx("div", { className: "mt-4 relative w-40 h-40", children: /* @__PURE__ */ jsxs(
              "div",
              {
                className: "w-full h-full rounded-full",
                style: {
                  background: generateWheelGradient()
                },
                children: [
                  /* @__PURE__ */ jsx("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-6 h-6 rounded-full bg-black" }) }),
                  (_Rb = (_Qb = (_Pb = campaignData.content) == null ? void 0 : _Pb.wheel) == null ? void 0 : _Qb.sectors) == null ? void 0 : _Rb.map(
                    (sector, index) => {
                      const sectorCount = campaignData.content.wheel.sectors.length;
                      const angle = 360 / sectorCount * index + 360 / sectorCount / 2;
                      const radius = 60;
                      const x = radius * Math.cos((angle - 90) * (Math.PI / 180));
                      const y = radius * Math.sin((angle - 90) * (Math.PI / 180));
                      return /* @__PURE__ */ jsx(
                        "div",
                        {
                          className: "absolute text-[6px] font-bold text-center",
                          style: {
                            left: `calc(50% + ${x}px)`,
                            top: `calc(50% + ${y}px)`,
                            transform: "translate(-50%, -50%) rotate(" + angle + "deg)",
                            width: "30px",
                            color: index % 2 === 0 ? "white" : "black"
                          },
                          children: sector.rewardType
                        },
                        sector.id
                      );
                    }
                  )
                ]
              }
            ) })
          ] }) : /* @__PURE__ */ jsxs(Fragment, { children: [
            /* @__PURE__ */ jsxs("div", { className: "text-center w-full", children: [
              /* @__PURE__ */ jsx(
                "h2",
                {
                  className: "text-xl font-bold mb-2",
                  style: { color: campaignData.primaryColor },
                  children: ((_Tb = (_Sb = campaignData.content) == null ? void 0 : _Sb.result) == null ? void 0 : _Tb.title) || "LUCKY DAY!"
                }
              ),
              ((_Vb = (_Ub = campaignData.content) == null ? void 0 : _Ub.result) == null ? void 0 : _Vb.showSubtitle) && /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-600 mb-3", children: ((_Xb = (_Wb = campaignData.content) == null ? void 0 : _Wb.result) == null ? void 0 : _Xb.subtitle) || "You have won 10% discount for your shopping" }),
              /* @__PURE__ */ jsxs("div", { className: "mb-3", children: [
                /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-600 mb-1", children: "Your discount code is" }),
                /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-center", children: [
                  /* @__PURE__ */ jsx("div", { className: "border border-gray-300 rounded-md p-1 bg-gray-50 font-mono text-sm", children: ((_$b = (__b = (_Zb = (_Yb = campaignData.content) == null ? void 0 : _Yb.wheel) == null ? void 0 : _Zb.sectors) == null ? void 0 : __b.find(
                    (s) => s.discountCodeId
                  )) == null ? void 0 : _$b.reward) || "SAMPLE10" }),
                  ((_bc = (_ac = campaignData.content) == null ? void 0 : _ac.result) == null ? void 0 : _bc.showCopyIcon) && /* @__PURE__ */ jsx("button", { className: "ml-1 p-1 bg-gray-100 text-gray-600 rounded-md hover:bg-gray-200", children: /* @__PURE__ */ jsxs(
                    "svg",
                    {
                      xmlns: "http://www.w3.org/2000/svg",
                      className: "h-4 w-4",
                      viewBox: "0 0 20 20",
                      fill: "currentColor",
                      children: [
                        /* @__PURE__ */ jsx("path", { d: "M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" }),
                        /* @__PURE__ */ jsx("path", { d: "M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z" })
                      ]
                    }
                  ) })
                ] })
              ] }),
              ((_dc = (_cc = campaignData.content) == null ? void 0 : _cc.result) == null ? void 0 : _dc.showButton) && /* @__PURE__ */ jsx(
                "button",
                {
                  className: "w-full py-2 text-sm font-bold text-white rounded-md",
                  style: {
                    backgroundColor: campaignData.primaryColor
                  },
                  children: ((_fc = (_ec = campaignData.content) == null ? void 0 : _ec.result) == null ? void 0 : _fc.buttonText) || "REDEEM NOW"
                }
              )
            ] }),
            /* @__PURE__ */ jsx("div", { className: "mt-4 relative w-40 h-40", children: /* @__PURE__ */ jsxs(
              "div",
              {
                className: "w-full h-full rounded-full",
                style: {
                  background: generateWheelGradient()
                },
                children: [
                  /* @__PURE__ */ jsx("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-6 h-6 rounded-full bg-black" }) }),
                  (_ic = (_hc = (_gc = campaignData.content) == null ? void 0 : _gc.wheel) == null ? void 0 : _hc.sectors) == null ? void 0 : _ic.map(
                    (sector, index) => {
                      const sectorCount = campaignData.content.wheel.sectors.length;
                      const angle = 360 / sectorCount * index + 360 / sectorCount / 2;
                      const radius = 60;
                      const x = radius * Math.cos((angle - 90) * (Math.PI / 180));
                      const y = radius * Math.sin((angle - 90) * (Math.PI / 180));
                      return /* @__PURE__ */ jsx(
                        "div",
                        {
                          className: "absolute text-[6px] font-bold text-center",
                          style: {
                            left: `calc(50% + ${x}px)`,
                            top: `calc(50% + ${y}px)`,
                            transform: "translate(-50%, -50%) rotate(" + angle + "deg)",
                            width: "30px",
                            color: index % 2 === 0 ? "white" : "black"
                          },
                          children: sector.rewardType
                        },
                        sector.id
                      );
                    }
                  )
                ]
              }
            ) })
          ] }) }) })
        ] })
      ) }),
      /* @__PURE__ */ jsxs("div", { className: "flex justify-center mt-4 border-b", children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            className: `px-4 py-2 ${activeTab === "landing" ? "border-b-2 border-indigo-600 text-indigo-600 font-medium" : "text-gray-500"}`,
            onClick: () => setActiveTab("landing"),
            children: "Landing Screen"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: `px-4 py-2 ${activeTab === "result" ? "border-b-2 border-indigo-600 text-indigo-600 font-medium" : "text-gray-500"}`,
            onClick: () => setActiveTab("result"),
            children: "Result screen"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: `px-4 py-2 ${activeTab === "floating" ? "border-b-2 border-indigo-600 text-indigo-600 font-medium" : "text-gray-500"}`,
            onClick: () => setActiveTab("floating"),
            children: "Floating Button"
          }
        )
      ] })
    ] }) }),
    showFileModal && /* @__PURE__ */ jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ jsx("h3", { className: "text-lg font-medium mb-4", children: "How would you like to add it?" }),
      /* @__PURE__ */ jsxs(
        "button",
        {
          className: "w-full mb-4 p-3 bg-indigo-100 text-indigo-700 rounded-lg flex items-center justify-center hover:bg-indigo-200",
          onClick: () => {
            var _a3;
            return (_a3 = fileInputRef.current) == null ? void 0 : _a3.click();
          },
          children: [
            /* @__PURE__ */ jsx(
              "svg",
              {
                xmlns: "http://www.w3.org/2000/svg",
                className: "h-5 w-5 mr-2",
                viewBox: "0 0 20 20",
                fill: "currentColor",
                children: /* @__PURE__ */ jsx(
                  "path",
                  {
                    fillRule: "evenodd",
                    d: "M8 4a3 3 0 00-3 3v4a3 3 0 006 0V7a1 1 0 112 0v4a5 5 0 01-10 0V7a5 5 0 0110 0v1.5a1.5 1.5 0 01-3 0V6a1 1 0 012 0v2.5a3.5 3.5 0 01-7 0V6a1 1 0 012 0v4a1 1 0 002 0V7a3 3 0 00-3-3z",
                    clipRule: "evenodd"
                  }
                )
              }
            ),
            "Browse your file (.xls, .gsheet, .doc)"
          ]
        }
      ),
      /* @__PURE__ */ jsx(
        "input",
        {
          type: "file",
          ref: fileInputRef,
          onChange: handleFileUpload,
          className: "hidden"
        }
      ),
      /* @__PURE__ */ jsx("div", { className: "text-center text-gray-500 my-2", children: "OR" }),
      /* @__PURE__ */ jsxs("div", { className: "relative", children: [
        /* @__PURE__ */ jsx(
          "input",
          {
            type: "text",
            placeholder: "Paste your link here",
            className: "w-full p-3 border rounded-lg pl-10",
            onBlur: (e) => handlePasteLink(e.target.value)
          }
        ),
        /* @__PURE__ */ jsx(
          "svg",
          {
            xmlns: "http://www.w3.org/2000/svg",
            className: "h-5 w-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2",
            viewBox: "0 0 20 20",
            fill: "currentColor",
            children: /* @__PURE__ */ jsx(
              "path",
              {
                fillRule: "evenodd",
                d: "M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z",
                clipRule: "evenodd"
              }
            )
          }
        )
      ] }),
      /* @__PURE__ */ jsx("div", { className: "flex justify-end mt-4", children: /* @__PURE__ */ jsx(
        "button",
        {
          className: "px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300",
          onClick: () => setShowFileModal(false),
          children: "Cancel"
        }
      ) })
    ] }) })
  ] });
}
function StepFour() {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r2, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K, _L, _M, _N, _O, _P, _Q, _R, _S, _T, _U, _V, _W, _X, _Y, _Z, __, _$, _aa, _ba, _ca, _da, _ea, _fa, _ga, _ha, _ia, _ja, _ka, _la, _ma, _na, _oa, _pa, _qa, _ra, _sa, _ta, _ua, _va, _wa, _xa, _ya, _za, _Aa, _Ba, _Ca, _Da, _Ea, _Fa, _Ga, _Ha, _Ia, _Ja, _Ka, _La, _Ma, _Na, _Oa, _Pa, _Qa, _Ra, _Sa, _Ta, _Ua, _Va, _Wa, _Xa, _Ya, _Za, __a, _$a, _ab, _bb, _cb, _db, _eb, _fb, _gb, _hb;
  const {
    campaignData,
    saveCampaign,
    updateCampaignData,
    updateCampaignRules
  } = useCampaign();
  const [showLaunchModal, setShowLaunchModal] = useState(false);
  const [isLaunching, setIsLaunching] = useState(false);
  const [launchStatus, setLaunchStatus] = useState("draft");
  const [previewDevice, setPreviewDevice] = useState("desktop");
  const [activePreviewTab, setActivePreviewTab] = useState("landing");
  const [newPageUrl, setNewPageUrl] = useState("");
  const navigate = useNavigate$1();
  const [appearingRules, setAppearingRules] = useState(
    ((_a2 = campaignData.rules) == null ? void 0 : _a2.appearingRules) || {
      exitIntent: { enabled: false, device: "desktop" },
      timeDelay: { enabled: false, seconds: 5 },
      pageScroll: { enabled: false, percentage: 20 },
      pageCount: { enabled: false, pages: 2 },
      clicksCount: { enabled: false, clicks: 2 },
      inactivity: { enabled: false, seconds: 30 }
    }
  );
  const [pageTargeting, setPageTargeting] = useState(
    ((_b = campaignData.rules) == null ? void 0 : _b.pageTargeting) || {
      enabled: true,
      url: "www.yourdomain.com",
      urls: []
    }
  );
  const [popupAgain, setPopupAgain] = useState(
    ((_c = campaignData.rules) == null ? void 0 : _c.popupAgain) || {
      enabled: true,
      timer: { minutes: 10, seconds: 0 }
    }
  );
  const [displayFrequency, setDisplayFrequency] = useState(
    ((_d = campaignData.rules) == null ? void 0 : _d.displayFrequency) || {
      enabled: true,
      frequency: "once_a_day",
      visitorType: "everyone"
      // everyone, new, return
    }
  );
  useEffect(() => {
    if (!campaignData.rules) {
      updateCampaignData({
        rules: {
          appearingRules,
          pageTargeting,
          popupAgain,
          displayFrequency
        }
      });
    }
  }, []);
  useEffect(() => {
    if (campaignData.rules) {
      if (campaignData.rules.appearingRules) {
        setAppearingRules(campaignData.rules.appearingRules);
      }
      if (campaignData.rules.pageTargeting) {
        setPageTargeting(campaignData.rules.pageTargeting);
      }
      if (campaignData.rules.popupAgain) {
        setPopupAgain(campaignData.rules.popupAgain);
      }
      if (campaignData.rules.displayFrequency) {
        setDisplayFrequency(campaignData.rules.displayFrequency);
      }
    }
  }, [campaignData.rules]);
  const saveRulesToContext = () => {
    updateCampaignRules("appearingRules", appearingRules);
    updateCampaignRules("pageTargeting", pageTargeting);
    updateCampaignRules("popupAgain", popupAgain);
    updateCampaignRules("displayFrequency", displayFrequency);
  };
  const handleFinish = () => {
    console.log("Finish button clicked, showing launch modal");
    saveRulesToContext();
    setShowLaunchModal(true);
  };
  const handleLaunch = async () => {
    try {
      setIsLaunching(true);
      console.log("Launching campaign with status:", launchStatus);
      saveRulesToContext();
      const savedCampaign = await saveCampaign({
        ...campaignData,
        status: launchStatus,
        createdAt: (/* @__PURE__ */ new Date()).toISOString(),
        rules: {
          appearingRules,
          pageTargeting,
          popupAgain,
          displayFrequency
        }
      });
      toast.success(
        `Campaign ${launchStatus === "active" ? "launched" : "saved"} successfully!`
      );
      navigate("/app/campaigns");
    } catch (error) {
      console.error("Error launching campaign:", error);
      toast.error(`Error: ${error.message}`);
    } finally {
      setIsLaunching(false);
      setShowLaunchModal(false);
    }
  };
  const toggleAppearingRule = (rule) => {
    const updatedRules = {
      ...appearingRules,
      [rule]: {
        ...appearingRules[rule],
        enabled: !appearingRules[rule].enabled
      }
    };
    setAppearingRules(updatedRules);
    updateCampaignRules("appearingRules", updatedRules);
  };
  const updateAppearingRuleValue = (rule, field, value) => {
    const updatedRules = {
      ...appearingRules,
      [rule]: {
        ...appearingRules[rule],
        [field]: value
      }
    };
    setAppearingRules(updatedRules);
    updateCampaignRules("appearingRules", updatedRules);
  };
  const togglePageTargeting = () => {
    const updatedTargeting = {
      ...pageTargeting,
      enabled: !pageTargeting.enabled
    };
    setPageTargeting(updatedTargeting);
    updateCampaignRules("pageTargeting", updatedTargeting);
  };
  const addPageTargetingUrl = () => {
    if (newPageUrl && !pageTargeting.urls.includes(newPageUrl)) {
      const updatedTargeting = {
        ...pageTargeting,
        urls: [...pageTargeting.urls, newPageUrl]
      };
      setPageTargeting(updatedTargeting);
      updateCampaignRules("pageTargeting", updatedTargeting);
      setNewPageUrl("");
    }
  };
  const removePageTargetingUrl = (url) => {
    const updatedTargeting = {
      ...pageTargeting,
      urls: pageTargeting.urls.filter((u) => u !== url)
    };
    setPageTargeting(updatedTargeting);
    updateCampaignRules("pageTargeting", updatedTargeting);
  };
  const togglePopupAgain = () => {
    const updatedPopupAgain = {
      ...popupAgain,
      enabled: !popupAgain.enabled
    };
    setPopupAgain(updatedPopupAgain);
    updateCampaignRules("popupAgain", updatedPopupAgain);
  };
  const updatePopupTimer = (field, value) => {
    const numValue = Number.parseInt(value) || 0;
    const updatedTimer = {
      ...popupAgain.timer,
      [field]: numValue
    };
    const updatedPopupAgain = {
      ...popupAgain,
      timer: updatedTimer
    };
    setPopupAgain(updatedPopupAgain);
    updateCampaignRules("popupAgain", updatedPopupAgain);
  };
  const toggleDisplayFrequency = () => {
    const updatedFrequency = {
      ...displayFrequency,
      enabled: !displayFrequency.enabled
    };
    setDisplayFrequency(updatedFrequency);
    updateCampaignRules("displayFrequency", updatedFrequency);
  };
  const updateDisplayFrequency = (frequency) => {
    const updatedFrequency = {
      ...displayFrequency,
      frequency
    };
    setDisplayFrequency(updatedFrequency);
    updateCampaignRules("displayFrequency", updatedFrequency);
  };
  const updateVisitorType = (visitorType) => {
    const updatedFrequency = {
      ...displayFrequency,
      visitorType
    };
    setDisplayFrequency(updatedFrequency);
    updateCampaignRules("displayFrequency", updatedFrequency);
  };
  const renderWheel = (size, isMobile = false) => {
    var _a3, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _i2, _j2, _k2, _l2, _m2, _n2, _o2, _p2, _q2, _r3, _s2, _t2, _u2, _v2, _w2, _x2, _y2, _z2, _A2, _B2, _C2, _D2, _E2, _F2, _G2, _H2, _I2, _J2, _K2;
    const wheelSectors = ((_a3 = campaignData.layout) == null ? void 0 : _a3.wheelSectors) || "eight";
    const textSizeClass = isMobile ? "text-[6px]" : "text-sm";
    return /* @__PURE__ */ jsx("div", { className: `relative ${size}`, children: /* @__PURE__ */ jsxs(
      "div",
      {
        className: "w-full h-full rounded-full",
        style: {
          background: wheelSectors === "four" ? `conic-gradient(
                    ${campaignData.primaryColor} 0deg, 
                    ${campaignData.primaryColor} 90deg, 
                    ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 90deg, 
                    ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 180deg, 
                    ${campaignData.primaryColor} 180deg, 
                    ${campaignData.primaryColor} 270deg, 
                    ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 270deg, 
                    ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 360deg
                  )` : wheelSectors === "six" ? `conic-gradient(
                      ${campaignData.primaryColor} 0deg, 
                      ${campaignData.primaryColor} 60deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 60deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 120deg, 
                      ${campaignData.primaryColor} 120deg, 
                      ${campaignData.primaryColor} 180deg,
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 180deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 240deg,
                      ${campaignData.primaryColor} 240deg, 
                      ${campaignData.primaryColor} 300deg,
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 300deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 360deg
                    )` : `conic-gradient(
                      ${campaignData.primaryColor} 0deg, 
                      ${campaignData.primaryColor} 45deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 45deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 90deg,
                      ${campaignData.primaryColor} 90deg, 
                      ${campaignData.primaryColor} 135deg,
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 135deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 180deg,
                      ${campaignData.primaryColor} 180deg, 
                      ${campaignData.primaryColor} 225deg,
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 225deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 270deg,
                      ${campaignData.primaryColor} 270deg, 
                      ${campaignData.primaryColor} 315deg,
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 315deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 360deg
                    )`
        },
        children: [
          /* @__PURE__ */ jsx("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsx(
            "div",
            {
              className: `${isMobile ? "w-6 h-6" : "w-10 h-10"} rounded-full bg-black`
            }
          ) }),
          wheelSectors === "four" && /* @__PURE__ */ jsxs(Fragment, { children: [
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-1/4 left-1/2 transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold`,
                children: ((_c2 = (_b2 = campaignData.prizes) == null ? void 0 : _b2[0]) == null ? void 0 : _c2.text) || "10% OFF"
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-1/2 left-3/4 transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold rotate-90`,
                children: ((_e2 = (_d2 = campaignData.prizes) == null ? void 0 : _d2[1]) == null ? void 0 : _e2.text) || "FREE SHIP"
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-3/4 left-1/2 transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold rotate-180`,
                children: ((_g2 = (_f2 = campaignData.prizes) == null ? void 0 : _f2[2]) == null ? void 0 : _g2.text) || "20% OFF"
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-1/2 left-1/4 transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold -rotate-90`,
                children: ((_i2 = (_h2 = campaignData.prizes) == null ? void 0 : _h2[3]) == null ? void 0 : _i2.text) || "NO LUCK"
              }
            )
          ] }),
          wheelSectors === "six" && /* @__PURE__ */ jsxs(Fragment, { children: [
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-[13%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold`,
                children: ((_k2 = (_j2 = campaignData.prizes) == null ? void 0 : _j2[0]) == null ? void 0 : _k2.text) || "10% OFF"
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-[30%] left-[80%] transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold rotate-60`,
                children: ((_m2 = (_l2 = campaignData.prizes) == null ? void 0 : _l2[1]) == null ? void 0 : _m2.text) || "FREE SHIP"
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-[70%] left-[80%] transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold rotate-120`,
                children: ((_o2 = (_n2 = campaignData.prizes) == null ? void 0 : _n2[2]) == null ? void 0 : _o2.text) || "15% OFF"
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-[87%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold rotate-180`,
                children: ((_q2 = (_p2 = campaignData.prizes) == null ? void 0 : _p2[3]) == null ? void 0 : _q2.text) || "20% OFF"
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-[70%] left-[20%] transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold -rotate-120`,
                children: ((_s2 = (_r3 = campaignData.prizes) == null ? void 0 : _r3[4]) == null ? void 0 : _s2.text) || "5% OFF"
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-[30%] left-[20%] transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold -rotate-60`,
                children: ((_u2 = (_t2 = campaignData.prizes) == null ? void 0 : _t2[5]) == null ? void 0 : _u2.text) || "NO LUCK"
              }
            )
          ] }),
          wheelSectors === "eight" && /* @__PURE__ */ jsxs(Fragment, { children: [
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-[10%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold`,
                children: ((_w2 = (_v2 = campaignData.prizes) == null ? void 0 : _v2[0]) == null ? void 0 : _w2.text) || "10% OFF"
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-[25%] left-[85%] transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold rotate-45`,
                children: ((_y2 = (_x2 = campaignData.prizes) == null ? void 0 : _x2[1]) == null ? void 0 : _y2.text) || "FREE SHIP"
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-1/2 left-[90%] transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold rotate-90`,
                children: ((_A2 = (_z2 = campaignData.prizes) == null ? void 0 : _z2[2]) == null ? void 0 : _A2.text) || "15% OFF"
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-[75%] left-[85%] transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold rotate-135`,
                children: ((_C2 = (_B2 = campaignData.prizes) == null ? void 0 : _B2[3]) == null ? void 0 : _C2.text) || "BOGO"
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-[90%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold rotate-180`,
                children: ((_E2 = (_D2 = campaignData.prizes) == null ? void 0 : _D2[4]) == null ? void 0 : _E2.text) || "20% OFF"
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-[75%] left-[15%] transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold -rotate-135`,
                children: ((_G2 = (_F2 = campaignData.prizes) == null ? void 0 : _F2[5]) == null ? void 0 : _G2.text) || "5% OFF"
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-1/2 left-[10%] transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold -rotate-90`,
                children: ((_I2 = (_H2 = campaignData.prizes) == null ? void 0 : _H2[6]) == null ? void 0 : _I2.text) || "GIFT"
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                className: `absolute top-[25%] left-[15%] transform -translate-x-1/2 -translate-y-1/2 ${textSizeClass} font-bold -rotate-45`,
                children: ((_K2 = (_J2 = campaignData.prizes) == null ? void 0 : _J2[7]) == null ? void 0 : _K2.text) || "NO LUCK"
              }
            )
          ] })
        ]
      }
    ) });
  };
  const renderFloatingButton = (isMobile = false) => {
    var _a3, _b2, _c2, _d2, _e2, _f2;
    if (!((_a3 = campaignData.layout) == null ? void 0 : _a3.showFloatingButton)) return null;
    return /* @__PURE__ */ jsx(
      "div",
      {
        className: `absolute ${((_b2 = campaignData.layout) == null ? void 0 : _b2.floatingButtonPosition) === "bottomLeft" ? "bottom-4 left-4" : ((_c2 = campaignData.layout) == null ? void 0 : _c2.floatingButtonPosition) === "bottomRight" ? "bottom-4 right-4" : ((_d2 = campaignData.layout) == null ? void 0 : _d2.floatingButtonPosition) === "topRight" ? "top-4 right-4" : "bottom-4 left-1/2 transform -translate-x-1/2"}`,
        children: ((_e2 = campaignData.layout) == null ? void 0 : _e2.floatingButtonHasText) ? /* @__PURE__ */ jsxs(
          "div",
          {
            className: `flex items-center ${isMobile ? "px-3 py-1 text-xs" : "px-4 py-2"} rounded-full text-white`,
            style: { backgroundColor: campaignData.primaryColor },
            children: [
              /* @__PURE__ */ jsx(
                "div",
                {
                  className: `${isMobile ? "w-6 h-6" : "w-8 h-8"} bg-white rounded-full flex items-center justify-center ${isMobile ? "mr-1" : "mr-2"}`,
                  children: /* @__PURE__ */ jsxs(
                    "svg",
                    {
                      xmlns: "http://www.w3.org/2000/svg",
                      className: `${isMobile ? "h-4 w-4" : "h-5 w-5"}`,
                      viewBox: "0 0 20 20",
                      fill: campaignData.primaryColor,
                      children: [
                        /* @__PURE__ */ jsx(
                          "path",
                          {
                            fillRule: "evenodd",
                            d: "M5 5a3 3 0 015-2.236A3 3 0 0114.83 6H16a2 2 0 110 4h-5V9a1 1 0 10-2 0v1H4a2 2 0 110-4h1.17C5.06 5.687 5 5.35 5 5zm4 1V5a1 1 0 10-1 1h1zm3 0a1 1 0 10-1-1v1h1z",
                            clipRule: "evenodd"
                          }
                        ),
                        /* @__PURE__ */ jsx("path", { d: "M9 11H3v5a2 2 0 002 2h4v-7zM11 18h4a2 2 0 002-2v-5h-6v7z" })
                      ]
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsx("span", { className: "font-bold", children: ((_f2 = campaignData.layout) == null ? void 0 : _f2.floatingButtonText) || "SPIN & WIN" })
            ]
          }
        ) : /* @__PURE__ */ jsx(
          "div",
          {
            className: `${isMobile ? "w-10 h-10" : "w-12 h-12"} rounded-full flex items-center justify-center`,
            style: { backgroundColor: campaignData.primaryColor },
            children: /* @__PURE__ */ jsxs(
              "svg",
              {
                xmlns: "http://www.w3.org/2000/svg",
                className: `${isMobile ? "h-5 w-5" : "h-6 w-6"} text-white`,
                viewBox: "0 0 20 20",
                fill: "currentColor",
                children: [
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      fillRule: "evenodd",
                      d: "M5 5a3 3 0 015-2.236A3 3 0 0114.83 6H16a2 2 0 110 4h-5V9a1 1 0 10-2 0v1H4a2 2 0 110-4h1.17C5.06 5.687 5 5.35 5 5zm4 1V5a1 1 0 10-1 1h1zm3 0a1 1 0 10-1-1v1h1z",
                      clipRule: "evenodd"
                    }
                  ),
                  /* @__PURE__ */ jsx("path", { d: "M9 11H3v5a2 2 0 002 2h4v-7zM11 18h4a2 2 0 002-2v-5h-6v7z" })
                ]
              }
            )
          }
        )
      }
    );
  };
  useEffect(() => {
    return () => {
      saveRulesToContext();
    };
  }, []);
  return /* @__PURE__ */ jsxs("div", { className: "flex flex-col lg:flex-row gap-8", children: [
    /* @__PURE__ */ jsx("div", { className: "hidden lg:block lg:w-1/5", children: /* @__PURE__ */ jsx("div", { className: "bg-indigo-600 text-white rounded-lg p-6 h-full top-4", children: /* @__PURE__ */ jsx(
      StepSidebar,
      {
        activeStep: 4,
        onStepClick: (step) => {
          if (step !== 4) {
            saveRulesToContext();
            if (step > campaignData.step) {
              if (step <= campaignData.step + 1) {
                updateCampaignData({ step });
              }
            } else {
              updateCampaignData({ step });
            }
          }
        }
      }
    ) }) }),
    /* @__PURE__ */ jsx("div", { className: "w-full lg:w-2/5", children: /* @__PURE__ */ jsx("div", { className: "bg-white rounded-lg shadow-sm", children: /* @__PURE__ */ jsxs("div", { className: "p-6", children: [
      /* @__PURE__ */ jsxs("h2", { className: "flex items-center text-xl font-semibold mb-6 text-indigo-700", children: [
        /* @__PURE__ */ jsx(
          "svg",
          {
            xmlns: "http://www.w3.org/2000/svg",
            className: "h-6 w-6 mr-2",
            fill: "none",
            viewBox: "0 0 24 24",
            stroke: "currentColor",
            children: /* @__PURE__ */ jsx(
              "path",
              {
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 2,
                d: "M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
              }
            )
          }
        ),
        "Define your campaign rules!"
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "mb-8", children: [
        /* @__PURE__ */ jsx("h3", { className: "font-medium mb-2 text-gray-700", children: "APPEARING RULES" }),
        /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-500 mb-4", children: "You can pick more than one." }),
        /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [
          /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 p-4 rounded-lg relative", children: [
            /* @__PURE__ */ jsx("div", { className: "absolute top-2 right-2", children: /* @__PURE__ */ jsxs("label", { className: "inline-flex items-center cursor-pointer", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  className: "sr-only peer",
                  checked: appearingRules.exitIntent.enabled,
                  onChange: () => toggleAppearingRule("exitIntent")
                }
              ),
              /* @__PURE__ */ jsx("div", { className: "relative w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
            ] }) }),
            /* @__PURE__ */ jsxs("div", { className: "flex flex-col items-center justify-center h-full", children: [
              /* @__PURE__ */ jsx("div", { className: "w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mb-2", children: /* @__PURE__ */ jsx(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  className: "h-6 w-6 text-indigo-600",
                  fill: "none",
                  viewBox: "0 0 24 24",
                  stroke: "currentColor",
                  children: /* @__PURE__ */ jsx(
                    "path",
                    {
                      strokeLinecap: "round",
                      strokeLinejoin: "round",
                      strokeWidth: 2,
                      d: "M11 17l-5-5m0 0l5-5m-5 5h12"
                    }
                  )
                }
              ) }),
              /* @__PURE__ */ jsx("h4", { className: "font-medium text-center mb-1", children: "Exit Intent" }),
              /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-500 text-center", children: "Show when a visitor is about to leave the page" })
            ] })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 p-4 rounded-lg relative", children: [
            /* @__PURE__ */ jsx("div", { className: "absolute top-2 right-2", children: /* @__PURE__ */ jsxs("label", { className: "inline-flex items-center cursor-pointer", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  className: "sr-only peer",
                  checked: appearingRules.timeDelay.enabled,
                  onChange: () => toggleAppearingRule("timeDelay")
                }
              ),
              /* @__PURE__ */ jsx("div", { className: "relative w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
            ] }) }),
            /* @__PURE__ */ jsxs("div", { className: "flex flex-col items-center justify-center h-full", children: [
              /* @__PURE__ */ jsx("div", { className: "w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mb-2", children: /* @__PURE__ */ jsx(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  className: "h-6 w-6 text-indigo-600",
                  fill: "none",
                  viewBox: "0 0 24 24",
                  stroke: "currentColor",
                  children: /* @__PURE__ */ jsx(
                    "path",
                    {
                      strokeLinecap: "round",
                      strokeLinejoin: "round",
                      strokeWidth: 2,
                      d: "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                    }
                  )
                }
              ) }),
              /* @__PURE__ */ jsx("h4", { className: "font-medium text-center mb-1", children: "Time Delay" }),
              /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-500 text-center mb-2", children: "After" }),
              appearingRules.timeDelay.enabled && /* @__PURE__ */ jsxs("div", { className: "bg-indigo-200 rounded px-3 py-1 text-center w-full", children: [
                /* @__PURE__ */ jsx(
                  "input",
                  {
                    type: "number",
                    className: "w-8 bg-transparent text-center focus:outline-none",
                    value: appearingRules.timeDelay.seconds,
                    onChange: (e) => updateAppearingRuleValue(
                      "timeDelay",
                      "seconds",
                      Number.parseInt(e.target.value) || 5
                    ),
                    min: "1"
                  }
                ),
                /* @__PURE__ */ jsx("span", { className: "text-sm ml-1", children: "sec" })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 p-4 rounded-lg relative", children: [
            /* @__PURE__ */ jsx("div", { className: "absolute top-2 right-2", children: /* @__PURE__ */ jsxs("label", { className: "inline-flex items-center cursor-pointer", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  className: "sr-only peer",
                  checked: appearingRules.pageScroll.enabled,
                  onChange: () => toggleAppearingRule("pageScroll")
                }
              ),
              /* @__PURE__ */ jsx("div", { className: "relative w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
            ] }) }),
            /* @__PURE__ */ jsxs("div", { className: "flex flex-col items-center justify-center h-full", children: [
              /* @__PURE__ */ jsx("div", { className: "w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mb-2", children: /* @__PURE__ */ jsx(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  className: "h-6 w-6 text-indigo-600",
                  fill: "none",
                  viewBox: "0 0 24 24",
                  stroke: "currentColor",
                  children: /* @__PURE__ */ jsx(
                    "path",
                    {
                      strokeLinecap: "round",
                      strokeLinejoin: "round",
                      strokeWidth: 2,
                      d: "M19 14l-7 7m0 0l-7-7m7 7V3"
                    }
                  )
                }
              ) }),
              /* @__PURE__ */ jsx("h4", { className: "font-medium text-center mb-1", children: "Page Scroll" }),
              /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-500 text-center mb-2", children: "After" }),
              appearingRules.pageScroll.enabled && /* @__PURE__ */ jsxs("div", { className: "bg-indigo-200 rounded px-3 py-1 text-center w-full", children: [
                /* @__PURE__ */ jsx(
                  "input",
                  {
                    type: "number",
                    className: "w-8 bg-transparent text-center focus:outline-none",
                    value: appearingRules.pageScroll.percentage,
                    onChange: (e) => updateAppearingRuleValue(
                      "pageScroll",
                      "percentage",
                      Number.parseInt(e.target.value) || 20
                    ),
                    min: "1",
                    max: "100"
                  }
                ),
                /* @__PURE__ */ jsx("span", { className: "text-sm ml-1", children: "% of page" })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 p-4 rounded-lg relative", children: [
            /* @__PURE__ */ jsx("div", { className: "absolute top-2 right-2", children: /* @__PURE__ */ jsxs("label", { className: "inline-flex items-center cursor-pointer", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  className: "sr-only peer",
                  checked: appearingRules.pageCount.enabled,
                  onChange: () => toggleAppearingRule("pageCount")
                }
              ),
              /* @__PURE__ */ jsx("div", { className: "relative w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
            ] }) }),
            /* @__PURE__ */ jsxs("div", { className: "flex flex-col items-center justify-center h-full", children: [
              /* @__PURE__ */ jsx("div", { className: "w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mb-2", children: /* @__PURE__ */ jsx(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  className: "h-6 w-6 text-indigo-600",
                  fill: "none",
                  viewBox: "0 0 24 24",
                  stroke: "currentColor",
                  children: /* @__PURE__ */ jsx(
                    "path",
                    {
                      strokeLinecap: "round",
                      strokeLinejoin: "round",
                      strokeWidth: 2,
                      d: "M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2"
                    }
                  )
                }
              ) }),
              /* @__PURE__ */ jsx("h4", { className: "font-medium text-center mb-1", children: "Page Count" }),
              /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-500 text-center mb-2", children: "After" }),
              appearingRules.pageCount.enabled && /* @__PURE__ */ jsxs("div", { className: "bg-indigo-200 rounded px-3 py-1 text-center w-full", children: [
                /* @__PURE__ */ jsx(
                  "input",
                  {
                    type: "number",
                    className: "w-8 bg-transparent text-center focus:outline-none",
                    value: appearingRules.pageCount.pages,
                    onChange: (e) => updateAppearingRuleValue(
                      "pageCount",
                      "pages",
                      Number.parseInt(e.target.value) || 2
                    ),
                    min: "1"
                  }
                ),
                /* @__PURE__ */ jsx("span", { className: "text-sm ml-1", children: "Pages" })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 p-4 rounded-lg relative", children: [
            /* @__PURE__ */ jsx("div", { className: "absolute top-2 right-2", children: /* @__PURE__ */ jsxs("label", { className: "inline-flex items-center cursor-pointer", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  className: "sr-only peer",
                  checked: appearingRules.clicksCount.enabled,
                  onChange: () => toggleAppearingRule("clicksCount")
                }
              ),
              /* @__PURE__ */ jsx("div", { className: "relative w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
            ] }) }),
            /* @__PURE__ */ jsxs("div", { className: "flex flex-col items-center justify-center h-full", children: [
              /* @__PURE__ */ jsx("div", { className: "w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mb-2", children: /* @__PURE__ */ jsx(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  className: "h-6 w-6 text-indigo-600",
                  fill: "none",
                  viewBox: "0 0 24 24",
                  stroke: "currentColor",
                  children: /* @__PURE__ */ jsx(
                    "path",
                    {
                      strokeLinecap: "round",
                      strokeLinejoin: "round",
                      strokeWidth: 2,
                      d: "M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122"
                    }
                  )
                }
              ) }),
              /* @__PURE__ */ jsx("h4", { className: "font-medium text-center mb-1", children: "Clicks Count" }),
              /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-500 text-center mb-2", children: "After" }),
              appearingRules.clicksCount.enabled && /* @__PURE__ */ jsxs("div", { className: "bg-indigo-200 rounded px-3 py-1 text-center w-full", children: [
                /* @__PURE__ */ jsx(
                  "input",
                  {
                    type: "number",
                    className: "w-8 bg-transparent text-center focus:outline-none",
                    value: appearingRules.clicksCount.clicks,
                    onChange: (e) => updateAppearingRuleValue(
                      "clicksCount",
                      "clicks",
                      Number.parseInt(e.target.value) || 2
                    ),
                    min: "1"
                  }
                ),
                /* @__PURE__ */ jsx("span", { className: "text-sm ml-1", children: "Clicks" })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 p-4 rounded-lg relative", children: [
            /* @__PURE__ */ jsx("div", { className: "absolute top-2 right-2", children: /* @__PURE__ */ jsxs("label", { className: "inline-flex items-center cursor-pointer", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  className: "sr-only peer",
                  checked: appearingRules.inactivity.enabled,
                  onChange: () => toggleAppearingRule("inactivity")
                }
              ),
              /* @__PURE__ */ jsx("div", { className: "relative w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
            ] }) }),
            /* @__PURE__ */ jsxs("div", { className: "flex flex-col items-center justify-center h-full", children: [
              /* @__PURE__ */ jsx("div", { className: "w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mb-2", children: /* @__PURE__ */ jsx(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  className: "h-6 w-6 text-indigo-600",
                  fill: "none",
                  viewBox: "0 0 24 24",
                  stroke: "currentColor",
                  children: /* @__PURE__ */ jsx(
                    "path",
                    {
                      strokeLinecap: "round",
                      strokeLinejoin: "round",
                      strokeWidth: 2,
                      d: "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                    }
                  )
                }
              ) }),
              /* @__PURE__ */ jsx("h4", { className: "font-medium text-center mb-1", children: "Inactivity" }),
              /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-500 text-center mb-2", children: "After" }),
              appearingRules.inactivity.enabled && /* @__PURE__ */ jsxs("div", { className: "bg-indigo-200 rounded px-3 py-1 text-center w-full", children: [
                /* @__PURE__ */ jsx(
                  "input",
                  {
                    type: "number",
                    className: "w-8 bg-transparent text-center focus:outline-none",
                    value: appearingRules.inactivity.seconds,
                    onChange: (e) => updateAppearingRuleValue(
                      "inactivity",
                      "seconds",
                      Number.parseInt(e.target.value) || 30
                    ),
                    min: "1"
                  }
                ),
                /* @__PURE__ */ jsx("span", { className: "text-sm ml-1", children: "sec idle" })
              ] })
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "mb-8 border-t pt-6", children: [
        /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-2", children: [
          /* @__PURE__ */ jsx("h3", { className: "font-medium text-gray-700", children: "PAGE TARGETTING" }),
          /* @__PURE__ */ jsxs("label", { className: "inline-flex items-center cursor-pointer", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "checkbox",
                className: "sr-only peer",
                checked: pageTargeting.enabled,
                onChange: togglePageTargeting
              }
            ),
            /* @__PURE__ */ jsx("div", { className: "relative w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
          ] })
        ] }),
        /* @__PURE__ */ jsxs("p", { className: "text-sm text-gray-500 mb-4", children: [
          "When OFF: Shows on home page of",
          " ",
          /* @__PURE__ */ jsx("span", { className: "font-medium", children: pageTargeting.url })
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "mb-4", children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700 mb-1", children: "Page URL" }),
          /* @__PURE__ */ jsxs("div", { className: "flex", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "text",
                className: "flex-1 p-2 border rounded-l-md focus:outline-none focus:ring-2 focus:ring-indigo-500",
                placeholder: "Enter URL",
                disabled: !pageTargeting.enabled,
                value: newPageUrl,
                onChange: (e) => setNewPageUrl(e.target.value)
              }
            ),
            /* @__PURE__ */ jsx(
              "button",
              {
                className: "bg-indigo-600 text-white px-3 py-2 rounded-r-md hover:bg-indigo-700 transition-colors",
                disabled: !pageTargeting.enabled,
                onClick: addPageTargetingUrl,
                children: /* @__PURE__ */ jsx(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    className: "h-5 w-5",
                    viewBox: "0 0 20 20",
                    fill: "currentColor",
                    children: /* @__PURE__ */ jsx(
                      "path",
                      {
                        fillRule: "evenodd",
                        d: "M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z",
                        clipRule: "evenodd"
                      }
                    )
                  }
                )
              }
            )
          ] })
        ] }),
        pageTargeting.enabled && pageTargeting.urls.length > 0 && /* @__PURE__ */ jsxs("div", { className: "mt-2", children: [
          /* @__PURE__ */ jsx("p", { className: "text-sm font-medium text-gray-700 mb-2", children: "Added URLs:" }),
          /* @__PURE__ */ jsx("div", { className: "flex flex-wrap gap-2", children: pageTargeting.urls.map((url, index) => /* @__PURE__ */ jsxs(
            "div",
            {
              className: "bg-gray-100 px-3 py-1 rounded-full flex items-center",
              children: [
                /* @__PURE__ */ jsx("span", { className: "text-sm text-gray-700 mr-1", children: url }),
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    className: "text-gray-500 hover:text-red-500",
                    onClick: () => removePageTargetingUrl(url),
                    children: /* @__PURE__ */ jsx(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        className: "h-4 w-4",
                        viewBox: "0 0 20 20",
                        fill: "currentColor",
                        children: /* @__PURE__ */ jsx(
                          "path",
                          {
                            fillRule: "evenodd",
                            d: "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z",
                            clipRule: "evenodd"
                          }
                        )
                      }
                    )
                  }
                )
              ]
            },
            index
          )) })
        ] })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "mb-8 border-t pt-6", children: [
        /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-2", children: [
          /* @__PURE__ */ jsx("h3", { className: "font-medium text-gray-700", children: "SHOW POP-UP AGAIN AFTER A WHILE" }),
          /* @__PURE__ */ jsxs("label", { className: "inline-flex items-center cursor-pointer", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "checkbox",
                className: "sr-only peer",
                checked: popupAgain.enabled,
                onChange: togglePopupAgain
              }
            ),
            /* @__PURE__ */ jsx("div", { className: "relative w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
          ] })
        ] }),
        /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-500 mb-4", children: "When OFF: The pop-up will not reappear once the user closes it." }),
        popupAgain.enabled && /* @__PURE__ */ jsxs("div", { className: "mb-4", children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Timer" }),
          /* @__PURE__ */ jsxs("div", { className: "flex items-center space-x-2", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "number",
                className: "w-16 p-2 border rounded-md text-center",
                value: popupAgain.timer.minutes,
                onChange: (e) => updatePopupTimer("minutes", e.target.value),
                min: "0",
                max: "59"
              }
            ),
            /* @__PURE__ */ jsx("span", { className: "text-gray-500", children: ":" }),
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "number",
                className: "w-16 p-2 border rounded-md text-center",
                value: popupAgain.timer.seconds,
                onChange: (e) => updatePopupTimer("seconds", e.target.value),
                min: "0",
                max: "59"
              }
            )
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "flex mt-1", children: [
            /* @__PURE__ */ jsx("div", { className: "w-16 text-xs text-gray-500 text-center", children: "Minutes" }),
            /* @__PURE__ */ jsx("div", { className: "w-4" }),
            /* @__PURE__ */ jsx("div", { className: "w-16 text-xs text-gray-500 text-center", children: "Seconds" })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "border-t pt-6", children: [
        /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-2", children: [
          /* @__PURE__ */ jsx("h3", { className: "font-medium text-gray-700", children: "DISPLAY FREQUENCY" }),
          /* @__PURE__ */ jsxs("label", { className: "inline-flex items-center cursor-pointer", children: [
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "checkbox",
                className: "sr-only peer",
                checked: displayFrequency.enabled,
                onChange: toggleDisplayFrequency
              }
            ),
            /* @__PURE__ */ jsx("div", { className: "relative w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-indigo-600" })
          ] })
        ] }),
        /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-500 mb-4", children: "When OFF: once a day for each visitor" }),
        displayFrequency.enabled && /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-3 gap-4 mb-4", children: [
            /* @__PURE__ */ jsxs(
              "div",
              {
                className: `bg-gray-100 p-4 rounded-lg flex flex-col items-center justify-center cursor-pointer ${displayFrequency.visitorType === "everyone" ? "ring-2 ring-indigo-500" : ""}`,
                onClick: () => updateVisitorType("everyone"),
                children: [
                  /* @__PURE__ */ jsxs("div", { className: "w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mb-2 relative", children: [
                    /* @__PURE__ */ jsx(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        className: "h-6 w-6 text-indigo-600",
                        fill: "none",
                        viewBox: "0 0 24 24",
                        stroke: "currentColor",
                        children: /* @__PURE__ */ jsx(
                          "path",
                          {
                            strokeLinecap: "round",
                            strokeLinejoin: "round",
                            strokeWidth: 2,
                            d: "M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"
                          }
                        )
                      }
                    ),
                    displayFrequency.visitorType === "everyone" && /* @__PURE__ */ jsx("div", { className: "absolute -top-1 -right-1 bg-indigo-600 rounded-full w-5 h-5 flex items-center justify-center", children: /* @__PURE__ */ jsx(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        className: "h-3 w-3 text-white",
                        viewBox: "0 0 20 20",
                        fill: "currentColor",
                        children: /* @__PURE__ */ jsx(
                          "path",
                          {
                            fillRule: "evenodd",
                            d: "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z",
                            clipRule: "evenodd"
                          }
                        )
                      }
                    ) })
                  ] }),
                  /* @__PURE__ */ jsx("span", { className: "text-sm font-medium", children: "Everyone" })
                ]
              }
            ),
            /* @__PURE__ */ jsxs(
              "div",
              {
                className: `bg-gray-100 p-4 rounded-lg flex flex-col items-center justify-center cursor-pointer ${displayFrequency.visitorType === "new" ? "ring-2 ring-indigo-500" : ""}`,
                onClick: () => updateVisitorType("new"),
                children: [
                  /* @__PURE__ */ jsxs("div", { className: "w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mb-2 relative", children: [
                    /* @__PURE__ */ jsx(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        className: "h-6 w-6 text-indigo-600",
                        fill: "none",
                        viewBox: "0 0 24 24",
                        stroke: "currentColor",
                        children: /* @__PURE__ */ jsx(
                          "path",
                          {
                            strokeLinecap: "round",
                            strokeLinejoin: "round",
                            strokeWidth: 2,
                            d: "M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                          }
                        )
                      }
                    ),
                    displayFrequency.visitorType === "new" && /* @__PURE__ */ jsx("div", { className: "absolute -top-1 -right-1 bg-indigo-600 rounded-full w-5 h-5 flex items-center justify-center", children: /* @__PURE__ */ jsx(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        className: "h-3 w-3 text-white",
                        viewBox: "0 0 20 20",
                        fill: "currentColor",
                        children: /* @__PURE__ */ jsx(
                          "path",
                          {
                            fillRule: "evenodd",
                            d: "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z",
                            clipRule: "evenodd"
                          }
                        )
                      }
                    ) })
                  ] }),
                  /* @__PURE__ */ jsx("span", { className: "text-sm font-medium", children: "New" })
                ]
              }
            ),
            /* @__PURE__ */ jsxs(
              "div",
              {
                className: `bg-gray-100 p-4 rounded-lg flex flex-col items-center justify-center cursor-pointer ${displayFrequency.visitorType === "return" ? "ring-2 ring-indigo-500" : ""}`,
                onClick: () => updateVisitorType("return"),
                children: [
                  /* @__PURE__ */ jsxs("div", { className: "w-12 h-12 bg-indigo-100 rounded-full flex items-center justify-center mb-2 relative", children: [
                    /* @__PURE__ */ jsx(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        className: "h-6 w-6 text-indigo-600",
                        fill: "none",
                        viewBox: "0 0 24 24",
                        stroke: "currentColor",
                        children: /* @__PURE__ */ jsx(
                          "path",
                          {
                            strokeLinecap: "round",
                            strokeLinejoin: "round",
                            strokeWidth: 2,
                            d: "M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6"
                          }
                        )
                      }
                    ),
                    displayFrequency.visitorType === "return" && /* @__PURE__ */ jsx("div", { className: "absolute -top-1 -right-1 bg-indigo-600 rounded-full w-5 h-5 flex items-center justify-center", children: /* @__PURE__ */ jsx(
                      "svg",
                      {
                        xmlns: "http://www.w3.org/2000/svg",
                        className: "h-3 w-3 text-white",
                        viewBox: "0 0 20 20",
                        fill: "currentColor",
                        children: /* @__PURE__ */ jsx(
                          "path",
                          {
                            fillRule: "evenodd",
                            d: "M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z",
                            clipRule: "evenodd"
                          }
                        )
                      }
                    ) })
                  ] }),
                  /* @__PURE__ */ jsx("span", { className: "text-sm font-medium", children: "Return" })
                ]
              }
            )
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "mb-4", children: [
            /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Show to visitors" }),
            /* @__PURE__ */ jsxs("div", { className: "relative", children: [
              /* @__PURE__ */ jsxs(
                "select",
                {
                  className: "block w-full p-2 border rounded-md appearance-none focus:outline-none focus:ring-2 focus:ring-indigo-500 pr-10",
                  value: displayFrequency.frequency,
                  onChange: (e) => updateDisplayFrequency(e.target.value),
                  children: [
                    /* @__PURE__ */ jsx("option", { value: "once_a_day", children: "Once a day" }),
                    /* @__PURE__ */ jsx("option", { value: "every_visit", children: "Every visit" }),
                    /* @__PURE__ */ jsx("option", { value: "once_every_2_days", children: "Once every 2 days" }),
                    /* @__PURE__ */ jsx("option", { value: "once_every_few_visits", children: "Once every few visits" }),
                    /* @__PURE__ */ jsx("option", { value: "all_pages_all_time", children: "All pages all the time" })
                  ]
                }
              ),
              /* @__PURE__ */ jsx("div", { className: "absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none", children: /* @__PURE__ */ jsx(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  className: "h-5 w-5 text-gray-400",
                  viewBox: "0 0 20 20",
                  fill: "currentColor",
                  children: /* @__PURE__ */ jsx(
                    "path",
                    {
                      fillRule: "evenodd",
                      d: "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z",
                      clipRule: "evenodd"
                    }
                  )
                }
              ) })
            ] })
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsx("div", { className: "mt-8 flex justify-end", children: /* @__PURE__ */ jsx(
        "button",
        {
          onClick: handleFinish,
          className: "px-6 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors",
          children: "Finish"
        }
      ) })
    ] }) }) }),
    /* @__PURE__ */ jsx("div", { className: "w-full lg:w-2/5", children: /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 p-4 rounded-lg sticky top-4", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-4", children: [
        /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-full overflow-hidden flex border border-indigo-600 p-1", children: [
          /* @__PURE__ */ jsxs(
            "button",
            {
              className: `px-4 py-2 rounded-full flex items-center ${previewDevice === "mobile" ? "bg-indigo-600 text-white" : "text-indigo-600"}`,
              onClick: () => setPreviewDevice("mobile"),
              children: [
                /* @__PURE__ */ jsx(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    className: "h-5 w-5 inline-block mr-1",
                    viewBox: "0 0 20 20",
                    fill: "currentColor",
                    children: /* @__PURE__ */ jsx(
                      "path",
                      {
                        fillRule: "evenodd",
                        d: "M7 2a2 2 0 00-2 2v12a2 2 0 002 2h6a2 2 0 002-2V4a2 2 0 00-2-2H7zm3 14a1 1 0 100-2 1 1 0 000 2z",
                        clipRule: "evenodd"
                      }
                    )
                  }
                ),
                "Mobile"
              ]
            }
          ),
          /* @__PURE__ */ jsxs(
            "button",
            {
              className: `px-4 py-2 rounded-full flex items-center ${previewDevice === "desktop" ? "bg-indigo-600 text-white" : "text-indigo-600"}`,
              onClick: () => setPreviewDevice("desktop"),
              children: [
                /* @__PURE__ */ jsx(
                  "svg",
                  {
                    xmlns: "http://www.w3.org/2000/svg",
                    className: "h-5 w-5 inline-block mr-1",
                    viewBox: "0 0 20 20",
                    fill: "currentColor",
                    children: /* @__PURE__ */ jsx(
                      "path",
                      {
                        fillRule: "evenodd",
                        d: "M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z",
                        clipRule: "evenodd"
                      }
                    )
                  }
                ),
                "Desktop"
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsxs("button", { className: "text-indigo-600 flex items-center font-medium", children: [
          /* @__PURE__ */ jsxs(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-5 w-5 mr-1",
              viewBox: "0 0 20 20",
              fill: "currentColor",
              children: [
                /* @__PURE__ */ jsx("path", { d: "M10 12a2 2 0 100-4 2 2 0 000 4z" }),
                /* @__PURE__ */ jsx(
                  "path",
                  {
                    fillRule: "evenodd",
                    d: "M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z",
                    clipRule: "evenodd"
                  }
                )
              ]
            }
          ),
          "Preview"
        ] })
      ] }),
      /* @__PURE__ */ jsx("div", { className: "w-full h-full relative bg-gray-700 flex items-center justify-center", children: previewDevice === "desktop" ? /* @__PURE__ */ jsxs("div", { className: "w-full h-full rounded-lg overflow-hidden", children: [
        activePreviewTab === "landing" && /* @__PURE__ */ jsx("div", { className: "bg-gray-800 p-4 h-[400px] flex items-center justify-center", children: /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg shadow-lg w-full max-w-[800px] h-[320px] p-0 relative overflow-hidden", children: [
          /* @__PURE__ */ jsx("button", { className: "absolute top-3 right-3 text-gray-400 hover:text-gray-600 z-10", children: /* @__PURE__ */ jsx(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-5 w-5",
              viewBox: "0 0 20 20",
              fill: "currentColor",
              children: /* @__PURE__ */ jsx(
                "path",
                {
                  fillRule: "evenodd",
                  d: "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z",
                  clipRule: "evenodd"
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxs("div", { className: "flex h-full", children: [
            /* @__PURE__ */ jsxs("div", { className: "w-1/2 p-8 flex flex-col justify-center", children: [
              /* @__PURE__ */ jsx(
                "h2",
                {
                  className: "text-3xl font-bold mb-3",
                  style: { color: campaignData.primaryColor },
                  children: ((_f = (_e = campaignData.content) == null ? void 0 : _e.landing) == null ? void 0 : _f.title) || "GO AHEAD GIVE IT A SPIN!"
                }
              ),
              ((_h = (_g = campaignData.content) == null ? void 0 : _g.landing) == null ? void 0 : _h.showSubtitle) && /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-600 mb-5", children: ((_j = (_i = campaignData.content) == null ? void 0 : _i.landing) == null ? void 0 : _j.subtitle) || "This is a demo of our Spin to Win displays" }),
              ((_l = (_k = campaignData.content) == null ? void 0 : _k.landing) == null ? void 0 : _l.showPrivacyPolicy) && /* @__PURE__ */ jsxs("div", { className: "flex items-center mb-4", children: [
                /* @__PURE__ */ jsx(
                  "input",
                  {
                    type: "checkbox",
                    id: "preview-privacy",
                    className: "mr-2",
                    checked: true,
                    readOnly: true
                  }
                ),
                /* @__PURE__ */ jsx(
                  "label",
                  {
                    htmlFor: "preview-privacy",
                    className: "text-xs text-gray-600",
                    children: ((_n = (_m = campaignData.content) == null ? void 0 : _m.landing) == null ? void 0 : _n.privacyPolicyText) || "I accept the T&C and Privacy Notice."
                  }
                )
              ] }),
              ((_p = (_o = campaignData.content) == null ? void 0 : _o.landing) == null ? void 0 : _p.showEmail) && /* @__PURE__ */ jsx(
                "input",
                {
                  type: "email",
                  placeholder: ((_r2 = (_q = campaignData.content) == null ? void 0 : _q.landing) == null ? void 0 : _r2.emailPlaceholder) || "Enter your email",
                  className: "w-full p-3 border rounded-md mb-4 text-center"
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: "w-full py-3 font-bold text-white rounded-md text-lg",
                  style: {
                    backgroundColor: campaignData.primaryColor
                  },
                  children: ((_t = (_s = campaignData.content) == null ? void 0 : _s.landing) == null ? void 0 : _t.buttonText) || "SPIN NOW"
                }
              ),
              ((_v = (_u = campaignData.content) == null ? void 0 : _u.landing) == null ? void 0 : _v.showTerms) && /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-500 mt-3 text-center", children: ((_x = (_w = campaignData.content) == null ? void 0 : _w.landing) == null ? void 0 : _x.termsText) || "I accept the T&C$" })
            ] }),
            /* @__PURE__ */ jsx("div", { className: "w-1/2 bg-gray-50 flex items-center justify-center relative", children: renderWheel("w-[280px] h-[280px]") })
          ] })
        ] }) }),
        activePreviewTab === "result" && /* @__PURE__ */ jsx("div", { className: "bg-gray-800 p-4 h-[400px] flex items-center justify-center", children: /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg shadow-lg w-full max-w-[800px] h-[320px] p-0 relative overflow-hidden", children: [
          /* @__PURE__ */ jsx("button", { className: "absolute top-3 right-3 text-gray-400 hover:text-gray-600 z-10", children: /* @__PURE__ */ jsx(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-5 w-5",
              viewBox: "0 0 20 20",
              fill: "currentColor",
              children: /* @__PURE__ */ jsx(
                "path",
                {
                  fillRule: "evenodd",
                  d: "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z",
                  clipRule: "evenodd"
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsxs("div", { className: "flex h-full", children: [
            /* @__PURE__ */ jsxs("div", { className: "w-1/2 p-8 flex flex-col justify-center", children: [
              /* @__PURE__ */ jsx(
                "h2",
                {
                  className: "text-3xl font-bold mb-3",
                  style: { color: campaignData.primaryColor },
                  children: ((_y = campaignData.content) == null ? void 0 : _y.winTitle) || "CONGRATULATIONS!"
                }
              ),
              /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-600 mb-5", children: ((_z = campaignData.content) == null ? void 0 : _z.winMessage) || "You've won a 10% discount on your next purchase" }),
              /* @__PURE__ */ jsx(
                "div",
                {
                  className: "w-full p-4 mb-6 text-center font-bold text-lg border-2 border-dashed",
                  style: {
                    borderColor: campaignData.primaryColor,
                    color: campaignData.primaryColor
                  },
                  children: ((_A = campaignData.content) == null ? void 0 : _A.couponCode) || "WINNER10"
                }
              ),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: "w-full py-3 font-bold text-white rounded-md mb-4 text-lg",
                  style: {
                    backgroundColor: campaignData.primaryColor
                  },
                  children: ((_B = campaignData.content) == null ? void 0 : _B.copyButtonText) || "COPY CODE"
                }
              ),
              /* @__PURE__ */ jsx("button", { className: "w-full py-3 font-bold text-gray-800 bg-gray-200 rounded-md text-lg", children: ((_C = campaignData.content) == null ? void 0 : _C.shopButtonText) || "SHOP NOW" })
            ] }),
            /* @__PURE__ */ jsx("div", { className: "w-1/2 bg-gray-50 flex items-center justify-center relative", children: /* @__PURE__ */ jsx("div", { className: "w-48 h-48 rounded-full bg-green-100 flex items-center justify-center", children: /* @__PURE__ */ jsx(
              "svg",
              {
                xmlns: "http://www.w3.org/2000/svg",
                className: "h-24 w-24 text-green-500",
                fill: "none",
                viewBox: "0 0 24 24",
                stroke: "currentColor",
                children: /* @__PURE__ */ jsx(
                  "path",
                  {
                    strokeLinecap: "round",
                    strokeLinejoin: "round",
                    strokeWidth: 2,
                    d: "M5 13l4 4L19 7"
                  }
                )
              }
            ) }) })
          ] })
        ] }) }),
        activePreviewTab === "floating" && /* @__PURE__ */ jsxs("div", { className: "bg-gray-800 p-4 h-[400px] relative", children: [
          /* @__PURE__ */ jsxs("div", { className: "w-full h-full bg-gray-50 flex flex-col", children: [
            /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full mb-2" }),
            /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full mb-2" }),
            /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full mb-2" }),
            /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full mb-2" }),
            /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full mb-2" }),
            /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full mb-2" }),
            /* @__PURE__ */ jsx("div", { className: "border-b border-gray-300 w-full mb-2" })
          ] }),
          renderFloatingButton()
        ] })
      ] }) : (
        // Mobile view
        /* @__PURE__ */ jsxs("div", { className: "w-56 h-[480px] bg-gray-900 rounded-3xl p-2 relative", children: [
          /* @__PURE__ */ jsx("div", { className: "absolute top-4 left-1/2 transform -translate-x-1/2 w-20 h-4 bg-black rounded-full" }),
          /* @__PURE__ */ jsxs("div", { className: "w-full h-full bg-gray-800 rounded-2xl overflow-hidden", children: [
            activePreviewTab === "landing" && /* @__PURE__ */ jsxs("div", { className: "bg-white h-full p-4 flex flex-col items-center", children: [
              /* @__PURE__ */ jsxs("div", { className: "text-center w-full", children: [
                /* @__PURE__ */ jsx(
                  "h2",
                  {
                    className: "text-xl font-bold mb-2",
                    style: { color: campaignData.primaryColor },
                    children: ((_E = (_D = campaignData.content) == null ? void 0 : _D.landing) == null ? void 0 : _E.title) || "GO AHEAD GIVE IT A SPIN!"
                  }
                ),
                ((_G = (_F = campaignData.content) == null ? void 0 : _F.landing) == null ? void 0 : _G.showSubtitle) && /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-600 mb-3", children: ((_I = (_H = campaignData.content) == null ? void 0 : _H.landing) == null ? void 0 : _I.subtitle) || "This is a demo of our Spin to Win displays" }),
                ((_K = (_J = campaignData.content) == null ? void 0 : _J.landing) == null ? void 0 : _K.showPrivacyPolicy) && /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-center mb-3", children: [
                  /* @__PURE__ */ jsx(
                    "input",
                    {
                      type: "checkbox",
                      id: "preview-privacy-mobile",
                      className: "mr-1 h-3 w-3",
                      checked: true,
                      readOnly: true
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "label",
                    {
                      htmlFor: "preview-privacy-mobile",
                      className: "text-[10px] text-gray-600",
                      children: ((_M = (_L = campaignData.content) == null ? void 0 : _L.landing) == null ? void 0 : _M.privacyPolicyText) || "I accept the T&C and Privacy Notice."
                    }
                  )
                ] }),
                ((_O = (_N = campaignData.content) == null ? void 0 : _N.landing) == null ? void 0 : _O.showEmail) && /* @__PURE__ */ jsx(
                  "input",
                  {
                    type: "email",
                    placeholder: ((_Q = (_P = campaignData.content) == null ? void 0 : _P.landing) == null ? void 0 : _Q.emailPlaceholder) || "Enter your email",
                    className: "w-full p-2 text-xs border rounded-md mb-3 text-center"
                  }
                ),
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    className: "w-full py-2 text-sm font-bold text-white rounded-md",
                    style: { backgroundColor: campaignData.primaryColor },
                    children: ((_S = (_R = campaignData.content) == null ? void 0 : _R.landing) == null ? void 0 : _S.buttonText) || "SPIN NOW"
                  }
                ),
                ((_U = (_T = campaignData.content) == null ? void 0 : _T.landing) == null ? void 0 : _U.showTerms) && /* @__PURE__ */ jsx("p", { className: "text-[8px] text-gray-500 mt-2 text-center", children: ((_W = (_V = campaignData.content) == null ? void 0 : _V.landing) == null ? void 0 : _W.termsText) || "I accept the T&C$" })
              ] }),
              /* @__PURE__ */ jsx("div", { className: "mt-4", children: renderWheel("w-40 h-40", true) })
            ] }),
            activePreviewTab === "result" && /* @__PURE__ */ jsxs("div", { className: "bg-white h-full p-4 flex flex-col items-center", children: [
              /* @__PURE__ */ jsxs("div", { className: "text-center w-full", children: [
                /* @__PURE__ */ jsx(
                  "h2",
                  {
                    className: "text-xl font-bold mb-2",
                    style: { color: campaignData.primaryColor },
                    children: ((_X = campaignData.content) == null ? void 0 : _X.winTitle) || "CONGRATULATIONS!"
                  }
                ),
                /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-600 mb-3", children: ((_Y = campaignData.content) == null ? void 0 : _Y.winMessage) || "You've won a 10% discount on your next purchase" }),
                /* @__PURE__ */ jsx(
                  "div",
                  {
                    className: "w-full p-2 mb-3 text-center font-bold text-sm border-2 border-dashed",
                    style: {
                      borderColor: campaignData.primaryColor,
                      color: campaignData.primaryColor
                    },
                    children: ((_Z = campaignData.content) == null ? void 0 : _Z.couponCode) || "WINNER10"
                  }
                ),
                /* @__PURE__ */ jsx(
                  "button",
                  {
                    className: "w-full py-2 text-sm font-bold text-white rounded-md mb-2",
                    style: { backgroundColor: campaignData.primaryColor },
                    children: ((__ = campaignData.content) == null ? void 0 : __.copyButtonText) || "COPY CODE"
                  }
                ),
                /* @__PURE__ */ jsx("button", { className: "w-full py-2 text-sm font-bold text-gray-800 bg-gray-200 rounded-md", children: ((_$ = campaignData.content) == null ? void 0 : _$.shopButtonText) || "SHOP NOW" })
              ] }),
              /* @__PURE__ */ jsx("div", { className: "mt-4 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-24 h-24 rounded-full bg-green-100 flex items-center justify-center", children: /* @__PURE__ */ jsx(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  className: "h-12 w-12 text-green-500",
                  fill: "none",
                  viewBox: "0 0 24 24",
                  stroke: "currentColor",
                  children: /* @__PURE__ */ jsx(
                    "path",
                    {
                      strokeLinecap: "round",
                      strokeLinejoin: "round",
                      strokeWidth: 2,
                      d: "M5 13l4 4L19 7"
                    }
                  )
                }
              ) }) })
            ] }),
            activePreviewTab === "floating" && /* @__PURE__ */ jsx("div", { className: "bg-white h-full relative", children: renderFloatingButton(true) })
          ] })
        ] })
      ) }),
      /* @__PURE__ */ jsxs("div", { className: "flex justify-center mt-4 border-b", children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            className: `px-4 py-2 ${activePreviewTab === "landing" ? "border-b-2 border-indigo-600 text-indigo-600 font-medium" : "text-gray-500"}`,
            onClick: () => setActivePreviewTab("landing"),
            children: "Landing Screen"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: `px-4 py-2 ${activePreviewTab === "result" ? "border-b-2 border-indigo-600 text-indigo-600 font-medium" : "text-gray-500"}`,
            onClick: () => setActivePreviewTab("result"),
            children: "Result screen"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            className: `px-4 py-2 ${activePreviewTab === "floating" ? "border-b-2 border-indigo-600 text-indigo-600 font-medium" : "text-gray-500"}`,
            onClick: () => setActivePreviewTab("floating"),
            children: "Floating Button"
          }
        )
      ] }),
      /* @__PURE__ */ jsx("div", { className: "mt-4 flex justify-end", children: /* @__PURE__ */ jsx("div", { className: "bg-indigo-600 text-white rounded-full px-3 py-1 text-sm font-medium", children: "90%" }) })
    ] }) }),
    showLaunchModal && /* @__PURE__ */ jsx("div", { className: "fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg max-w-4xl w-full p-0 relative", children: [
      /* @__PURE__ */ jsx(
        "button",
        {
          onClick: () => setShowLaunchModal(false),
          className: "absolute top-4 right-4 z-10",
          children: /* @__PURE__ */ jsx(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-8 w-8 text-white",
              fill: "none",
              viewBox: "0 0 24 24",
              stroke: "currentColor",
              children: /* @__PURE__ */ jsx(
                "path",
                {
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 2,
                  d: "M6 18L18 6M6 6l12 12"
                }
              )
            }
          )
        }
      ),
      /* @__PURE__ */ jsxs("div", { className: "p-8 bg-indigo-900 text-white text-center", children: [
        /* @__PURE__ */ jsx("h2", { className: "text-4xl font-bold mb-2", children: "READY, SET, LAUNCH!" }),
        /* @__PURE__ */ jsx("p", { className: "text-xl", children: "Your campaign can now shine on your site." })
      ] }),
      /* @__PURE__ */ jsx("div", { className: "p-6", children: /* @__PURE__ */ jsx("div", { className: "bg-white rounded-lg shadow-lg w-full overflow-hidden", children: /* @__PURE__ */ jsxs("div", { className: "p-6", children: [
        /* @__PURE__ */ jsxs("div", { className: "text-center mb-4", children: [
          /* @__PURE__ */ jsx("div", { className: "w-16 h-16 mx-auto mb-2", children: campaignData.logo ? /* @__PURE__ */ jsx(
            "img",
            {
              src: campaignData.logo || "/placeholder.svg",
              alt: "Campaign Logo",
              className: "w-full h-full object-contain"
            }
          ) : /* @__PURE__ */ jsx(
            "div",
            {
              className: "w-full h-full rounded-full flex items-center justify-center",
              style: {
                backgroundColor: campaignData.primaryColor || "#ff5722"
              },
              children: /* @__PURE__ */ jsx(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  className: "h-8 w-8 text-white",
                  fill: "none",
                  viewBox: "0 0 24 24",
                  stroke: "currentColor",
                  children: /* @__PURE__ */ jsx(
                    "path",
                    {
                      strokeLinecap: "round",
                      strokeLinejoin: "round",
                      strokeWidth: 2,
                      d: "M13 10V3L4 14h7v7l9-11h-7z"
                    }
                  )
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsx(
            "h3",
            {
              className: "text-2xl font-bold",
              style: { color: campaignData.primaryColor || "#ff5722" },
              children: campaignData.name || "Swiggy"
            }
          ),
          /* @__PURE__ */ jsx(
            "h4",
            {
              className: "text-2xl font-bold mb-4",
              style: { color: campaignData.primaryColor || "#ff5722" },
              children: ((_ba = (_aa = campaignData.content) == null ? void 0 : _aa.landing) == null ? void 0 : _ba.title) || "SPIN TO WIN"
            }
          )
        ] }),
        /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-600 text-center mb-4", children: ((_da = (_ca = campaignData.content) == null ? void 0 : _ca.landing) == null ? void 0 : _da.subtitle) || "Before you go anywhere, enter your email address to spin the wheel for a chance to win a wicked awesome discount." }),
        /* @__PURE__ */ jsxs("div", { className: "flex flex-col md:flex-row gap-6", children: [
          /* @__PURE__ */ jsxs("div", { className: "w-full md:w-1/2", children: [
            ((_fa = (_ea = campaignData.content) == null ? void 0 : _ea.landing) == null ? void 0 : _fa.showPrivacyPolicy) !== false && /* @__PURE__ */ jsxs("div", { className: "flex items-center mb-2 w-full", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  id: "privacy-notice",
                  className: "mr-2",
                  checked: true,
                  readOnly: true
                }
              ),
              /* @__PURE__ */ jsx("label", { htmlFor: "privacy-notice", className: "text-xs", children: ((_ha = (_ga = campaignData.content) == null ? void 0 : _ga.landing) == null ? void 0 : _ha.privacyPolicyText) || "I accept the Privacy Notice." })
            ] }),
            ((_ja = (_ia = campaignData.content) == null ? void 0 : _ia.landing) == null ? void 0 : _ja.showTerms) !== false && /* @__PURE__ */ jsxs("div", { className: "flex items-center mb-4 w-full", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  id: "terms",
                  className: "mr-2",
                  checked: true,
                  readOnly: true
                }
              ),
              /* @__PURE__ */ jsx("label", { htmlFor: "terms", className: "text-xs", children: ((_la = (_ka = campaignData.content) == null ? void 0 : _ka.landing) == null ? void 0 : _la.termsText) || "I accept the Terms & Conditions." })
            ] }),
            ((_na = (_ma = campaignData.content) == null ? void 0 : _ma.landing) == null ? void 0 : _na.showEmail) !== false && /* @__PURE__ */ jsx(
              "input",
              {
                type: "email",
                placeholder: ((_pa = (_oa = campaignData.content) == null ? void 0 : _oa.landing) == null ? void 0 : _pa.emailPlaceholder) || "Enter your email",
                className: "w-full p-3 border rounded-md mb-4 text-center"
              }
            ),
            /* @__PURE__ */ jsx(
              "button",
              {
                className: "w-full py-3 font-bold text-white rounded-md text-lg",
                style: {
                  backgroundColor: campaignData.primaryColor || "#ff5722"
                },
                children: ((_ra = (_qa = campaignData.content) == null ? void 0 : _qa.landing) == null ? void 0 : _ra.buttonText) || "SPIN NOW"
              }
            ),
            /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-500 mt-3 text-center", children: ((_ta = (_sa = campaignData.content) == null ? void 0 : _sa.landing) == null ? void 0 : _ta.noThanksText) || "No, I don't feel lucky today!" })
          ] }),
          /* @__PURE__ */ jsx("div", { className: "w-full md:w-1/2 flex justify-center items-center", children: /* @__PURE__ */ jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsx(
              "div",
              {
                className: "absolute inset-0 w-full h-full rounded-full",
                style: {
                  background: "radial-gradient(circle, transparent 80%, white 80%, white 83%, transparent 83%)",
                  backgroundSize: "100% 100%",
                  transform: "scale(1.05)",
                  pointerEvents: "none"
                },
                children: Array.from({ length: 24 }).map((_, i) => /* @__PURE__ */ jsx(
                  "div",
                  {
                    className: "absolute w-2 h-2 bg-white rounded-full",
                    style: {
                      top: `${50 - 45 * Math.cos(i * (Math.PI / 12))}%`,
                      left: `${50 + 45 * Math.sin(i * (Math.PI / 12))}%`
                    }
                  },
                  i
                ))
              }
            ),
            /* @__PURE__ */ jsxs(
              "div",
              {
                className: "relative w-[220px] h-[220px] rounded-full overflow-hidden",
                style: {
                  background: ((_ua = campaignData.layout) == null ? void 0 : _ua.wheelSectors) === "four" ? `conic-gradient(
                                    ${campaignData.primaryColor} 0deg, 
                                    ${campaignData.primaryColor} 90deg, 
                                    ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 90deg, 
                                    ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 180deg, 
                                    ${campaignData.primaryColor} 180deg, 
                                    ${campaignData.primaryColor} 270deg, 
                                    ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 270deg, 
                                    ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 360deg
                                  )` : ((_va = campaignData.layout) == null ? void 0 : _va.wheelSectors) === "six" ? `conic-gradient(
                                      ${campaignData.primaryColor} 0deg, 
                                      ${campaignData.primaryColor} 60deg, 
                                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 60deg, 
                                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 120deg, 
                                      ${campaignData.primaryColor} 120deg, 
                                      ${campaignData.primaryColor} 180deg,
                                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 180deg, 
                                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 240deg,
                                      ${campaignData.primaryColor} 240deg, 
                                      ${campaignData.primaryColor} 300deg,
                                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 300deg, 
                                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 360deg
                                    )` : `conic-gradient(
                                      ${campaignData.primaryColor} 0deg, 
                                      ${campaignData.primaryColor} 45deg, 
                                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 45deg, 
                                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 90deg,
                                      ${campaignData.primaryColor} 90deg, 
                                      ${campaignData.primaryColor} 135deg,
                                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 135deg, 
                                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 180deg,
                                      ${campaignData.primaryColor} 180deg, 
                                      ${campaignData.primaryColor} 225deg,
                                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 225deg, 
                                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 270deg,
                                      ${campaignData.primaryColor} 270deg, 
                                      ${campaignData.primaryColor} 315deg,
                                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 315deg, 
                                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 360deg
                                    )`
                },
                children: [
                  /* @__PURE__ */ jsx("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-10 h-10 rounded-full bg-black" }) }),
                  ((_wa = campaignData.layout) == null ? void 0 : _wa.wheelSectors) === "four" && /* @__PURE__ */ jsxs(Fragment, { children: [
                    /* @__PURE__ */ jsx("div", { className: "absolute top-1/4 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold", children: ((_ya = (_xa = campaignData.prizes) == null ? void 0 : _xa[0]) == null ? void 0 : _ya.text) || "10% OFF" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-3/4 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-90", children: ((_Aa = (_za = campaignData.prizes) == null ? void 0 : _za[1]) == null ? void 0 : _Aa.text) || "FREE SHIP" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-3/4 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-180", children: ((_Ca = (_Ba = campaignData.prizes) == null ? void 0 : _Ba[2]) == null ? void 0 : _Ca.text) || "20% OFF" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-1/4 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-90", children: ((_Ea = (_Da = campaignData.prizes) == null ? void 0 : _Da[3]) == null ? void 0 : _Ea.text) || "NO LUCK" })
                  ] }),
                  ((_Fa = campaignData.layout) == null ? void 0 : _Fa.wheelSectors) === "six" && /* @__PURE__ */ jsxs(Fragment, { children: [
                    /* @__PURE__ */ jsx("div", { className: "absolute top-[13%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold", children: ((_Ha = (_Ga = campaignData.prizes) == null ? void 0 : _Ga[0]) == null ? void 0 : _Ha.text) || "10% OFF" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-[30%] left-[80%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-60", children: ((_Ja = (_Ia = campaignData.prizes) == null ? void 0 : _Ia[1]) == null ? void 0 : _Ja.text) || "FREE SHIP" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-[70%] left-[80%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-120", children: ((_La = (_Ka = campaignData.prizes) == null ? void 0 : _Ka[2]) == null ? void 0 : _La.text) || "15% OFF" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-[87%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-180", children: ((_Na = (_Ma = campaignData.prizes) == null ? void 0 : _Ma[3]) == null ? void 0 : _Na.text) || "20% OFF" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-[70%] left-[20%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-120", children: ((_Pa = (_Oa = campaignData.prizes) == null ? void 0 : _Oa[4]) == null ? void 0 : _Pa.text) || "5% OFF" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-[30%] left-[20%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-60", children: ((_Ra = (_Qa = campaignData.prizes) == null ? void 0 : _Qa[5]) == null ? void 0 : _Ra.text) || "NO LUCK" })
                  ] }),
                  (((_Sa = campaignData.layout) == null ? void 0 : _Sa.wheelSectors) === "eight" || !((_Ta = campaignData.layout) == null ? void 0 : _Ta.wheelSectors)) && /* @__PURE__ */ jsxs(Fragment, { children: [
                    /* @__PURE__ */ jsx("div", { className: "absolute top-[10%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold", children: ((_Va = (_Ua = campaignData.prizes) == null ? void 0 : _Ua[0]) == null ? void 0 : _Va.text) || "10% OFF" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-[25%] left-[85%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-45", children: ((_Xa = (_Wa = campaignData.prizes) == null ? void 0 : _Wa[1]) == null ? void 0 : _Xa.text) || "FREE SHIP" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-[90%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-90", children: ((_Za = (_Ya = campaignData.prizes) == null ? void 0 : _Ya[2]) == null ? void 0 : _Za.text) || "5% OFF" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-[75%] left-[85%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-135", children: ((_$a = (__a = campaignData.prizes) == null ? void 0 : __a[3]) == null ? void 0 : _$a.text) || "20% OFF" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-[90%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-180", children: ((_bb = (_ab = campaignData.prizes) == null ? void 0 : _ab[4]) == null ? void 0 : _bb.text) || "FREE SHIP" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-[75%] left-[15%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-135", children: ((_db = (_cb = campaignData.prizes) == null ? void 0 : _cb[5]) == null ? void 0 : _db.text) || "5% OFF" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-[10%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-90", children: ((_fb = (_eb = campaignData.prizes) == null ? void 0 : _eb[6]) == null ? void 0 : _fb.text) || "20% OFF" }),
                    /* @__PURE__ */ jsx("div", { className: "absolute top-[25%] left-[15%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-45", children: ((_hb = (_gb = campaignData.prizes) == null ? void 0 : _gb[7]) == null ? void 0 : _hb.text) || "10% OFF" })
                  ] })
                ]
              }
            )
          ] }) })
        ] })
      ] }) }) }),
      /* @__PURE__ */ jsxs("div", { className: "p-6 flex justify-center space-x-4", children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: () => {
              setLaunchStatus("draft");
              handleLaunch();
            },
            className: "px-8 py-3 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors font-medium",
            children: "Later"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: () => {
              setLaunchStatus("active");
              handleLaunch();
            },
            className: "px-8 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors font-medium",
            children: "Activate Now"
          }
        )
      ] }),
      /* @__PURE__ */ jsx("div", { className: "text-center pb-6", children: /* @__PURE__ */ jsxs("p", { className: "text-gray-600", children: [
        "Easily activate or pause your campaigns anytime in",
        " ",
        /* @__PURE__ */ jsx("span", { className: "font-medium", children: "All Campaigns" }),
        "."
      ] }) })
    ] }) })
  ] });
}
function CampaignEdit$1() {
  const { id } = useParams();
  const navigate = useNavigate$1();
  const { allCampaigns, updateCampaignData, campaignData, saveCampaign } = useCampaign();
  const [isLoading, setIsLoading] = useState(true);
  const [showSaveModal, setShowSaveModal] = useState(false);
  const [campaign, setCampaign] = useState(null);
  console.log("CampaignEdit component rendering with ID:", id);
  console.log("All campaigns available:", allCampaigns);
  useEffect(() => {
    console.log("Looking for campaign with ID:", id);
    console.log("Available campaigns:", allCampaigns);
    const foundCampaign = allCampaigns.find((c) => c.id === id);
    if (foundCampaign) {
      console.log("Found campaign for editing:", foundCampaign);
      setCampaign(foundCampaign);
      updateCampaignData({
        ...foundCampaign,
        step: 1,
        // Start at step 1 when editing
        completionPercentage: 25
      });
      setIsLoading(false);
    } else {
      console.error("Campaign not found:", id);
      toast.error("Campaign not found");
      navigate("/campaigns");
    }
  }, [id, allCampaigns, updateCampaignData, navigate]);
  const handleSaveChanges = async () => {
    try {
      const originalCampaign = campaign || {};
      const updatedCampaign = {
        ...originalCampaign,
        ...campaignData,
        id,
        // Ensure ID is preserved
        updatedAt: (/* @__PURE__ */ new Date()).toISOString()
      };
      console.log("Saving updated campaign:", updatedCampaign);
      await saveCampaign(updatedCampaign);
      toast.success("Campaign updated successfully!");
      setShowSaveModal(false);
      setTimeout(() => {
        navigate("/campaigns");
      }, 500);
    } catch (error) {
      console.error("Error saving campaign:", error);
      toast.error(`Error: ${error.message || "Failed to save campaign"}`);
    }
  };
  const handleFinish = () => {
    setShowSaveModal(true);
  };
  const handleBackToCampaigns = () => {
    navigate("/campaigns");
  };
  const renderStep = () => {
    switch (campaignData.step) {
      case 1:
        return /* @__PURE__ */ jsx(StepOne, {});
      case 2:
        return /* @__PURE__ */ jsx(StepTwo, {});
      case 3:
        return /* @__PURE__ */ jsx(StepThree, {});
      case 4:
        return /* @__PURE__ */ jsx(StepFour, {});
      default:
        return /* @__PURE__ */ jsx(StepOne, {});
    }
  };
  if (isLoading) {
    return /* @__PURE__ */ jsxs("div", { className: "container mx-auto px-4 py-6", children: [
      /* @__PURE__ */ jsx(Navigation2, {}),
      /* @__PURE__ */ jsxs("div", { className: "mt-8 text-center", children: [
        /* @__PURE__ */ jsx("div", { className: "animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500 mx-auto" }),
        /* @__PURE__ */ jsx("p", { className: "mt-4", children: "Loading campaign..." })
      ] })
    ] });
  }
  return /* @__PURE__ */ jsx("div", { className: "min-h-screen bg-gray-50", children: /* @__PURE__ */ jsxs("div", { className: "container mx-auto px-4 py-6", children: [
    /* @__PURE__ */ jsx("div", { className: "flex justify-between items-center", children: /* @__PURE__ */ jsxs(
      "button",
      {
        onClick: handleBackToCampaigns,
        className: "px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors flex items-center",
        children: [
          /* @__PURE__ */ jsx(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-5 w-5 mr-2",
              fill: "none",
              viewBox: "0 0 24 24",
              stroke: "currentColor",
              children: /* @__PURE__ */ jsx(
                "path",
                {
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 2,
                  d: "M10 19l-7-7m0 0l7-7m-7 7h18"
                }
              )
            }
          ),
          "Back to Campaigns"
        ]
      }
    ) }),
    /* @__PURE__ */ jsxs("div", { className: "mt-8 pb-32", children: [
      /* @__PURE__ */ jsxs("h1", { className: "text-3xl font-bold mb-8", children: [
        "Edit Campaign: ",
        campaignData.name
      ] }),
      /* @__PURE__ */ jsx("div", { className: "flex flex-col md:flex-row gap-8", children: /* @__PURE__ */ jsx("div", { className: "w-full ", children: renderStep() }) })
    ] }),
    /* @__PURE__ */ jsx(
      StepNavigation,
      {
        onNext: () => {
          if (campaignData.step === 4) {
            handleFinish();
          }
        },
        nextButtonText: campaignData.step === 4 ? "Save Changes" : "Continue"
      }
    ),
    showSaveModal && /* @__PURE__ */ jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ jsx("h3", { className: "text-xl font-bold mb-4", children: "Save Campaign Changes" }),
      /* @__PURE__ */ jsxs("p", { className: "text-gray-600 mb-6", children: [
        'Are you sure you want to save your changes to "',
        campaignData.name,
        '"?'
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "flex justify-end space-x-3", children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: () => setShowSaveModal(false),
            className: "px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors",
            children: "Cancel"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: handleSaveChanges,
            className: "px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors",
            children: "Save Changes"
          }
        )
      ] })
    ] }) })
  ] }) });
}
const route39 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: CampaignEdit$1
}, Symbol.toStringTag, { value: "Module" }));
function CreateCampaign() {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r2, _s, _t;
  const {
    campaignData,
    updateCampaignData,
    checkCanCreateCampaign,
    saveCampaign
  } = useCampaign();
  const { currentPlan } = usePlan();
  const [showLimitModal, setShowLimitModal] = useState(false);
  const [showLaunchModal, setShowLaunchModal] = useState(false);
  const [showPreviewModal, setShowPreviewModal] = useState(false);
  const navigate = useNavigate$1();
  useEffect(() => {
    console.log("CreateCampaign rendered, current step:", campaignData.step);
    toast.success("Campaign creator loaded!");
  }, []);
  useEffect(() => {
    if (!checkCanCreateCampaign()) {
      setShowLimitModal(true);
    }
  }, [checkCanCreateCampaign]);
  useEffect(() => {
    console.log("Initializing campaign data");
    updateCampaignData({
      name: "Campaign Name",
      step: 1,
      look: "custom",
      color: "singleTone",
      primaryColor: "#fe5300",
      secondaryColor: "#767676",
      tertiaryColor: "#444444",
      completionPercentage: 25
    });
  }, [updateCampaignData]);
  const handleLaunch = async (status) => {
    try {
      console.log("Launching campaign with status:", status);
      const campaign = {
        ...campaignData,
        id: campaignData.id || `campaign-${Date.now()}`,
        status: status || "draft",
        createdAt: (/* @__PURE__ */ new Date()).toISOString()
      };
      const savedCampaign = await saveCampaign(campaign);
      console.log("Campaign saved successfully:", savedCampaign);
      setShowLaunchModal(false);
      setShowPreviewModal(false);
      toast.success(
        `Campaign ${status === "active" ? "launched" : "saved"} successfully!`
      );
      setTimeout(() => {
        navigate("/campaigns");
      }, 500);
    } catch (error) {
      console.error("Error saving campaign:", error);
      toast.error(`Error: ${error.message || "Failed to save campaign"}`);
    }
  };
  const handleFinish = () => {
    setShowPreviewModal(true);
  };
  const renderStep = () => {
    console.log("Rendering step:", campaignData.step);
    switch (campaignData.step) {
      case 1:
        return /* @__PURE__ */ jsx(StepOne, {});
      case 2:
        return /* @__PURE__ */ jsx(StepTwo, {});
      case 3:
        return /* @__PURE__ */ jsx(StepThree, {});
      case 4:
        return /* @__PURE__ */ jsx(StepFour, {});
      default:
        return /* @__PURE__ */ jsx(StepOne, {});
    }
  };
  const renderWheel = () => {
    var _a3, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _i2, _j2, _k2, _l2, _m2, _n2, _o2, _p2, _q2, _r3, _s2, _t2, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D, _E, _F, _G, _H, _I, _J, _K;
    const wheelSectors = ((_a3 = campaignData.layout) == null ? void 0 : _a3.wheelSectors) || "eight";
    return /* @__PURE__ */ jsx("div", { className: "relative w-[220px] h-[220px]", children: /* @__PURE__ */ jsxs(
      "div",
      {
        className: "w-full h-full rounded-full",
        style: {
          background: wheelSectors === "four" ? `conic-gradient(
                    ${campaignData.primaryColor} 0deg, 
                    ${campaignData.primaryColor} 90deg, 
                    ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 90deg, 
                    ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 180deg, 
                    ${campaignData.primaryColor} 180deg, 
                    ${campaignData.primaryColor} 270deg, 
                    ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 270deg, 
                    ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 360deg
                  )` : wheelSectors === "six" ? `conic-gradient(
                      ${campaignData.primaryColor} 0deg, 
                      ${campaignData.primaryColor} 60deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 60deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 120deg, 
                      ${campaignData.primaryColor} 120deg, 
                      ${campaignData.primaryColor} 180deg,
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 180deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 240deg,
                      ${campaignData.primaryColor} 240deg, 
                      ${campaignData.primaryColor} 300deg,
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 300deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 360deg
                    )` : `conic-gradient(
                      ${campaignData.primaryColor} 0deg, 
                      ${campaignData.primaryColor} 45deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 45deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 90deg,
                      ${campaignData.primaryColor} 90deg, 
                      ${campaignData.primaryColor} 135deg,
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 135deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 180deg,
                      ${campaignData.primaryColor} 180deg, 
                      ${campaignData.primaryColor} 225deg,
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 225deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 270deg,
                      ${campaignData.primaryColor} 270deg, 
                      ${campaignData.primaryColor} 315deg,
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 315deg, 
                      ${campaignData.color === "dualTone" ? campaignData.secondaryColor : "white"} 360deg
                    )`
        },
        children: [
          /* @__PURE__ */ jsx("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-10 h-10 rounded-full bg-black" }) }),
          wheelSectors === "four" && /* @__PURE__ */ jsxs(Fragment, { children: [
            /* @__PURE__ */ jsx("div", { className: "absolute top-1/4 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold", children: ((_c2 = (_b2 = campaignData.prizes) == null ? void 0 : _b2[0]) == null ? void 0 : _c2.text) || "10% OFF" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-3/4 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-90", children: ((_e2 = (_d2 = campaignData.prizes) == null ? void 0 : _d2[1]) == null ? void 0 : _e2.text) || "FREE SHIP" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-3/4 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-180", children: ((_g2 = (_f2 = campaignData.prizes) == null ? void 0 : _f2[2]) == null ? void 0 : _g2.text) || "20% OFF" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-1/4 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-90", children: ((_i2 = (_h2 = campaignData.prizes) == null ? void 0 : _h2[3]) == null ? void 0 : _i2.text) || "NO LUCK" })
          ] }),
          wheelSectors === "six" && /* @__PURE__ */ jsxs(Fragment, { children: [
            /* @__PURE__ */ jsx("div", { className: "absolute top-[13%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold", children: ((_k2 = (_j2 = campaignData.prizes) == null ? void 0 : _j2[0]) == null ? void 0 : _k2.text) || "10% OFF" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-[30%] left-[80%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-60", children: ((_m2 = (_l2 = campaignData.prizes) == null ? void 0 : _l2[1]) == null ? void 0 : _m2.text) || "FREE SHIP" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-[70%] left-[80%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-120", children: ((_o2 = (_n2 = campaignData.prizes) == null ? void 0 : _n2[2]) == null ? void 0 : _o2.text) || "15% OFF" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-[87%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-180", children: ((_q2 = (_p2 = campaignData.prizes) == null ? void 0 : _p2[3]) == null ? void 0 : _q2.text) || "20% OFF" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-[70%] left-[20%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-120", children: ((_s2 = (_r3 = campaignData.prizes) == null ? void 0 : _r3[4]) == null ? void 0 : _s2.text) || "5% OFF" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-[30%] left-[20%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-60", children: ((_u = (_t2 = campaignData.prizes) == null ? void 0 : _t2[5]) == null ? void 0 : _u.text) || "NO LUCK" })
          ] }),
          (wheelSectors === "eight" || false) && /* @__PURE__ */ jsxs(Fragment, { children: [
            /* @__PURE__ */ jsx("div", { className: "absolute top-[10%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold", children: ((_w = (_v = campaignData.prizes) == null ? void 0 : _v[0]) == null ? void 0 : _w.text) || "10% OFF" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-[25%] left-[85%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-45", children: ((_y = (_x = campaignData.prizes) == null ? void 0 : _x[1]) == null ? void 0 : _y.text) || "FREE SHIP" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-[90%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-90", children: ((_A = (_z = campaignData.prizes) == null ? void 0 : _z[2]) == null ? void 0 : _A.text) || "5% OFF" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-[75%] left-[85%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-135", children: ((_C = (_B = campaignData.prizes) == null ? void 0 : _B[3]) == null ? void 0 : _C.text) || "20% OFF" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-[90%] left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold rotate-180", children: ((_E = (_D = campaignData.prizes) == null ? void 0 : _D[4]) == null ? void 0 : _E.text) || "FREE SHIP" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-[75%] left-[15%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-135", children: ((_G = (_F = campaignData.prizes) == null ? void 0 : _F[5]) == null ? void 0 : _G.text) || "5% OFF" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-1/2 left-[10%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-90", children: ((_I = (_H = campaignData.prizes) == null ? void 0 : _H[6]) == null ? void 0 : _I.text) || "20% OFF" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-[25%] left-[15%] transform -translate-x-1/2 -translate-y-1/2 text-sm font-bold -rotate-45", children: ((_K = (_J = campaignData.prizes) == null ? void 0 : _J[7]) == null ? void 0 : _K.text) || "10% OFF" })
          ] })
        ]
      }
    ) });
  };
  return /* @__PURE__ */ jsxs("div", { className: "min-h-screen bg-gray-50", children: [
    /* @__PURE__ */ jsxs("div", { className: "container mx-auto px-4 py-8 pb-32", children: [
      /* @__PURE__ */ jsx("h1", { className: "text-3xl font-bold mb-8", children: "Create Campaign" }),
      renderStep()
    ] }),
    /* @__PURE__ */ jsx(
      StepNavigation,
      {
        onNext: () => {
          if (campaignData.step === 4) {
            handleFinish();
          }
        },
        nextButtonText: campaignData.step === 4 ? "Finish" : "Continue"
      }
    ),
    showLimitModal && /* @__PURE__ */ jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ jsx("h3", { className: "text-xl font-bold mb-4", children: "Campaign Limit Reached" }),
      /* @__PURE__ */ jsxs("p", { className: "text-gray-600 mb-6", children: [
        "You've reached the limit of ",
        currentPlan.campaignLimit,
        " campaigns for your ",
        currentPlan.name,
        " plan. Please upgrade your plan to create more campaigns."
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "flex justify-end space-x-3", children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: () => navigate("/campaigns"),
            className: "px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors",
            children: "Back to Campaigns"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: () => navigate("/pricing"),
            className: "px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors",
            children: "Upgrade Plan"
          }
        )
      ] })
    ] }) }),
    showPreviewModal && /* @__PURE__ */ jsx("div", { className: "fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg max-w-4xl w-full p-0 relative", children: [
      /* @__PURE__ */ jsx(
        "button",
        {
          onClick: () => setShowPreviewModal(false),
          className: "absolute top-4 right-4 z-10",
          children: /* @__PURE__ */ jsx(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              className: "h-8 w-8 text-white",
              fill: "none",
              viewBox: "0 0 24 24",
              stroke: "currentColor",
              children: /* @__PURE__ */ jsx(
                "path",
                {
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 2,
                  d: "M6 18L18 6M6 6l12 12"
                }
              )
            }
          )
        }
      ),
      /* @__PURE__ */ jsxs("div", { className: "p-8 bg-indigo-900 text-white text-center", children: [
        /* @__PURE__ */ jsx("h2", { className: "text-4xl font-bold mb-2", children: "READY, SET, LAUNCH!" }),
        /* @__PURE__ */ jsx("p", { className: "text-xl", children: "Your campaign can now shine on your site." })
      ] }),
      /* @__PURE__ */ jsx("div", { className: "p-6", children: /* @__PURE__ */ jsx("div", { className: "bg-white rounded-lg shadow-lg w-full overflow-hidden", children: /* @__PURE__ */ jsxs("div", { className: "p-6", children: [
        /* @__PURE__ */ jsxs("div", { className: "text-center mb-4", children: [
          /* @__PURE__ */ jsx("div", { className: "w-16 h-16 mx-auto mb-2", children: campaignData.logo ? /* @__PURE__ */ jsx(
            "img",
            {
              src: campaignData.logo || "/placeholder.svg",
              alt: "Campaign Logo",
              className: "w-full h-full object-contain"
            }
          ) : /* @__PURE__ */ jsx(
            "div",
            {
              className: "w-full h-full rounded-full flex items-center justify-center",
              style: {
                backgroundColor: campaignData.primaryColor || "#ff5722"
              },
              children: /* @__PURE__ */ jsx(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  className: "h-8 w-8 text-white",
                  fill: "none",
                  viewBox: "0 0 24 24",
                  stroke: "currentColor",
                  children: /* @__PURE__ */ jsx(
                    "path",
                    {
                      strokeLinecap: "round",
                      strokeLinejoin: "round",
                      strokeWidth: 2,
                      d: "M13 10V3L4 14h7v7l9-11h-7z"
                    }
                  )
                }
              )
            }
          ) }),
          /* @__PURE__ */ jsx(
            "h3",
            {
              className: "text-2xl font-bold",
              style: { color: campaignData.primaryColor || "#ff5722" },
              children: campaignData.name || "Swiggy"
            }
          ),
          /* @__PURE__ */ jsx(
            "h4",
            {
              className: "text-2xl font-bold mb-4",
              style: { color: campaignData.primaryColor || "#ff5722" },
              children: ((_b = (_a2 = campaignData.content) == null ? void 0 : _a2.landing) == null ? void 0 : _b.title) || "SPIN TO WIN"
            }
          )
        ] }),
        /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-600 text-center mb-4", children: ((_d = (_c = campaignData.content) == null ? void 0 : _c.landing) == null ? void 0 : _d.subtitle) || "Before you go anywhere, enter your email address to spin the wheel for a chance to win a wicked awesome discount." }),
        /* @__PURE__ */ jsxs("div", { className: "flex flex-col md:flex-row gap-6", children: [
          /* @__PURE__ */ jsxs("div", { className: "w-full md:w-1/2", children: [
            ((_f = (_e = campaignData.content) == null ? void 0 : _e.landing) == null ? void 0 : _f.showPrivacyPolicy) !== false && /* @__PURE__ */ jsxs("div", { className: "flex items-center mb-2 w-full", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  id: "privacy-notice",
                  className: "mr-2",
                  checked: true,
                  readOnly: true
                }
              ),
              /* @__PURE__ */ jsx("label", { htmlFor: "privacy-notice", className: "text-xs", children: ((_h = (_g = campaignData.content) == null ? void 0 : _g.landing) == null ? void 0 : _h.privacyPolicyText) || "I accept the Privacy Notice." })
            ] }),
            ((_j = (_i = campaignData.content) == null ? void 0 : _i.landing) == null ? void 0 : _j.showTerms) !== false && /* @__PURE__ */ jsxs("div", { className: "flex items-center mb-4 w-full", children: [
              /* @__PURE__ */ jsx(
                "input",
                {
                  type: "checkbox",
                  id: "terms",
                  className: "mr-2",
                  checked: true,
                  readOnly: true
                }
              ),
              /* @__PURE__ */ jsx("label", { htmlFor: "terms", className: "text-xs", children: ((_l = (_k = campaignData.content) == null ? void 0 : _k.landing) == null ? void 0 : _l.termsText) || "I accept the Terms & Conditions." })
            ] }),
            ((_n = (_m = campaignData.content) == null ? void 0 : _m.landing) == null ? void 0 : _n.showEmail) !== false && /* @__PURE__ */ jsx(
              "input",
              {
                type: "email",
                placeholder: ((_p = (_o = campaignData.content) == null ? void 0 : _o.landing) == null ? void 0 : _p.emailPlaceholder) || "Enter your email",
                className: "w-full p-3 border rounded-md mb-4 text-center"
              }
            ),
            /* @__PURE__ */ jsx(
              "button",
              {
                className: "w-full py-3 font-bold text-white rounded-md text-lg",
                style: {
                  backgroundColor: campaignData.primaryColor || "#ff5722"
                },
                children: ((_r2 = (_q = campaignData.content) == null ? void 0 : _q.landing) == null ? void 0 : _r2.buttonText) || "SPIN NOW"
              }
            ),
            /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-500 mt-3 text-center", children: ((_t = (_s = campaignData.content) == null ? void 0 : _s.landing) == null ? void 0 : _t.noThanksText) || "No, I don't feel lucky today!" })
          ] }),
          /* @__PURE__ */ jsx("div", { className: "w-full md:w-1/2 flex justify-center items-center", children: /* @__PURE__ */ jsxs("div", { className: "relative", children: [
            /* @__PURE__ */ jsx(
              "div",
              {
                className: "absolute inset-0 w-full h-full rounded-full",
                style: {
                  background: "radial-gradient(circle, transparent 80%, white 80%, white 83%, transparent 83%)",
                  backgroundSize: "100% 100%",
                  transform: "scale(1.05)",
                  pointerEvents: "none"
                },
                children: Array.from({ length: 24 }).map((_, i) => /* @__PURE__ */ jsx(
                  "div",
                  {
                    className: "absolute w-2 h-2 bg-white rounded-full",
                    style: {
                      top: `${50 - 45 * Math.cos(i * (Math.PI / 12))}%`,
                      left: `${50 + 45 * Math.sin(i * (Math.PI / 12))}%`
                    }
                  },
                  i
                ))
              }
            ),
            renderWheel()
          ] }) })
        ] })
      ] }) }) }),
      /* @__PURE__ */ jsxs("div", { className: "p-6 flex justify-center space-x-4", children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: () => {
              handleLaunch("draft");
            },
            className: "px-8 py-3 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors font-medium",
            children: "Later"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: () => {
              handleLaunch("active");
            },
            className: "px-8 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors font-medium",
            children: "Activate Now"
          }
        )
      ] }),
      /* @__PURE__ */ jsx("div", { className: "text-center pb-6", children: /* @__PURE__ */ jsxs("p", { className: "text-gray-600", children: [
        "Easily activate or pause your campaigns anytime in",
        " ",
        /* @__PURE__ */ jsx("span", { className: "font-medium", children: "All Campaigns" }),
        "."
      ] }) })
    ] }) })
  ] });
}
const route40 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: CreateCampaign
}, Symbol.toStringTag, { value: "Module" }));
async function action$6({ request }) {
  var _a2, _b;
  console.log("=== Campaign Toggle Route Called ===");
  try {
    const { session, admin } = await authenticate.admin(request);
    const shopName = session.shop;
    const graphql = admin.graphql;
    console.log("Authentication successful for shop:", shopName);
    const formData = await request.formData();
    const campaignId = formData.get("campaignId");
    const action2 = formData.get("action");
    console.log("Campaign ID:", campaignId, "Action:", action2);
    if (!campaignId) {
      return json(
        { success: false, error: "Campaign ID is required" },
        { status: 400 }
      );
    }
    const { db } = await connectToDatabase$1(shopName);
    const campaign = await db.collection("campaigns").findOne({ id: campaignId });
    if (!campaign) {
      return json(
        { success: false, error: "Campaign not found" },
        { status: 404 }
      );
    }
    const newStatus = action2 === "activate" ? "active" : "draft";
    if (newStatus === "active") {
      await db.collection("campaigns").updateMany(
        { id: { $ne: campaignId }, status: "active" },
        { $set: { status: "draft" } }
      );
      console.log("Deactivated other active campaigns");
    }
    await db.collection("campaigns").updateOne({ id: campaignId }, { $set: { status: newStatus } });
    console.log(`Campaign ${campaignId} status updated to ${newStatus}`);
    if (newStatus === "active") {
      try {
        console.log("Syncing active campaign to metafields...");
        const syncResult = await syncActiveCampaignToMetafields(
          graphql,
          shopName
        );
        if (syncResult && syncResult.success) {
          console.log("Sync successful");
          return json({
            success: true,
            message: "Campaign activated and synced to storefront successfully!",
            status: newStatus,
            campaignId
          });
        } else {
          console.log("Sync failed:", syncResult);
          return json({
            success: true,
            message: "Campaign activated but sync to storefront may take a moment.",
            status: newStatus,
            campaignId,
            syncWarning: true
          });
        }
      } catch (syncError) {
        console.error("Sync error:", syncError);
        return json({
          success: true,
          message: "Campaign activated but sync to storefront may take a moment.",
          status: newStatus,
          campaignId,
          syncWarning: true
        });
      }
    } else {
      try {
        console.log("Clearing metafields for deactivated campaign...");
        const appIdQuery = await graphql(`
          #graphql
          query {
            currentAppInstallation {
              id
            }
          }
        `);
        const appIdResult = await appIdQuery.json();
        if ((_b = (_a2 = appIdResult.data) == null ? void 0 : _a2.currentAppInstallation) == null ? void 0 : _b.id) {
          const appInstallationID = appIdResult.data.currentAppInstallation.id;
          const clearMetafields = [
            {
              namespace: "wheel-of-wonders",
              key: "activeCampaignId",
              type: "single_line_text_field",
              value: "",
              ownerId: appInstallationID
            },
            {
              namespace: "wheel-of-wonders",
              key: "showFloatingButton",
              type: "boolean",
              value: "false",
              ownerId: appInstallationID
            }
          ];
          await graphql(
            `
              mutation CreateAppDataMetafield(
                $metafields: [MetafieldsSetInput!]!
              ) {
                metafieldsSet(metafields: $metafields) {
                  metafields {
                    id
                    namespace
                    key
                    value
                  }
                  userErrors {
                    field
                    message
                  }
                }
              }
            `,
            { variables: { metafields: clearMetafields } }
          );
          console.log("Metafields cleared successfully");
        }
      } catch (clearError) {
        console.error("Error clearing metafields:", clearError);
      }
      return json({
        success: true,
        message: "Campaign deactivated successfully!",
        status: newStatus,
        campaignId
      });
    }
  } catch (error) {
    console.error("Campaign toggle error:", error);
    return json(
      {
        success: false,
        error: `Failed to toggle campaign: ${error.message}`
      },
      { status: 500 }
    );
  }
}
const route41 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$6
}, Symbol.toStringTag, { value: "Module" }));
function Campaigns() {
  const { allCampaigns, deleteCampaign, checkCanCreateCampaign } = useCampaign();
  const { currentPlan } = usePlan();
  const [isDeleting, setIsDeleting] = useState(false);
  const [deleteId, setDeleteId] = useState(null);
  const [searchParams] = useSearchParams();
  const [showPlanModal, setShowPlanModal] = useState(
    searchParams.get("upgrade") === "true"
  );
  const navigate = useNavigate$1();
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric"
    });
  };
  const handleDeleteClick = (id) => {
    setDeleteId(id);
    setIsDeleting(true);
  };
  const confirmDelete = async () => {
    try {
      await deleteCampaign(deleteId);
      setIsDeleting(false);
      setDeleteId(null);
      alert("Campaign deleted successfully!");
    } catch (error) {
      console.error("Error deleting campaign:", error);
      alert(`Error: ${error.message}`);
    }
  };
  const cancelDelete = () => {
    setIsDeleting(false);
    setDeleteId(null);
  };
  const handleCreateClick = () => {
    if (checkCanCreateCampaign()) {
      navigate("/campaigns/create");
    } else {
      setShowPlanModal(true);
    }
  };
  const goToPricing = () => {
    navigate("/pricing");
  };
  return /* @__PURE__ */ jsxs("div", { className: "container mx-auto px-4 py-6", children: [
    /* @__PURE__ */ jsx(Navigation2, {}),
    /* @__PURE__ */ jsxs("div", { className: "mt-8", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex justify-between items-center mb-8", children: [
        /* @__PURE__ */ jsx("h1", { className: "text-3xl font-bold", children: "All Campaigns" }),
        /* @__PURE__ */ jsxs("div", { className: "flex items-center space-x-4", children: [
          /* @__PURE__ */ jsxs("div", { className: "text-sm", children: [
            /* @__PURE__ */ jsx("span", { className: "text-gray-500", children: "Current Plan: " }),
            /* @__PURE__ */ jsx("span", { className: "font-medium capitalize", children: currentPlan.name }),
            /* @__PURE__ */ jsxs("span", { className: "text-gray-500 ml-2", children: [
              "(",
              allCampaigns.length,
              "/",
              currentPlan.campaignLimit,
              " campaigns)"
            ] })
          ] }),
          /* @__PURE__ */ jsx(
            "button",
            {
              onClick: goToPricing,
              className: "px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors text-sm",
              children: "Upgrade"
            }
          ),
          /* @__PURE__ */ jsx(
            "button",
            {
              onClick: handleCreateClick,
              className: "px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors",
              children: "Create New Campaign"
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsx("div", { className: "bg-white rounded-lg shadow overflow-hidden", children: /* @__PURE__ */ jsxs("table", { className: "min-w-full divide-y divide-gray-200", children: [
        /* @__PURE__ */ jsx("thead", { className: "bg-gray-50", children: /* @__PURE__ */ jsxs("tr", { children: [
          /* @__PURE__ */ jsx(
            "th",
            {
              scope: "col",
              className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider",
              children: "Campaign Name"
            }
          ),
          /* @__PURE__ */ jsx(
            "th",
            {
              scope: "col",
              className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider",
              children: "Status"
            }
          ),
          /* @__PURE__ */ jsx(
            "th",
            {
              scope: "col",
              className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider",
              children: "Created"
            }
          ),
          /* @__PURE__ */ jsx(
            "th",
            {
              scope: "col",
              className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider",
              children: "Actions"
            }
          )
        ] }) }),
        /* @__PURE__ */ jsx("tbody", { className: "bg-white divide-y divide-gray-200", children: allCampaigns.length > 0 ? allCampaigns.map((campaign) => /* @__PURE__ */ jsxs("tr", { children: [
          /* @__PURE__ */ jsx("td", { className: "px-6 py-4 whitespace-nowrap", children: /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
            /* @__PURE__ */ jsx(
              "div",
              {
                className: "w-4 h-4 rounded-full mr-2",
                style: {
                  backgroundColor: campaign.primaryColor || "#fe5300"
                }
              }
            ),
            /* @__PURE__ */ jsx("div", { className: "text-sm font-medium text-gray-900", children: campaign.name })
          ] }) }),
          /* @__PURE__ */ jsx("td", { className: "px-6 py-4 whitespace-nowrap", children: /* @__PURE__ */ jsx(
            "span",
            {
              className: `px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${campaign.status === "active" ? "bg-green-100 text-green-800" : campaign.status === "draft" ? "bg-yellow-100 text-yellow-800" : "bg-gray-100 text-gray-800"}`,
              children: campaign.status.charAt(0).toUpperCase() + campaign.status.slice(1)
            }
          ) }),
          /* @__PURE__ */ jsx("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500", children: campaign.createdAt ? formatDate(campaign.createdAt) : "N/A" }),
          /* @__PURE__ */ jsxs("td", { className: "px-6 py-4 whitespace-nowrap text-sm font-medium", children: [
            /* @__PURE__ */ jsx(
              Link$1,
              {
                to: `/campaigns/${campaign.id}`,
                className: "text-indigo-600 hover:text-indigo-900 mr-4",
                children: "View"
              }
            ),
            /* @__PURE__ */ jsx(
              Link$1,
              {
                to: `/campaigns/${campaign.id}/edit`,
                className: "text-indigo-600 hover:text-indigo-900 mr-4",
                children: "Edit"
              }
            ),
            /* @__PURE__ */ jsx(
              "button",
              {
                className: "text-red-600 hover:text-red-900",
                onClick: () => handleDeleteClick(campaign.id),
                children: "Delete"
              }
            )
          ] })
        ] }, campaign.id)) : /* @__PURE__ */ jsx("tr", { children: /* @__PURE__ */ jsxs(
          "td",
          {
            colSpan: "4",
            className: "px-6 py-4 text-center text-sm text-gray-500",
            children: [
              "No campaigns found.",
              " ",
              /* @__PURE__ */ jsx(
                "button",
                {
                  onClick: handleCreateClick,
                  className: "text-indigo-600 hover:underline",
                  children: "Create your first campaign"
                }
              )
            ]
          }
        ) }) })
      ] }) })
    ] }),
    isDeleting && /* @__PURE__ */ jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ jsx("h3", { className: "text-lg font-medium mb-4", children: "Delete Campaign" }),
      /* @__PURE__ */ jsx("p", { className: "text-gray-600 mb-6", children: "Are you sure you want to delete this campaign? This action cannot be undone." }),
      /* @__PURE__ */ jsxs("div", { className: "flex justify-end space-x-3", children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: cancelDelete,
            className: "px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors",
            children: "Cancel"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: confirmDelete,
            className: "px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors",
            children: "Delete"
          }
        )
      ] })
    ] }) }),
    showPlanModal && /* @__PURE__ */ jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ jsx("h3", { className: "text-xl font-bold mb-4", children: "Campaign Limit Reached" }),
      /* @__PURE__ */ jsxs("p", { className: "text-gray-600 mb-6", children: [
        "You've reached the limit of ",
        currentPlan.campaignLimit,
        " campaigns for your ",
        currentPlan.name,
        " plan. Please upgrade your plan to create more campaigns."
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "flex justify-end space-x-3", children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: () => setShowPlanModal(false),
            className: "px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors",
            children: "Cancel"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: goToPricing,
            className: "px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors",
            children: "View Pricing"
          }
        )
      ] })
    ] }) })
  ] });
}
const route42 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Campaigns
}, Symbol.toStringTag, { value: "Module" }));
function CampaignView() {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;
  const { id } = useParams();
  const navigate = useNavigate$1();
  const { allCampaigns } = useCampaign();
  const [campaign, setCampaign] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  useEffect(() => {
    console.log("Looking for campaign with ID:", id);
    console.log("Available campaigns:", allCampaigns);
    const foundCampaign = allCampaigns.find((c) => c.id === id);
    if (foundCampaign) {
      console.log("Found campaign for viewing:", foundCampaign);
      setCampaign(foundCampaign);
      setIsLoading(false);
    } else {
      console.error("Campaign not found:", id);
      toast.error("Campaign not found");
      navigate("/campaigns");
    }
  }, [id, allCampaigns, navigate]);
  const handleEditClick = () => {
    console.log("Navigating to edit campaign:", id);
    navigate(`/campaigns/edit/${id}`);
  };
  const formatDate = (dateString) => {
    if (!dateString) return "N/A";
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric"
    });
  };
  if (isLoading) {
    return /* @__PURE__ */ jsxs("div", { className: "container mx-auto px-4 py-6", children: [
      /* @__PURE__ */ jsx(Navigation2, {}),
      /* @__PURE__ */ jsxs("div", { className: "mt-8 text-center", children: [
        /* @__PURE__ */ jsx("div", { className: "animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500 mx-auto" }),
        /* @__PURE__ */ jsx("p", { className: "mt-4", children: "Loading campaign..." })
      ] })
    ] });
  }
  if (!campaign) {
    return /* @__PURE__ */ jsxs("div", { className: "container mx-auto px-4 py-6", children: [
      /* @__PURE__ */ jsx(Navigation2, {}),
      /* @__PURE__ */ jsxs("div", { className: "mt-8 text-center", children: [
        /* @__PURE__ */ jsx("h1", { className: "text-2xl font-bold mb-4", children: "Campaign Not Found" }),
        /* @__PURE__ */ jsx("p", { className: "text-gray-600 mb-6", children: "The campaign you're looking for doesn't exist or has been deleted." }),
        /* @__PURE__ */ jsx(Link$1, { to: "/campaigns", className: "text-indigo-600 hover:underline", children: "Back to Campaigns" })
      ] })
    ] });
  }
  return /* @__PURE__ */ jsxs("div", { className: "container mx-auto px-4 py-6", children: [
    /* @__PURE__ */ jsx(Navigation2, {}),
    /* @__PURE__ */ jsxs("div", { className: "mt-8", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex justify-between items-center mb-8", children: [
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsx("h1", { className: "text-3xl font-bold", children: campaign.name }),
          /* @__PURE__ */ jsxs("div", { className: "flex items-center mt-2", children: [
            /* @__PURE__ */ jsx(
              "span",
              {
                className: `px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${campaign.status === "active" ? "bg-green-100 text-green-800" : campaign.status === "draft" ? "bg-yellow-100 text-yellow-800" : "bg-gray-100 text-gray-800"}`,
                children: campaign.status.charAt(0).toUpperCase() + campaign.status.slice(1)
              }
            ),
            /* @__PURE__ */ jsxs("span", { className: "text-gray-500 text-sm ml-4", children: [
              "Created: ",
              formatDate(campaign.createdAt)
            ] }),
            campaign.updatedAt && /* @__PURE__ */ jsxs("span", { className: "text-gray-500 text-sm ml-4", children: [
              "Updated: ",
              formatDate(campaign.updatedAt)
            ] })
          ] })
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "flex space-x-3", children: [
          /* @__PURE__ */ jsx(
            "button",
            {
              onClick: handleEditClick,
              className: "px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors",
              children: "Edit Campaign"
            }
          ),
          /* @__PURE__ */ jsx(
            Link$1,
            {
              to: "/campaigns",
              className: "px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors",
              children: "Back to Campaigns"
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg shadow-lg overflow-hidden mb-8", children: [
        /* @__PURE__ */ jsxs("div", { className: "p-6 border-b border-gray-200", children: [
          /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold mb-4", children: "Campaign Preview" }),
          /* @__PURE__ */ jsx("div", { className: "bg-gray-100 p-4 rounded-lg", children: /* @__PURE__ */ jsxs("div", { className: "flex flex-col md:flex-row", children: [
            /* @__PURE__ */ jsxs("div", { className: "w-full md:w-1/2 p-4", children: [
              /* @__PURE__ */ jsx(
                "h3",
                {
                  className: "text-2xl font-bold mb-2",
                  style: { color: campaign.primaryColor },
                  children: ((_b = (_a2 = campaign.content) == null ? void 0 : _a2.landing) == null ? void 0 : _b.title) || "SPIN TO WIN"
                }
              ),
              /* @__PURE__ */ jsx("p", { className: "text-gray-700 text-sm mb-4", children: ((_d = (_c = campaign.content) == null ? void 0 : _c.landing) == null ? void 0 : _d.subtitle) || "Enter your email to spin the wheel for a chance to win a discount." }),
              /* @__PURE__ */ jsx("div", { className: "mb-4", children: /* @__PURE__ */ jsx(
                "input",
                {
                  type: "email",
                  placeholder: "Enter your email",
                  className: "w-full border border-gray-300 rounded-md p-2 text-center",
                  readOnly: true
                }
              ) }),
              /* @__PURE__ */ jsx(
                "button",
                {
                  className: "w-full py-3 rounded-md font-bold text-white mb-2",
                  style: { backgroundColor: campaign.primaryColor },
                  children: ((_f = (_e = campaign.content) == null ? void 0 : _e.landing) == null ? void 0 : _f.buttonText) || "SPIN NOW"
                }
              )
            ] }),
            /* @__PURE__ */ jsx("div", { className: "w-full md:w-1/2 flex items-center justify-center p-4", children: /* @__PURE__ */ jsx("div", { className: "relative w-48 h-48", children: /* @__PURE__ */ jsx(
              "div",
              {
                className: "w-full h-full rounded-full",
                style: {
                  background: campaign.color === "dualTone" ? `conic-gradient(
                          ${campaign.primaryColor} 0deg, 
                          ${campaign.primaryColor} 45deg, 
                          ${campaign.secondaryColor} 45deg, 
                          ${campaign.secondaryColor} 90deg,
                          ${campaign.primaryColor} 90deg, 
                          ${campaign.primaryColor} 135deg,
                          ${campaign.secondaryColor} 135deg, 
                          ${campaign.secondaryColor} 180deg,
                          ${campaign.primaryColor} 180deg, 
                          ${campaign.primaryColor} 225deg,
                          ${campaign.secondaryColor} 225deg, 
                          ${campaign.secondaryColor} 270deg,
                          ${campaign.primaryColor} 270deg, 
                          ${campaign.primaryColor} 315deg,
                          ${campaign.secondaryColor} 315deg, 
                          ${campaign.secondaryColor} 360deg
                        )` : `conic-gradient(
                          ${campaign.primaryColor} 0deg, 
                          ${campaign.primaryColor} 45deg, 
                          white 45deg, 
                          white 90deg,
                          ${campaign.primaryColor} 90deg, 
                          ${campaign.primaryColor} 135deg,
                          white 135deg, 
                          white 180deg,
                          ${campaign.primaryColor} 180deg, 
                          ${campaign.primaryColor} 225deg,
                          white 225deg, 
                          white 270deg,
                          ${campaign.primaryColor} 270deg, 
                          ${campaign.primaryColor} 315deg,
                          white 315deg, 
                          white 360deg
                        )`
                },
                children: /* @__PURE__ */ jsx("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "w-6 h-6 rounded-full bg-black" }) })
              }
            ) }) })
          ] }) })
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "p-6", children: [
          /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold mb-4", children: "Campaign Details" }),
          /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [
            /* @__PURE__ */ jsxs("div", { children: [
              /* @__PURE__ */ jsx("h3", { className: "text-lg font-medium mb-3", children: "Design" }),
              /* @__PURE__ */ jsxs("ul", { className: "space-y-2", children: [
                /* @__PURE__ */ jsxs("li", { className: "flex justify-between", children: [
                  /* @__PURE__ */ jsx("span", { className: "text-gray-600", children: "Look:" }),
                  /* @__PURE__ */ jsx("span", { children: campaign.look === "custom" ? "Custom Layout" : "Ready-Made Template" })
                ] }),
                /* @__PURE__ */ jsxs("li", { className: "flex justify-between", children: [
                  /* @__PURE__ */ jsx("span", { className: "text-gray-600", children: "Color Scheme:" }),
                  /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
                    /* @__PURE__ */ jsx("span", { className: "mr-2", children: campaign.color === "singleTone" ? "Single Tone" : "Dual Tone" }),
                    /* @__PURE__ */ jsx(
                      "div",
                      {
                        className: "w-4 h-4 rounded-full",
                        style: { backgroundColor: campaign.primaryColor }
                      }
                    ),
                    campaign.color === "dualTone" && /* @__PURE__ */ jsx(
                      "div",
                      {
                        className: "w-4 h-4 rounded-full ml-1",
                        style: { backgroundColor: campaign.secondaryColor }
                      }
                    )
                  ] })
                ] }),
                /* @__PURE__ */ jsxs("li", { className: "flex justify-between", children: [
                  /* @__PURE__ */ jsx("span", { className: "text-gray-600", children: "Display Style:" }),
                  /* @__PURE__ */ jsx("span", { children: ((_g = campaign.layout) == null ? void 0 : _g.displayStyle) === "popup" ? "Pop-up" : "Full Screen" })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ jsxs("div", { children: [
              /* @__PURE__ */ jsx("h3", { className: "text-lg font-medium mb-3", children: "Rules" }),
              /* @__PURE__ */ jsxs("ul", { className: "space-y-2", children: [
                /* @__PURE__ */ jsxs("li", { className: "flex justify-between", children: [
                  /* @__PURE__ */ jsx("span", { className: "text-gray-600", children: "Appearing Rules:" }),
                  /* @__PURE__ */ jsx("span", { children: Object.entries(((_h = campaign.rules) == null ? void 0 : _h.appearingRules) || {}).filter(([_, rule]) => rule.enabled).map(
                    ([key]) => key.charAt(0).toUpperCase() + key.slice(1)
                  ).join(", ") || "None" })
                ] }),
                /* @__PURE__ */ jsxs("li", { className: "flex justify-between", children: [
                  /* @__PURE__ */ jsx("span", { className: "text-gray-600", children: "Page Targeting:" }),
                  /* @__PURE__ */ jsx("span", { children: ((_j = (_i = campaign.rules) == null ? void 0 : _i.pageTargeting) == null ? void 0 : _j.enabled) ? "Enabled" : "Disabled" })
                ] }),
                /* @__PURE__ */ jsxs("li", { className: "flex justify-between", children: [
                  /* @__PURE__ */ jsx("span", { className: "text-gray-600", children: "Display Frequency:" }),
                  /* @__PURE__ */ jsx("span", { children: ((_m = (_l = (_k = campaign.rules) == null ? void 0 : _k.displayFrequency) == null ? void 0 : _l.frequency) == null ? void 0 : _m.replace(
                    /_/g,
                    " "
                  )) || "Once a day" })
                ] })
              ] })
            ] })
          ] })
        ] })
      ] })
    ] })
  ] });
}
const route43 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: CampaignView
}, Symbol.toStringTag, { value: "Module" }));
function CampaignEdit() {
  const { id } = useParams();
  const navigate = useNavigate$1();
  const { allCampaigns, updateCampaignData, campaignData, saveCampaign } = useCampaign();
  const [isLoading, setIsLoading] = useState(true);
  const [showSaveModal, setShowSaveModal] = useState(false);
  const [campaign, setCampaign] = useState(null);
  console.log("CampaignEdit component rendering with ID:", id);
  console.log("All campaigns available:", allCampaigns);
  useEffect(() => {
    console.log("Looking for campaign with ID:", id);
    console.log("Available campaigns:", allCampaigns);
    const foundCampaign = allCampaigns.find((c) => c.id === id);
    if (foundCampaign) {
      console.log("Found campaign for editing:", foundCampaign);
      setCampaign(foundCampaign);
      updateCampaignData({
        ...foundCampaign,
        step: 1,
        // Start at step 1 when editing
        completionPercentage: 25
      });
      setIsLoading(false);
    } else {
      console.error("Campaign not found:", id);
      toast.error("Campaign not found");
      navigate("/campaigns");
    }
  }, [id, allCampaigns, updateCampaignData, navigate]);
  const handleSaveChanges = async () => {
    try {
      const originalCampaign = campaign || {};
      const updatedCampaign = {
        ...originalCampaign,
        ...campaignData,
        id,
        // Ensure ID is preserved
        updatedAt: (/* @__PURE__ */ new Date()).toISOString()
      };
      console.log("Saving updated campaign:", updatedCampaign);
      await saveCampaign(updatedCampaign);
      toast.success("Campaign updated successfully!");
      setShowSaveModal(false);
      setTimeout(() => {
        navigate("/campaigns");
      }, 500);
    } catch (error) {
      console.error("Error saving campaign:", error);
      toast.error(`Error: ${error.message || "Failed to save campaign"}`);
    }
  };
  const handleFinish = () => {
    setShowSaveModal(true);
  };
  const renderStep = () => {
    switch (campaignData.step) {
      case 1:
        return /* @__PURE__ */ jsx(StepOne, {});
      case 2:
        return /* @__PURE__ */ jsx(StepTwo, {});
      case 3:
        return /* @__PURE__ */ jsx(StepThree, {});
      case 4:
        return /* @__PURE__ */ jsx(StepFour, {});
      default:
        return /* @__PURE__ */ jsx(StepOne, {});
    }
  };
  if (isLoading) {
    return /* @__PURE__ */ jsxs("div", { className: "container mx-auto px-4 py-6", children: [
      /* @__PURE__ */ jsx(Navigation2, {}),
      /* @__PURE__ */ jsxs("div", { className: "mt-8 text-center", children: [
        /* @__PURE__ */ jsx("div", { className: "animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500 mx-auto" }),
        /* @__PURE__ */ jsx("p", { className: "mt-4", children: "Loading campaign..." })
      ] })
    ] });
  }
  return /* @__PURE__ */ jsx("div", { className: "min-h-screen bg-gray-50", children: /* @__PURE__ */ jsxs("div", { className: "container mx-auto px-4 py-6", children: [
    /* @__PURE__ */ jsx(Navigation2, { createButtonText: "Back to Campaigns" }),
    /* @__PURE__ */ jsxs("div", { className: "mt-8 pb-32", children: [
      /* @__PURE__ */ jsxs("h1", { className: "text-3xl font-bold mb-8", children: [
        "Edit Campaign: ",
        campaignData.name
      ] }),
      renderStep()
    ] }),
    /* @__PURE__ */ jsx(
      StepNavigation,
      {
        onNext: () => {
          if (campaignData.step === 4) {
            handleFinish();
          }
        },
        nextButtonText: campaignData.step === 4 ? "Save Changes" : "Continue"
      }
    ),
    showSaveModal && /* @__PURE__ */ jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ jsx("h3", { className: "text-xl font-bold mb-4", children: "Save Campaign Changes" }),
      /* @__PURE__ */ jsxs("p", { className: "text-gray-600 mb-6", children: [
        'Are you sure you want to save your changes to "',
        campaignData.name,
        '"?'
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "flex justify-end space-x-3", children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: () => setShowSaveModal(false),
            className: "px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors",
            children: "Cancel"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: handleSaveChanges,
            className: "px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors",
            children: "Save Changes"
          }
        )
      ] })
    ] }) })
  ] }) });
}
const route44 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: CampaignEdit
}, Symbol.toStringTag, { value: "Module" }));
async function loader$f({ request }) {
  try {
    const { admin, session } = await authenticate.admin(request);
    const { shop } = session;
    return json({
      success: true,
      shop,
      message: "Authentication successful"
    });
  } catch (error) {
    return json({
      success: false,
      error: error.message
    });
  }
}
function TestAuth() {
  return /* @__PURE__ */ jsx("div", { children: "Check console for auth test results" });
}
const route45 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: TestAuth,
  loader: loader$f
}, Symbol.toStringTag, { value: "Module" }));
const loader$e = async ({ request }) => {
  try {
    const { admin, session } = await authenticate.admin(request);
    const shopName = session.shop;
    const graphql = admin.graphql;
    console.log("Test - Authenticated with shop:", shopName);
    const activeCampaign = await getActiveCampaign(shopName);
    console.log("Test - Active campaign:", activeCampaign);
    if (activeCampaign) {
      const syncResult = await syncActiveCampaignToMetafields(
        graphql,
        shopName
      );
      console.log("Test - Sync result:", syncResult);
      return json({
        success: true,
        message: "Sync completed",
        activeCampaign,
        syncResult
      });
    } else {
      return json({
        success: false,
        message: "No active campaign found",
        shopName
      });
    }
  } catch (error) {
    console.error("Test - Error:", error);
    return json({
      success: false,
      error: error.message
    });
  }
};
function TestSync() {
  return /* @__PURE__ */ jsxs("div", { children: [
    /* @__PURE__ */ jsx("h1", { children: "Test Sync Route" }),
    /* @__PURE__ */ jsx("p", { children: "Check the console for sync results" })
  ] });
}
const route46 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: TestSync,
  loader: loader$e
}, Symbol.toStringTag, { value: "Module" }));
async function action$5({ request }) {
  console.log("Test route called successfully");
  return json({ success: true, message: "Test route working" });
}
async function loader$d({ request }) {
  console.log("Test route GET called successfully");
  return json({ success: true, message: "Test route GET working" });
}
const route47 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$5,
  loader: loader$d
}, Symbol.toStringTag, { value: "Module" }));
async function loader$c({ request }) {
  try {
    const { admin, session } = await authenticate.admin(request);
    const { shop } = session;
    return json({
      shop,
      shopFormatted: shop.replace(/\.myshopify\.com$/i, "")
    });
  } catch (error) {
    console.error("Billing loader error:", error);
    return redirect$1("/auth");
  }
}
async function action$4({ request }) {
  var _a2, _b, _c, _d, _e;
  try {
    const { admin, session } = await authenticate.admin(request);
    const { shop } = session;
    const subscriptionMutation = await admin.graphql(
      `#graphql
      mutation AppSubscriptionCreate($name: String!, $returnUrl: URL!, $test: Boolean, $lineItems: [AppSubscriptionLineItemInput!]!) {
        appSubscriptionCreate(name: $name, returnUrl: $returnUrl, test: $test, lineItems: $lineItems) {
          appSubscription {
            id
            status
          }
          confirmationUrl
          userErrors {
            field
            message
          }
        }
      }`,
      {
        variables: {
          name: "Spinorama Monthly Plan",
          returnUrl: `${process.env.SHOPIFY_APP_URL}/billing/callback`,
          test: process.env.NODE_ENV === "development",
          // Set to false in production
          lineItems: [
            {
              plan: {
                appRecurringPricingDetails: {
                  price: { amount: 5, currencyCode: "USD" },
                  interval: "EVERY_30_DAYS"
                }
              }
            }
          ]
        }
      }
    );
    const subscriptionData = await subscriptionMutation.json();
    if (((_c = (_b = (_a2 = subscriptionData.data) == null ? void 0 : _a2.appSubscriptionCreate) == null ? void 0 : _b.userErrors) == null ? void 0 : _c.length) > 0) {
      console.error("Subscription creation errors:", subscriptionData.data.appSubscriptionCreate.userErrors);
      return json({ error: "Failed to create subscription" }, { status: 400 });
    }
    const confirmationUrl = (_e = (_d = subscriptionData.data) == null ? void 0 : _d.appSubscriptionCreate) == null ? void 0 : _e.confirmationUrl;
    if (confirmationUrl) {
      return redirect$1(confirmationUrl);
    } else {
      return json({ error: "No confirmation URL received" }, { status: 400 });
    }
  } catch (error) {
    console.error("Billing action error:", error);
    return json({ error: "Failed to process subscription" }, { status: 500 });
  }
}
function Billing$1() {
  useLoaderData();
  return /* @__PURE__ */ jsx("div", { className: "container mx-auto px-4 py-6", children: /* @__PURE__ */ jsxs("div", { className: "max-w-md mx-auto bg-white rounded-lg shadow-sm p-8", children: [
    /* @__PURE__ */ jsx("h1", { className: "text-2xl font-bold mb-4", children: "Subscribe to Spinorama" }),
    /* @__PURE__ */ jsx("p", { className: "text-gray-600 mb-6", children: "Unlock all features with our monthly subscription plan." }),
    /* @__PURE__ */ jsxs("div", { className: "bg-indigo-50 p-6 rounded-lg mb-6", children: [
      /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold mb-2", children: "Monthly Plan" }),
      /* @__PURE__ */ jsx("p", { className: "text-3xl font-bold text-indigo-600 mb-2", children: "$5/month" }),
      /* @__PURE__ */ jsxs("ul", { className: "text-sm text-gray-600 space-y-1", children: [
        /* @__PURE__ */ jsx("li", { children: "✓ 20 spin-to-win campaigns" }),
        /* @__PURE__ */ jsx("li", { children: "✓ Email collection & analytics" }),
        /* @__PURE__ */ jsx("li", { children: "✓ Customizable wheels and rewards" }),
        /* @__PURE__ */ jsx("li", { children: "✓ Lead collection with discounts" }),
        /* @__PURE__ */ jsx("li", { children: "✓ Priority support" })
      ] })
    ] }),
    /* @__PURE__ */ jsx(Form$1, { method: "post", children: /* @__PURE__ */ jsx(
      "button",
      {
        type: "submit",
        className: "w-full bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition-colors font-semibold",
        children: "Subscribe Now"
      }
    ) }),
    /* @__PURE__ */ jsx("p", { className: "text-xs text-gray-500 mt-4 text-center", children: "You will be redirected to Shopify to confirm your subscription. Cancel anytime from your Shopify admin." })
  ] }) });
}
const route48 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$4,
  default: Billing$1,
  loader: loader$c
}, Symbol.toStringTag, { value: "Module" }));
async function loader$b({ request }) {
  const { admin, session } = await authenticate.admin(request);
  const { shop } = session;
  const activeCampaign = await getActiveCampaign(shop);
  const metafieldsQuery = await admin.graphql(`
    #graphql
    query {
      currentAppInstallation {
        id
        metafields(first: 20) {
          edges {
            node {
              id
              namespace
              key
              value
              type
            }
          }
        }
      }
    }
  `);
  const metafieldsData = await metafieldsQuery.json();
  const metafields = metafieldsData.data.currentAppInstallation.metafields.edges.map(
    (edge) => edge.node
  );
  return json({
    shop,
    activeCampaign,
    metafields
  });
}
async function action$3({ request }) {
  const { admin, session } = await authenticate.admin(request);
  const { shop } = session;
  const formData = await request.formData();
  const action2 = formData.get("action");
  if (action2 === "sync-metafields") {
    try {
      const response = await fetch(
        `${process.env.APP_URL}/api/sync-campaign-metafields`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ shop })
        }
      );
      const result = await response.json();
      return json({
        success: true,
        message: "Campaign synced to metafields successfully",
        result
      });
    } catch (error) {
      return json({ success: false, message: error.message });
    }
  }
  if (action2 === "test-db") {
    try {
      const activeCampaign = await getActiveCampaign(shop);
      return json({
        success: true,
        message: activeCampaign ? `Database connection successful. Found active campaign: ${activeCampaign.name}` : "Database connection successful, but no active campaign found."
      });
    } catch (error) {
      return json({ success: false, message: error.message });
    }
  }
  return json({ success: false, message: "Invalid action" });
}
function Settings() {
  var _a2, _b;
  const data = useLoaderData();
  const actionData = useActionData();
  const navigation = useNavigation();
  const [showMetafields, setShowMetafields] = useState(false);
  const isLoading = navigation.state === "submitting";
  const wheelOfWondersMetafields = data.metafields.filter(
    (metafield) => metafield.namespace === "wheel-of-wonders"
  );
  return /* @__PURE__ */ jsxs("div", { className: "p-6", children: [
    /* @__PURE__ */ jsx("h1", { className: "text-2xl font-bold mb-6", children: "Settings" }),
    /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg shadow p-6 mb-6", children: [
      /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold mb-4", children: "Campaign Settings" }),
      /* @__PURE__ */ jsxs("div", { className: "mb-6", children: [
        /* @__PURE__ */ jsx("h3", { className: "font-medium mb-2", children: "Active Campaign" }),
        data.activeCampaign ? /* @__PURE__ */ jsxs("div", { className: "bg-green-50 border border-green-200 rounded p-4", children: [
          /* @__PURE__ */ jsx("p", { className: "font-medium text-green-800", children: data.activeCampaign.name }),
          /* @__PURE__ */ jsxs("p", { className: "text-sm text-green-700", children: [
            "ID: ",
            data.activeCampaign.id
          ] }),
          /* @__PURE__ */ jsxs("p", { className: "text-sm text-green-700", children: [
            "Status: ",
            data.activeCampaign.status
          ] }),
          /* @__PURE__ */ jsxs("p", { className: "text-sm text-green-700", children: [
            "Created:",
            " ",
            new Date(data.activeCampaign.createdAt).toLocaleString()
          ] })
        ] }) : /* @__PURE__ */ jsx("div", { className: "bg-yellow-50 border border-yellow-200 rounded p-4", children: /* @__PURE__ */ jsx("p", { className: "text-yellow-700", children: "No active campaign found." }) })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
        /* @__PURE__ */ jsxs(Form$1, { method: "post", children: [
          /* @__PURE__ */ jsx("input", { type: "hidden", name: "action", value: "test-db" }),
          /* @__PURE__ */ jsx(
            "button",
            {
              type: "submit",
              className: "w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition-colors",
              disabled: isLoading,
              children: isLoading && ((_a2 = navigation.formData) == null ? void 0 : _a2.get("action")) === "test-db" ? "Testing..." : "Test Database Connection"
            }
          )
        ] }),
        /* @__PURE__ */ jsxs(Form$1, { method: "post", children: [
          /* @__PURE__ */ jsx("input", { type: "hidden", name: "action", value: "sync-metafields" }),
          /* @__PURE__ */ jsx(
            "button",
            {
              type: "submit",
              className: "w-full bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700 transition-colors",
              disabled: isLoading || !data.activeCampaign,
              children: isLoading && ((_b = navigation.formData) == null ? void 0 : _b.get("action")) === "sync-metafields" ? "Syncing..." : "Sync Active Campaign to Store"
            }
          )
        ] })
      ] }),
      actionData && /* @__PURE__ */ jsx(
        "div",
        {
          className: `mt-4 p-4 rounded ${actionData.success ? "bg-green-50 text-green-800" : "bg-red-50 text-red-800"}`,
          children: /* @__PURE__ */ jsx("p", { children: actionData.message })
        }
      )
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg shadow p-6", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex justify-between items-center mb-4", children: [
        /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold", children: "App Metafields" }),
        /* @__PURE__ */ jsxs(
          "button",
          {
            onClick: () => setShowMetafields(!showMetafields),
            className: "text-blue-600 hover:underline",
            children: [
              showMetafields ? "Hide" : "Show",
              " Metafields"
            ]
          }
        )
      ] }),
      showMetafields && /* @__PURE__ */ jsx("div", { className: "overflow-x-auto", children: /* @__PURE__ */ jsxs("table", { className: "min-w-full divide-y divide-gray-200", children: [
        /* @__PURE__ */ jsx("thead", { className: "bg-gray-50", children: /* @__PURE__ */ jsxs("tr", { children: [
          /* @__PURE__ */ jsx("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider", children: "Namespace" }),
          /* @__PURE__ */ jsx("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider", children: "Key" }),
          /* @__PURE__ */ jsx("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider", children: "Value" }),
          /* @__PURE__ */ jsx("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider", children: "Type" })
        ] }) }),
        /* @__PURE__ */ jsx("tbody", { className: "bg-white divide-y divide-gray-200", children: wheelOfWondersMetafields.length > 0 ? wheelOfWondersMetafields.map((metafield) => /* @__PURE__ */ jsxs("tr", { children: [
          /* @__PURE__ */ jsx("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500", children: metafield.namespace }),
          /* @__PURE__ */ jsx("td", { className: "px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900", children: metafield.key }),
          /* @__PURE__ */ jsx("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500", children: metafield.value }),
          /* @__PURE__ */ jsx("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500", children: metafield.type })
        ] }, metafield.id)) : /* @__PURE__ */ jsx("tr", { children: /* @__PURE__ */ jsx(
          "td",
          {
            colSpan: "4",
            className: "px-6 py-4 text-center text-sm text-gray-500",
            children: 'No wheel-of-wonders metafields found. Click "Sync Active Campaign to Store" to create them.'
          }
        ) }) })
      ] }) })
    ] })
  ] });
}
const route49 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$3,
  default: Settings,
  loader: loader$b
}, Symbol.toStringTag, { value: "Module" }));
const links$2 = () => [{ rel: "stylesheet", href: styles }];
function Tutorial() {
  const navigate = useNavigate();
  const videoRef = useRef(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const handlePlayPause = () => {
    if (isPlaying) {
      videoRef.current.pause();
      setIsPlaying(false);
    } else {
      videoRef.current.play();
      setIsPlaying(true);
    }
  };
  const handleCreateClick = () => {
    navigate("/campaigns/create");
  };
  return /* @__PURE__ */ jsx("div", { className: "bg-gray-100 min-h-screen p-6", children: /* @__PURE__ */ jsxs("div", { className: "max-w-7xl mx-auto", children: [
    /* @__PURE__ */ jsx(Navigation2, { createButtonText: "Create Campaign" }),
    /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-8 mt-8", children: [
      /* @__PURE__ */ jsxs("div", { children: [
        /* @__PURE__ */ jsx("h1", { className: "text-4xl font-bold mb-4", children: "STEP-BY-STEP GUIDE" }),
        /* @__PURE__ */ jsx("p", { className: "text-lg mb-6", children: "How to get more customers is one of the biggest challenges in e-commerce, EcomSend puts it all at your fingertips. EcomSend works out of the box without a single line of code. Need help? Contact us via online chat or email, we are 24/7." }),
        /* @__PURE__ */ jsxs("div", { className: "flex space-x-4 mt-8", children: [
          /* @__PURE__ */ jsx("button", { className: "bg-[#4F46E5] text-white px-8 py-3 rounded-lg font-medium", children: "Watch Tutorial" }),
          /* @__PURE__ */ jsx(
            "button",
            {
              className: "border border-[#4F46E5] text-[#4F46E5] px-8 py-3 rounded-lg font-medium",
              onClick: handleCreateClick,
              children: "Create Campaign"
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsxs(
        "div",
        {
          className: "relative rounded-lg overflow-hidden shadow-lg cursor-pointer",
          onClick: handlePlayPause,
          children: [
            /* @__PURE__ */ jsx(
              "video",
              {
                ref: videoRef,
                src: "/tutorial-video/tutorial.mp4",
                poster: "/placeholder.png?height=400&width=600",
                className: "w-full h-auto rounded-lg"
              }
            ),
            !isPlaying && /* @__PURE__ */ jsx("div", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsx("div", { className: "bg-black bg-opacity-50 rounded-full p-4", children: /* @__PURE__ */ jsx(
              "svg",
              {
                width: "48",
                height: "48",
                viewBox: "0 0 24 24",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: /* @__PURE__ */ jsx("path", { d: "M5 3L19 12L5 21V3Z", fill: "#ffffff" })
              }
            ) }) })
          ]
        }
      )
    ] })
  ] }) });
}
const route50 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Tutorial,
  links: links$2
}, Symbol.toStringTag, { value: "Module" }));
const action$2 = async ({ request }) => {
  console.log("General webhook route called:", request.method, request.url);
  try {
    const { topic, shop, session, admin, payload } = await authenticate.webhook(request);
    console.log(`Received webhook: ${topic} for shop: ${shop}`);
    if (!admin && topic !== "APP_UNINSTALLED") {
      console.log("No admin context available");
      return new Response(null, { status: 200 });
    }
    switch (topic) {
      case "APP_UNINSTALLED":
        if (session) {
          await prisma.session.deleteMany({ where: { shop } });
          console.log(`Successfully deleted sessions for ${shop}`);
        }
        break;
      case "APP_SUBSCRIPTIONS_UPDATE":
        console.log("Processing subscription update:", payload);
        if (payload.app_subscription.status === "ACTIVE") {
          await createSubscriptionMetafield(admin.graphql, "true");
          console.log("Subscription activated");
        } else {
          await createSubscriptionMetafield(admin.graphql, "false");
          console.log("Subscription deactivated");
        }
        break;
      default:
        console.log(`Unhandled webhook topic: ${topic}`);
        break;
    }
    return new Response(null, { status: 200 });
  } catch (error) {
    console.error(`Error processing webhook: ${error.message}`);
    console.error("Full error:", error);
    return new Response(null, { status: 200 });
  }
};
const route51 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$2
}, Symbol.toStringTag, { value: "Module" }));
const action$1 = async ({ request }) => {
  const { topic, shop, session } = await authenticate.webhook(request);
  console.log(`Received ${topic} webhook for ${shop}`);
  if (topic === "APP_UNINSTALLED") {
    console.log(`Processing app uninstallation for ${shop}`);
    try {
      if (shop) {
        await prisma.session.deleteMany({ where: { shop } });
        console.log(`Successfully deleted sessions for ${shop}`);
      }
    } catch (error) {
      console.error(
        `Error processing APP_UNINSTALLED webhook: ${error.message}`
      );
    }
  }
  return new Response(null, { status: 200 });
};
const route52 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action: action$1
}, Symbol.toStringTag, { value: "Module" }));
function Page$4() {
  return /* @__PURE__ */ jsx("div", { children: "Page" });
}
const route53 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Page$4
}, Symbol.toStringTag, { value: "Module" }));
function Page$3() {
  return /* @__PURE__ */ jsx("div", { children: "Page" });
}
const route54 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Page$3
}, Symbol.toStringTag, { value: "Module" }));
const formatPrice = (price) => {
  return `$${price.toFixed(2)}`;
};
async function loader$a({ request }) {
  var _a2, _b, _c;
  try {
    const url = new URL(request.url);
    const shopParam = url.searchParams.get("shop");
    console.log("Pricing loader - Shop parameter:", shopParam);
    if (!shopParam) {
      console.log("Pricing loader - No shop parameter provided");
      return json({
        isAuthenticated: false,
        shop: null,
        activeSubscription: null,
        needsShopParam: true
      });
    }
    try {
      const { authenticate: authenticate2 } = await Promise.resolve().then(() => shopify_server);
      const { getSubscriptionStatus: getSubscriptionStatus2 } = await Promise.resolve().then(() => Subscription_server);
      console.log("Pricing loader - Attempting authentication");
      const { admin, session } = await authenticate2.admin(request);
      const { shop } = session;
      console.log("Pricing loader - Authentication successful for shop:", shop);
      let activeSubscription = null;
      let availablePlans = [];
      try {
        console.log("Pricing loader - Fetching subscription status");
        const subscriptionResult = await getSubscriptionStatus2(admin.graphql);
        const subscriptions = ((_c = (_b = (_a2 = subscriptionResult == null ? void 0 : subscriptionResult.data) == null ? void 0 : _a2.app) == null ? void 0 : _b.installation) == null ? void 0 : _c.activeSubscriptions) || [];
        console.log(
          "Pricing loader - Found subscriptions:",
          subscriptions.length
        );
        if (subscriptions.length > 0) {
          activeSubscription = subscriptions[0];
          console.log(
            "Pricing loader - Active subscription:",
            activeSubscription.name
          );
        }
        availablePlans = [
          {
            id: "starter",
            name: "Standard Package",
            monthlyPrice: 0,
            yearlyPrice: 0,
            shopifyPlanId: null,
            // Free plan
            campaignLimit: 20,
            features: [
              "Show on specific pages",
              "Up to 500 Spins/Month",
              "Basic Analytics",
              "Email Support",
              "20 Campaign"
            ],
            popular: false
          },
          {
            id: "lite",
            name: "Lite",
            monthlyPrice: 4.99,
            yearlyPrice: 49.99,
            shopifyPlanId: BILLING_PLANS.MONTHLY,
            shopifyYearlyPlanId: BILLING_PLANS.ANNUAL,
            campaignLimit: 5,
            features: [
              "Up to 300 impressions",
              "Multiple campaigns",
              "Show on specific pages",
              "A/B testing",
              "Conversion Booster"
            ],
            popular: true
          },
          {
            id: "premium",
            name: "Premium",
            monthlyPrice: 40,
            yearlyPrice: 400,
            shopifyPlanId: "Premium Monthly",
            shopifyYearlyPlanId: "Premium Annual",
            campaignLimit: 20,
            features: [
              "Unlimited impressions",
              "Unlimited campaigns",
              "Advanced targeting",
              "A/B testing",
              "Conversion Booster",
              "Priority Support",
              "Custom Branding",
              "Advanced Analytics"
            ],
            popular: false
          }
        ];
      } catch (error) {
        console.error(
          "Pricing loader - Failed to fetch subscription data:",
          error
        );
      }
      return json({
        isAuthenticated: true,
        shop,
        activeSubscription,
        availablePlans,
        sessionInfo: {
          shop: session.shop,
          expires: session.expires,
          id: session.id
        }
      });
    } catch (authError) {
      console.error("Pricing loader - Authentication failed:", authError);
      throw redirect$1(`/auth?shop=${shopParam}`);
    }
  } catch (error) {
    console.error("Pricing loader - General error:", error);
    if (error instanceof Response && error.status >= 300 && error.status < 400) {
      throw error;
    }
    return json({
      isAuthenticated: false,
      shop: null,
      activeSubscription: null,
      error: "Failed to load pricing data"
    });
  }
}
async function action({ request }) {
  var _a2, _b, _c, _d, _e, _f;
  try {
    const formData = await request.formData();
    const planId = formData.get("planId");
    const billingCycle = formData.get("billingCycle");
    const shopifyPlanName = formData.get("shopifyPlanName");
    const returnUrl = formData.get("returnUrl");
    const isTest = formData.get("isTest") === "true";
    console.log("Pricing action - Plan change request:", {
      planId,
      billingCycle,
      shopifyPlanName
    });
    const { authenticate: authenticate2 } = await Promise.resolve().then(() => shopify_server);
    const { admin, session, billing } = await authenticate2.admin(request);
    const { shop } = session;
    console.log("Pricing action - Authenticated for shop:", shop);
    if (planId === "starter") {
      console.log("Pricing action - Switching to free plan");
      try {
        const { getSubscriptionStatus: getSubscriptionStatus2 } = await Promise.resolve().then(() => Subscription_server);
        const subscriptionResult = await getSubscriptionStatus2(admin.graphql);
        const subscriptions = ((_c = (_b = (_a2 = subscriptionResult == null ? void 0 : subscriptionResult.data) == null ? void 0 : _a2.app) == null ? void 0 : _b.installation) == null ? void 0 : _c.activeSubscriptions) || [];
        if (subscriptions.length > 0) {
          console.log("Pricing action - Cancelling existing subscription");
          const subscriptionId = subscriptions[0].id;
          const cancelResult = await admin.graphql(
            `
            mutation cancelAppSubscription($id: ID!) {
              appSubscriptionCancel(
                id: $id
              ) {
                appSubscription {
                  id
                  status
                }
                userErrors {
                  field
                  message
                }
              }
            }
          `,
            {
              variables: {
                id: subscriptionId
              }
            }
          );
          const cancelData = await cancelResult.json();
          console.log("Pricing action - Cancel result:", cancelData);
          if (((_f = (_e = (_d = cancelData.data) == null ? void 0 : _d.appSubscriptionCancel) == null ? void 0 : _e.userErrors) == null ? void 0 : _f.length) > 0) {
            console.error(
              "Pricing action - Cancel errors:",
              cancelData.data.appSubscriptionCancel.userErrors
            );
          }
        }
        return json({
          success: true,
          message: "Successfully switched to Starter plan",
          planId: "starter"
        });
      } catch (error) {
        console.error("Pricing action - Error switching to free plan:", error);
        return json({
          success: true,
          // Still return success for free plan
          message: "Switched to Starter plan",
          planId: "starter"
        });
      }
    } else if (shopifyPlanName && planId !== "starter") {
      console.log("Pricing action - Processing paid plan:", shopifyPlanName);
      try {
        console.log(
          "Pricing action - Requesting billing for plan:",
          shopifyPlanName
        );
        const response = await billing.request({
          plan: shopifyPlanName,
          isTest,
          returnUrl: returnUrl || `${new URL(request.url).origin}/app?shop=${shop}`
        });
        console.log("Pricing action - Billing request successful");
        return json({
          success: true,
          confirmationUrl: response.confirmationUrl,
          planId,
          message: `Billing initiated for ${planId} plan`
        });
      } catch (billingError) {
        console.error("Pricing action - Billing error:", billingError);
        return json(
          {
            success: false,
            message: billingError.message || "Failed to create subscription"
          },
          { status: 400 }
        );
      }
    }
    console.log("Pricing action - Invalid plan configuration");
    return json(
      {
        success: false,
        message: "Invalid plan configuration"
      },
      { status: 400 }
    );
  } catch (error) {
    console.error("Pricing action - General error:", error);
    return json(
      {
        success: false,
        message: error.message || "Failed to process plan change"
      },
      { status: 500 }
    );
  }
}
function Pricing() {
  var _a2;
  const navigate = useNavigate$1();
  const loaderData = useLoaderData();
  const { billingCycle, changeBillingCycle, changePlan, currentPlan } = usePlan();
  const fetcher = useFetcher();
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [selectedPlanId, setSelectedPlanId] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const availablePlans = (loaderData == null ? void 0 : loaderData.availablePlans) || [];
  const isAuthenticated = loaderData == null ? void 0 : loaderData.isAuthenticated;
  const activeSubscription = loaderData == null ? void 0 : loaderData.activeSubscription;
  const shop = loaderData == null ? void 0 : loaderData.shop;
  const handleBillingCycleChange = (cycle) => {
    changeBillingCycle(cycle);
  };
  const handlePlanSelect = (planId) => {
    if (!isAuthenticated) {
      setError("Please authenticate first to change plans");
      return;
    }
    if (currentPlan.id === planId) return;
    setSelectedPlanId(planId);
    setShowConfirmModal(true);
  };
  const getShopifyPlanName = (plan, cycle) => {
    if (plan.id === "starter") return null;
    if (cycle === "yearly") {
      return plan.shopifyYearlyPlanId || BILLING_PLANS.ANNUAL;
    } else {
      return plan.shopifyPlanId || BILLING_PLANS.MONTHLY;
    }
  };
  const confirmPlanChange = async () => {
    if (!selectedPlanId) return;
    setIsProcessing(true);
    setError(null);
    setSuccess(null);
    try {
      const selectedPlan = availablePlans.find((p) => p.id === selectedPlanId);
      if (!selectedPlan) {
        throw new Error("Selected plan not found");
      }
      console.log("Confirming plan change to:", selectedPlanId);
      const formData = new FormData();
      formData.append("planId", selectedPlanId);
      formData.append("billingCycle", billingCycle);
      if (selectedPlanId !== "starter") {
        const shopifyPlanName = getShopifyPlanName(selectedPlan, billingCycle);
        console.log("Adding billing info for paid plan:", shopifyPlanName);
        formData.append("shopifyPlanName", shopifyPlanName);
        formData.append(
          "returnUrl",
          `${window.location.origin}/app?shop=${shop}`
        );
        formData.append(
          "isTest",
          process.env.NODE_ENV === "development" ? "true" : "false"
        );
      } else {
        console.log("Free plan selected - no billing required");
      }
      fetcher.submit(formData, { method: "post" });
    } catch (err) {
      console.error("Subscription change error:", err);
      setError(err.message || "Failed to change subscription");
      setIsProcessing(false);
      setShowConfirmModal(false);
    }
  };
  useEffect(() => {
    if (fetcher.data) {
      console.log("Fetcher response:", fetcher.data);
      if (fetcher.data.success) {
        changePlan(fetcher.data.planId);
        if (fetcher.data.confirmationUrl) {
          setSuccess(`Redirecting to Shopify to confirm your subscription...`);
          setTimeout(() => {
            window.top.location.href = fetcher.data.confirmationUrl;
          }, 2e3);
        } else {
          setSuccess(fetcher.data.message || "Plan updated successfully!");
          setTimeout(() => {
            navigate(`/app?shop=${shop}`);
          }, 2e3);
        }
      } else {
        setError(fetcher.data.message || "Failed to change subscription");
      }
      setIsProcessing(false);
      setShowConfirmModal(false);
    }
  }, [fetcher.data, changePlan, navigate, shop]);
  const getPlansWithPricing = () => {
    return availablePlans.map((plan) => {
      const basePrice = billingCycle === "yearly" ? plan.yearlyPrice : plan.monthlyPrice;
      return {
        ...plan,
        price: basePrice
      };
    });
  };
  useEffect(() => {
    if (activeSubscription) {
      let matchedPlanId = "starter";
      if (activeSubscription.name === BILLING_PLANS.MONTHLY) {
        matchedPlanId = "lite";
        changeBillingCycle("monthly");
      } else if (activeSubscription.name === BILLING_PLANS.ANNUAL) {
        matchedPlanId = "lite";
        changeBillingCycle("yearly");
      } else if (activeSubscription.name.includes("Premium")) {
        matchedPlanId = "premium";
        changeBillingCycle(
          activeSubscription.name.includes("Annual") ? "yearly" : "monthly"
        );
      }
      changePlan(matchedPlanId);
    } else {
      changePlan("starter");
    }
  }, [activeSubscription, changeBillingCycle, changePlan]);
  const plans = getPlansWithPricing();
  if (loaderData == null ? void 0 : loaderData.needsShopParam) {
    return /* @__PURE__ */ jsx("div", { className: "bg-gray-100 min-h-screen p-6", children: /* @__PURE__ */ jsxs("div", { className: "max-w-7xl mx-auto", children: [
      /* @__PURE__ */ jsx(Navigation2, { createButtonText: "Create Pop-Up" }),
      /* @__PURE__ */ jsx("div", { className: "bg-orange-50 border border-orange-200 text-orange-700 px-4 py-3 rounded mb-6", children: /* @__PURE__ */ jsxs("div", { className: "text-center", children: [
        /* @__PURE__ */ jsx("p", { className: "font-medium", children: "Shop Parameter Required" }),
        /* @__PURE__ */ jsx("p", { className: "text-sm mt-2", children: "Please access this page from your Shopify admin or include the shop parameter in the URL." }),
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: () => navigate("/auth/login"),
            className: "mt-4 bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700 transition-colors",
            children: "Go to Login"
          }
        )
      ] }) })
    ] }) });
  }
  return /* @__PURE__ */ jsxs("div", { className: "bg-gray-100 min-h-screen p-6", children: [
    /* @__PURE__ */ jsxs("div", { className: "max-w-7xl mx-auto", children: [
      /* @__PURE__ */ jsx(Navigation2, { createButtonText: "Create Pop-Up" }),
      !isAuthenticated && /* @__PURE__ */ jsx("div", { className: "bg-orange-50 border border-orange-200 text-orange-700 px-4 py-3 rounded mb-6", children: /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsx("p", { className: "font-medium", children: "Authentication Required" }),
          /* @__PURE__ */ jsx("p", { className: "text-sm", children: "You need to be authenticated to change subscription plans." })
        ] }),
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: () => navigate(`/auth?shop=${shop || "your-shop"}`),
            className: "bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700 transition-colors",
            children: "Sign In"
          }
        )
      ] }) }),
      error && /* @__PURE__ */ jsxs("div", { className: "bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-6", children: [
        /* @__PURE__ */ jsx("p", { className: "mb-2", children: error }),
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: () => setError(null),
            className: "text-red-600 hover:text-red-800 text-sm underline",
            children: "Dismiss"
          }
        )
      ] }),
      success && /* @__PURE__ */ jsx("div", { className: "bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded mb-6", children: /* @__PURE__ */ jsx("p", { children: success }) }),
      activeSubscription && /* @__PURE__ */ jsxs("div", { className: "bg-indigo-50 border border-indigo-200 rounded-lg p-4 mb-6", children: [
        /* @__PURE__ */ jsx("h2", { className: "font-semibold text-lg mb-1", children: "Current Subscription" }),
        /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4", children: [
          /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsxs("p", { className: "text-gray-700", children: [
            "Plan:",
            " ",
            /* @__PURE__ */ jsx("span", { className: "font-medium", children: activeSubscription.name })
          ] }) }),
          /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsxs("p", { className: "text-gray-700", children: [
            "Status:",
            " ",
            /* @__PURE__ */ jsx("span", { className: "font-medium capitalize", children: activeSubscription.status })
          ] }) }),
          activeSubscription.trialDays > 0 && /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsxs("p", { className: "text-gray-700", children: [
            "Trial:",
            " ",
            /* @__PURE__ */ jsxs("span", { className: "font-medium", children: [
              activeSubscription.trialDays,
              " days"
            ] })
          ] }) }),
          /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsxs("p", { className: "text-gray-700", children: [
            "Next Billing:",
            " ",
            /* @__PURE__ */ jsx("span", { className: "font-medium", children: new Date(
              activeSubscription.currentPeriodEnd
            ).toLocaleDateString() })
          ] }) })
        ] })
      ] }),
      !activeSubscription && isAuthenticated && /* @__PURE__ */ jsxs("div", { className: "bg-green-50 border border-green-200 rounded-lg p-4 mb-6", children: [
        /* @__PURE__ */ jsx("h2", { className: "font-semibold text-lg mb-1", children: "Current Plan: Free Starter" }),
        /* @__PURE__ */ jsx("p", { className: "text-gray-700", children: "You're currently on the free Starter plan. Upgrade anytime to unlock more features!" })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "flex flex-col md:flex-row justify-between items-start md:items-center mb-8", children: [
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsx("h1", { className: "text-3xl font-bold mb-2", children: "PRICING" }),
          /* @__PURE__ */ jsx("p", { className: "text-gray-600", children: "Start with our free plan or upgrade for more features. Real-time subscription management." })
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "bg-gray-200 rounded-full p-1 inline-flex mt-4 md:mt-0", children: [
          /* @__PURE__ */ jsx(
            "button",
            {
              className: `${billingCycle === "monthly" ? "bg-indigo-600 text-white" : "text-gray-700"} px-6 py-2 rounded-full font-medium transition-colors`,
              onClick: () => handleBillingCycleChange("monthly"),
              children: "Monthly"
            }
          ),
          /* @__PURE__ */ jsx(
            "button",
            {
              className: `${billingCycle === "yearly" ? "bg-indigo-600 text-white" : "text-gray-700"} px-6 py-2 rounded-full font-medium transition-colors`,
              onClick: () => handleBillingCycleChange("yearly"),
              children: "Yearly"
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ jsx("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: plans.map((plan) => /* @__PURE__ */ jsxs(
        "div",
        {
          className: `bg-white rounded-lg p-8 shadow-sm relative ${plan.popular ? "border-2 border-indigo-600" : ""} ${plan.id === "starter" ? "border-2 border-green-400" : ""} ${currentPlan.id === plan.id ? "ring-2 ring-blue-500" : ""}`,
          children: [
            plan.popular && /* @__PURE__ */ jsx("div", { className: "absolute -top-4 left-0 right-0 mx-auto w-max bg-indigo-600 text-white px-6 py-2 rounded-lg font-medium", children: "Most Picked" }),
            plan.id === "starter" && /* @__PURE__ */ jsx("div", { className: "absolute -top-4 left-0 right-0 mx-auto w-max bg-green-600 text-white px-6 py-2 rounded-lg font-medium", children: "Free Forever" }),
            currentPlan.id === plan.id && /* @__PURE__ */ jsx("div", { className: "absolute -top-4 left-0 right-0 mx-auto w-max bg-blue-600 text-white px-6 py-2 rounded-lg font-medium", children: "Current Plan" }),
            /* @__PURE__ */ jsx("div", { className: "absolute top-8 right-8 bg-indigo-100 p-3 rounded-full", children: plan.id === "starter" ? /* @__PURE__ */ jsx(
              "svg",
              {
                width: "24",
                height: "24",
                viewBox: "0 0 24 24",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: /* @__PURE__ */ jsx(
                  "path",
                  {
                    d: "M13 10V3L4 14H11V21L20 10H13Z",
                    stroke: "#4F46E5",
                    strokeWidth: "2",
                    strokeLinecap: "round",
                    strokeLinejoin: "round"
                  }
                )
              }
            ) : /* @__PURE__ */ jsxs(
              "svg",
              {
                width: "24",
                height: "24",
                viewBox: "0 0 24 24",
                fill: "none",
                xmlns: "http://www.w3.org/2000/svg",
                children: [
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M4.5 16.5C3.12 15.78 2.25 14.28 2.25 12.75C2.25 10.41 4.14 8.52 6.48 8.52C6.71 8.52 6.94 8.54 7.17 8.59C7.35 8.63 7.53 8.52 7.59 8.34C8.19 6.45 9.9 5.02 12 5.02C14.1 5.02 15.81 6.45 16.41 8.34C16.47 8.52 16.65 8.63 16.83 8.59C17.06 8.55 17.29 8.52 17.52 8.52C19.86 8.52 21.75 10.41 21.75 12.75C21.75 14.28 20.88 15.78 19.5 16.5",
                      stroke: "#4F46E5",
                      strokeWidth: "1.5",
                      strokeLinecap: "round",
                      strokeLinejoin: "round"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M7.5 16.5V18.75C7.5 19.58 8.17 20.25 9 20.25H15C15.83 20.25 16.5 19.58 16.5 18.75V16.5",
                      stroke: "#4F46E5",
                      strokeWidth: "1.5",
                      strokeLinecap: "round",
                      strokeLinejoin: "round"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M12 16.5V11.25",
                      stroke: "#4F46E5",
                      strokeWidth: "1.5",
                      strokeLinecap: "round",
                      strokeLinejoin: "round"
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "path",
                    {
                      d: "M9.75 13.5L12 11.25L14.25 13.5",
                      stroke: "#4F46E5",
                      strokeWidth: "1.5",
                      strokeLinecap: "round",
                      strokeLinejoin: "round"
                    }
                  )
                ]
              }
            ) }),
            /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold mb-2 mt-4", children: plan.name }),
            /* @__PURE__ */ jsxs("div", { className: "flex items-baseline mb-1", children: [
              /* @__PURE__ */ jsx("span", { className: "text-4xl font-bold", children: formatPrice(plan.price) }),
              /* @__PURE__ */ jsx("span", { className: "text-sm text-gray-500 ml-2", children: plan.price === 0 ? "forever" : billingCycle === "yearly" ? "per year" : "per month" })
            ] }),
            billingCycle === "yearly" && plan.yearlyPrice < plan.monthlyPrice * 12 && plan.price > 0 && /* @__PURE__ */ jsxs("p", { className: "text-green-600 text-sm font-medium", children: [
              "Save",
              " ",
              formatPrice(plan.monthlyPrice * 12 - plan.yearlyPrice),
              " ",
              "annually"
            ] }),
            /* @__PURE__ */ jsx("div", { className: "border-t border-gray-100 my-4" }),
            /* @__PURE__ */ jsx("ul", { className: "space-y-3 mb-8", children: plan.features.map((feature, index) => /* @__PURE__ */ jsxs("li", { className: "flex items-start", children: [
              /* @__PURE__ */ jsx(
                "svg",
                {
                  className: "w-5 h-5 text-green-500 mr-2 mt-0.5 flex-shrink-0",
                  fill: "none",
                  stroke: "currentColor",
                  viewBox: "0 0 24 24",
                  xmlns: "http://www.w3.org/2000/svg",
                  children: /* @__PURE__ */ jsx(
                    "path",
                    {
                      strokeLinecap: "round",
                      strokeLinejoin: "round",
                      strokeWidth: "2",
                      d: "M5 13l4 4L19 7"
                    }
                  )
                }
              ),
              /* @__PURE__ */ jsx("span", { className: "text-sm", children: feature })
            ] }, index)) }),
            /* @__PURE__ */ jsx(
              "button",
              {
                className: `w-full ${currentPlan.id === plan.id ? "bg-blue-100 text-blue-700 cursor-default" : !isAuthenticated ? "bg-gray-300 text-gray-500 cursor-not-allowed" : plan.id === "starter" ? "bg-green-600 text-white hover:bg-green-700" : "bg-indigo-600 text-white hover:bg-indigo-700"} py-3 px-4 rounded-lg font-medium transition-colors`,
                onClick: () => handlePlanSelect(plan.id),
                disabled: currentPlan.id === plan.id || isProcessing || !isAuthenticated,
                children: currentPlan.id === plan.id ? "Current Plan" : !isAuthenticated ? "Authentication Required" : isProcessing ? "Processing..." : plan.id === "starter" ? "Start Free" : "Get Started"
              }
            )
          ]
        },
        plan.id
      )) }),
      /* @__PURE__ */ jsxs("div", { className: "mt-16", children: [
        /* @__PURE__ */ jsx("h2", { className: "text-2xl font-bold mb-6", children: "Frequently Asked Questions" }),
        /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [
          /* @__PURE__ */ jsxs("div", { className: "bg-white p-6 rounded-lg shadow-sm", children: [
            /* @__PURE__ */ jsx("h3", { className: "font-semibold mb-2", children: "How does real-time billing work?" }),
            /* @__PURE__ */ jsx("p", { className: "text-gray-600", children: "Changes take effect immediately. Free plan has no billing. Paid plans are processed through Shopify's secure billing system." })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "bg-white p-6 rounded-lg shadow-sm", children: [
            /* @__PURE__ */ jsx("h3", { className: "font-semibold mb-2", children: "Can I change my plan anytime?" }),
            /* @__PURE__ */ jsx("p", { className: "text-gray-600", children: "Yes! You can upgrade, downgrade, or switch to the free plan at any time. Changes are instant." })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "bg-white p-6 rounded-lg shadow-sm", children: [
            /* @__PURE__ */ jsx("h3", { className: "font-semibold mb-2", children: "What happens when I upgrade?" }),
            /* @__PURE__ */ jsx("p", { className: "text-gray-600", children: "You'll be redirected to Shopify to confirm billing. Once confirmed, your new features are available immediately." })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "bg-white p-6 rounded-lg shadow-sm", children: [
            /* @__PURE__ */ jsx("h3", { className: "font-semibold mb-2", children: "How do I cancel?" }),
            /* @__PURE__ */ jsx("p", { className: "text-gray-600", children: "Simply switch to the free Starter plan anytime. Your subscription will be cancelled automatically." })
          ] })
        ] })
      ] })
    ] }),
    showConfirmModal && /* @__PURE__ */ jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50", children: /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg p-6 max-w-md w-full", children: [
      /* @__PURE__ */ jsx("h3", { className: "text-xl font-bold mb-4", children: "Confirm Plan Change" }),
      /* @__PURE__ */ jsxs("p", { className: "text-gray-600 mb-6", children: [
        "Are you sure you want to switch to the",
        " ",
        (_a2 = availablePlans.find((p) => p.id === selectedPlanId)) == null ? void 0 : _a2.name,
        " plan",
        selectedPlanId !== "starter" && ` with ${billingCycle} billing`,
        "?",
        selectedPlanId === "starter" ? /* @__PURE__ */ jsx("span", { className: "block mt-2 text-sm text-green-600", children: "✅ This will switch you to the free plan. No billing required." }) : /* @__PURE__ */ jsx("span", { className: "block mt-2 text-sm text-gray-500", children: "💳 You will be redirected to Shopify to complete the billing setup." })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "flex justify-end space-x-3", children: [
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: () => setShowConfirmModal(false),
            className: "px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors",
            disabled: isProcessing,
            children: "Cancel"
          }
        ),
        /* @__PURE__ */ jsx(
          "button",
          {
            onClick: confirmPlanChange,
            className: `px-4 py-2 ${selectedPlanId === "starter" ? "bg-green-600 hover:bg-green-700" : "bg-indigo-600 hover:bg-indigo-700"} text-white rounded-md transition-colors relative`,
            disabled: isProcessing,
            children: isProcessing ? /* @__PURE__ */ jsxs(Fragment, { children: [
              /* @__PURE__ */ jsx("span", { className: "opacity-0", children: "Confirm" }),
              /* @__PURE__ */ jsx("span", { className: "absolute inset-0 flex items-center justify-center", children: /* @__PURE__ */ jsxs(
                "svg",
                {
                  className: "animate-spin h-5 w-5 text-white",
                  xmlns: "http://www.w3.org/2000/svg",
                  fill: "none",
                  viewBox: "0 0 24 24",
                  children: [
                    /* @__PURE__ */ jsx(
                      "circle",
                      {
                        className: "opacity-25",
                        cx: "12",
                        cy: "12",
                        r: "10",
                        stroke: "currentColor",
                        strokeWidth: "4"
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "path",
                      {
                        className: "opacity-75",
                        fill: "currentColor",
                        d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                      }
                    )
                  ]
                }
              ) })
            ] }) : "Confirm"
          }
        )
      ] })
    ] }) })
  ] });
}
const route55 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  action,
  default: Pricing,
  loader: loader$a
}, Symbol.toStringTag, { value: "Module" }));
const links$1 = () => [{ rel: "stylesheet", href: styles }];
const loader$9 = async ({ request }) => {
  const url = new URL(request.url);
  if (url.searchParams.get("shop")) {
    throw redirect$1(`/app?${url.searchParams.toString()}`);
  }
  console.log(
    "Index loader - checking authentication... app/routes/_index/route.jsx"
  );
  return { showForm: Boolean(login) };
};
function App$2() {
  const { showForm } = useLoaderData();
  return /* @__PURE__ */ jsx("div", { className: "min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8", children: /* @__PURE__ */ jsxs("div", { className: "max-w-4xl w-full space-y-8 text-center", children: [
    /* @__PURE__ */ jsxs("div", { className: "space-y-6", children: [
      /* @__PURE__ */ jsx("h1", { className: "text-4xl font-bold text-gray-900 sm:text-5xl", children: "Welcome to Spinorama" }),
      /* @__PURE__ */ jsx("p", { className: "text-xl text-gray-600 max-w-2xl mx-auto", children: "Create engaging spin-to-win campaigns for your Shopify store to boost conversions and customer engagement." })
    ] }),
    showForm && /* @__PURE__ */ jsx("div", { className: "bg-white py-8 px-6 shadow-lg rounded-lg max-w-md mx-auto", children: /* @__PURE__ */ jsxs(Form$1, { method: "post", action: "/auth/login", className: "space-y-6", children: [
      /* @__PURE__ */ jsxs("div", { children: [
        /* @__PURE__ */ jsx(
          "label",
          {
            htmlFor: "shop",
            className: "block text-sm font-medium text-gray-700 text-left",
            children: "Shop domain"
          }
        ),
        /* @__PURE__ */ jsx("div", { className: "mt-1", children: /* @__PURE__ */ jsx(
          "input",
          {
            id: "shop",
            name: "shop",
            type: "text",
            required: true,
            className: "appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm",
            placeholder: "my-shop-domain.myshopify.com"
          }
        ) }),
        /* @__PURE__ */ jsx("p", { className: "mt-2 text-sm text-gray-500 text-left", children: "e.g: my-shop-domain.myshopify.com" })
      ] }),
      /* @__PURE__ */ jsx(
        "button",
        {
          type: "submit",
          className: "group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200",
          children: "Log in to Shopify"
        }
      )
    ] }) }),
    /* @__PURE__ */ jsx("div", { className: "mt-16", children: /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3", children: [
      /* @__PURE__ */ jsxs("div", { className: "bg-white p-6 rounded-lg shadow-md", children: [
        /* @__PURE__ */ jsx("div", { className: "text-indigo-600 mb-4", children: /* @__PURE__ */ jsx(
          "svg",
          {
            className: "w-8 h-8 mx-auto",
            fill: "none",
            stroke: "currentColor",
            viewBox: "0 0 24 24",
            children: /* @__PURE__ */ jsx(
              "path",
              {
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "2",
                d: "M13 10V3L4 14h7v7l9-11h-7z"
              }
            )
          }
        ) }),
        /* @__PURE__ */ jsx("h3", { className: "text-lg font-semibold text-gray-900 mb-2", children: "Easy Setup" }),
        /* @__PURE__ */ jsx("p", { className: "text-gray-600 text-sm", children: "Get started in minutes with our simple setup process. No coding required to create your first spin wheel campaign." })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "bg-white p-6 rounded-lg shadow-md", children: [
        /* @__PURE__ */ jsx("div", { className: "text-indigo-600 mb-4", children: /* @__PURE__ */ jsx(
          "svg",
          {
            className: "w-8 h-8 mx-auto",
            fill: "none",
            stroke: "currentColor",
            viewBox: "0 0 24 24",
            children: /* @__PURE__ */ jsx(
              "path",
              {
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "2",
                d: "M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
              }
            )
          }
        ) }),
        /* @__PURE__ */ jsx("h3", { className: "text-lg font-semibold text-gray-900 mb-2", children: "Boost Conversions" }),
        /* @__PURE__ */ jsx("p", { className: "text-gray-600 text-sm", children: "Increase email signups and sales with engaging spin-to-win popups that customers love to interact with." })
      ] }),
      /* @__PURE__ */ jsxs("div", { className: "bg-white p-6 rounded-lg shadow-md sm:col-span-2 lg:col-span-1", children: [
        /* @__PURE__ */ jsx("div", { className: "text-indigo-600 mb-4", children: /* @__PURE__ */ jsxs(
          "svg",
          {
            className: "w-8 h-8 mx-auto",
            fill: "none",
            stroke: "currentColor",
            viewBox: "0 0 24 24",
            children: [
              /* @__PURE__ */ jsx(
                "path",
                {
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: "2",
                  d: "M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
                }
              ),
              /* @__PURE__ */ jsx(
                "path",
                {
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: "2",
                  d: "M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                }
              )
            ]
          }
        ) }),
        /* @__PURE__ */ jsx("h3", { className: "text-lg font-semibold text-gray-900 mb-2", children: "Customizable Design" }),
        /* @__PURE__ */ jsx("p", { className: "text-gray-600 text-sm", children: "Match your brand with fully customizable colors, text, and wheel designs. Create campaigns that fit your store perfectly." })
      ] })
    ] }) }),
    /* @__PURE__ */ jsx("div", { className: "mt-12 pt-8 border-t border-gray-200", children: /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-500", children: "Trusted by thousands of Shopify merchants worldwide" }) })
  ] }) });
}
const route56 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: App$2,
  links: links$1,
  loader: loader$9
}, Symbol.toStringTag, { value: "Module" }));
const loader$8 = async ({ request }) => {
  await authenticate.admin(request);
  return null;
};
const route57 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  loader: loader$8
}, Symbol.toStringTag, { value: "Module" }));
async function loader$7({ request }) {
  try {
    const healthData = {
      status: "healthy",
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      port: process.env.PORT || 3e3,
      host: process.env.HOST || "0.0.0.0",
      uptime: process.uptime(),
      environment: process.env.NODE_ENV || "development",
      url: request.url,
      shopifyAppUrl: process.env.SHOPIFY_APP_URL
    };
    console.log("Health check accessed:", healthData);
    return json(healthData, {
      status: 200,
      headers: {
        "Cache-Control": "no-cache, no-store, must-revalidate",
        "Content-Type": "application/json"
      }
    });
  } catch (error) {
    console.error("Health check error:", error);
    return json(
      {
        status: "unhealthy",
        error: error.message,
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      },
      {
        status: 500,
        headers: {
          "Cache-Control": "no-cache, no-store, must-revalidate",
          "Content-Type": "application/json"
        }
      }
    );
  }
}
const GET$1 = loader$7;
const route58 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  GET: GET$1,
  loader: loader$7
}, Symbol.toStringTag, { value: "Module" }));
async function loader$6({ request }) {
  console.log("Index loader - checking authentication... app/routes/index.jsx");
  try {
    const { admin, session } = await authenticate.admin(request);
    if (session && session.shop) {
      return redirect$1("/app");
    }
    return redirect$1("/auth/login");
  } catch (error) {
    console.log("Index loader - authentication check failed:", error == null ? void 0 : error.message);
    if (isClientSideNavigation(request)) {
      return redirect$1("/app");
    }
    const url = new URL(request.url);
    const shop = url.searchParams.get("shop");
    if (shop) {
      return redirect$1(`/auth?shop=${shop}`);
    }
    return redirect$1("/auth/login");
  }
}
function Index() {
  return null;
}
const route59 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Index,
  loader: loader$6
}, Symbol.toStringTag, { value: "Module" }));
async function loader$5() {
  console.log("Ping endpoint accessed at:", (/* @__PURE__ */ new Date()).toISOString());
  return new Response("OK", {
    status: 200,
    headers: {
      "Content-Type": "text/plain",
      "Cache-Control": "no-cache"
    }
  });
}
const GET = loader$5;
const route60 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  GET,
  loader: loader$5
}, Symbol.toStringTag, { value: "Module" }));
const links = () => [{ rel: "stylesheet", href: styles }];
const loader$4 = async ({ request }) => {
  var _a2, _b, _c, _d, _e;
  const discountCodes = [];
  let activeCampaign = null;
  const url = new URL(request.url);
  const host = url.searchParams.get("host");
  const shop = url.searchParams.get("shop");
  const embedded = url.searchParams.get("embedded");
  if (!host) {
    throw new Error("Missing host query param in URL");
  }
  try {
    if (shop || embedded || host || request.headers.get("x-shopify-shop-domain")) {
      console.log(
        "Root loader - attempting authentication for Shopify app request..."
      );
      const { admin, session } = await authenticate.admin(request);
      if (admin && session) {
        console.log("Root loader - attempting to fetch discount codes...");
        const discountCode = await getDiscountCodes(admin.graphql);
        const nodes = ((_b = (_a2 = discountCode == null ? void 0 : discountCode.data) == null ? void 0 : _a2.discountNodes) == null ? void 0 : _b.edges) || [];
        console.log("Root loader - raw discount nodes:", nodes.length);
        for (const { node } of nodes) {
          const discount = node.discount;
          const title = (discount == null ? void 0 : discount.title) || "N/A";
          const summary = (discount == null ? void 0 : discount.summary) || "N/A";
          if (((_d = (_c = discount == null ? void 0 : discount.codes) == null ? void 0 : _c.edges) == null ? void 0 : _d.length) > 0) {
            for (const codeEdge of discount.codes.edges) {
              const code = ((_e = codeEdge == null ? void 0 : codeEdge.node) == null ? void 0 : _e.code) || "N/A";
              discountCodes.push({
                id: node.id,
                title,
                summary,
                code,
                type: discount.__typename || "DiscountCodeBasic"
              });
            }
          } else {
            discountCodes.push({
              id: node.id,
              title,
              summary,
              code: null,
              type: discount.__typename || "DiscountCodeBasic"
            });
          }
        }
        console.log("Root loader - processed discount codes:", discountCodes);
        try {
          activeCampaign = await getActiveCampaign(shop);
          if (activeCampaign) {
            await syncActiveCampaignToMetafields(admin.graphql, shop);
          }
        } catch (campaignError) {
          console.log(
            "App - Could not fetch/sync campaign:",
            campaignError.message
          );
        }
      } else {
        console.log(
          "Root loader - authentication successful but no admin/session available"
        );
      }
    } else {
      console.log(
        "Root loader - not a Shopify app request, skipping authentication"
      );
    }
  } catch (error) {
    console.log(
      "Root loader - could not fetch discount codes:",
      (error == null ? void 0 : error.message) || "Unknown error"
    );
    if (error && error.status === 302) {
      console.log(
        "Root loader - received redirect response, this is normal for unauthenticated requests"
      );
    }
  }
  return json({
    ENV: {
      NODE_ENV: process.env.NODE_ENV
    },
    apiKey: process.env.SHOPIFY_API_KEY || "",
    discountCodes,
    host,
    shop,
    hasCampaign: !!activeCampaign
  });
};
function App$1() {
  const data2 = useLoaderData();
  const location = useLocation();
  const apiKey = data2.apiKey || process.env.SHOPIFY_API_KEY || "";
  const query = new URLSearchParams(location.search);
  data2.shop || query.get("shop") || "";
  const host = data2.host || process.env.HOST || "";
  useEffect(() => {
    if (typeof window !== "undefined") {
      if (data2.discountCodes && data2.discountCodes.length > 0) {
        window.GLOBAL_DISCOUNT_CODES = data2.discountCodes;
        console.log(
          "Root - Setting global discount codes:",
          data2.discountCodes
        );
        try {
          localStorage.setItem(
            "GLOBAL_DISCOUNT_CODES",
            JSON.stringify(data2.discountCodes)
          );
        } catch (e) {
          console.error("Failed to store discount codes in localStorage:", e);
        }
      } else {
        try {
          const storedCodes = localStorage.getItem("GLOBAL_DISCOUNT_CODES");
          if (storedCodes) {
            const parsedCodes = JSON.parse(storedCodes);
            if (parsedCodes && parsedCodes.length > 0) {
              window.GLOBAL_DISCOUNT_CODES = parsedCodes;
              console.log(
                "Root - Using stored discount codes from localStorage:",
                parsedCodes.length
              );
            }
          }
        } catch (e) {
          console.error(
            "Failed to retrieve discount codes from localStorage:",
            e
          );
        }
      }
    }
  }, [data2.discountCodes]);
  return /* @__PURE__ */ jsxs(AppProvider$1, { isEmbeddedApp: true, apiKey, host, children: [
    /* @__PURE__ */ jsx(br, { children: /* @__PURE__ */ jsx(Link$1, { to: "/app", rel: "home", children: "Home" }) }),
    /* @__PURE__ */ jsx(PlanProvider, { initialDiscountCodes: data2.discountCodes || [], children: /* @__PURE__ */ jsxs(CampaignProvider, { children: [
      /* @__PURE__ */ jsx(Outlet, {}),
      /* @__PURE__ */ jsx(Toaster, { position: "top-right" })
    ] }) })
  ] });
}
function ErrorBoundary() {
  return boundary.error(useRouteError());
}
const headers = (headersArgs) => {
  return boundary.headers(headersArgs);
};
const route61 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ErrorBoundary,
  default: App$1,
  headers,
  links,
  loader: loader$4
}, Symbol.toStringTag, { value: "Module" }));
function AdminLayout({ children }) {
  const location = useLocation();
  const [searchActive, setSearchActive] = useState(false);
  const [searchValue, setSearchValue] = useState("");
  const [userMenuActive, setUserMenuActive] = useState(false);
  const [mobileNavigationActive, setMobileNavigationActive] = useState(false);
  const toggleMobileNavigationActive = useCallback(
    () => setMobileNavigationActive((active) => !active),
    []
  );
  useCallback((value) => {
    setSearchValue(value);
  }, []);
  const handleSearchFieldChange = useCallback((value) => {
    setSearchValue(value);
    setSearchActive(value.length > 0);
  }, []);
  const toggleUserMenuActive = useCallback(
    () => setUserMenuActive((active) => !active),
    []
  );
  const userMenuActions = [
    {
      items: [
        { content: "Profile", url: "/app/settings/profile" },
        { content: "Sign out", onAction: () => console.log("Sign out") }
      ]
    }
  ];
  /* @__PURE__ */ jsx(
    TopBar.UserMenu,
    {
      actions: userMenuActions,
      name: "Admin User",
      detail: "Premium Plan",
      initials: "AU",
      open: userMenuActive,
      onToggle: toggleUserMenuActive
    }
  );
  /* @__PURE__ */ jsx(
    TopBar.SearchField,
    {
      onChange: handleSearchFieldChange,
      value: searchValue,
      placeholder: "Search"
    }
  );
  /* @__PURE__ */ jsx(
    TopBar.Menu,
    {
      activatorContent: /* @__PURE__ */ jsx(Button, { icon: NotificationIcon, variant: "tertiary" })
    }
  );
  const isActive = (path) => location.pathname === path;
  const navigationMarkup = /* @__PURE__ */ jsx(Navigation$1, { location: location.pathname, children: /* @__PURE__ */ jsx(
    Navigation$1.Section,
    {
      items: [
        {
          url: "/app",
          label: "Home",
          icon: HomeIcon,
          selected: isActive("/app")
        },
        {
          url: "/app/campaigns",
          label: "Campaigns",
          icon: ConfettiIcon,
          selected: isActive("/app/campaigns")
        },
        {
          url: "/app/subscribers",
          label: "Subscribers",
          icon: PersonIcon,
          selected: isActive("/app/subscribers")
        },
        {
          url: "/app/revenue",
          label: "Revenue",
          icon: FinanceIcon,
          selected: isActive("/app/revenue")
        },
        {
          url: "/app/integrations",
          label: "Integrations",
          icon: AppsIcon,
          selected: isActive("/app/integrations")
        },
        {
          url: "/app/settings",
          label: "Settings",
          icon: SettingsFilledIcon,
          selected: isActive("/app/settings")
        }
      ]
    }
  ) });
  return /* @__PURE__ */ jsx(
    Frame,
    {
      navigation: navigationMarkup,
      showMobileNavigation: mobileNavigationActive,
      onNavigationDismiss: toggleMobileNavigationActive,
      children
    }
  );
}
const loader$3 = async ({ request }) => {
  await authenticate.admin(request);
  return null;
};
function NewCampaign() {
  const [selectedType, setSelectedType] = useState("spin");
  const navigate = useNavigate$1();
  const { smDown, mdDown } = useBreakpoints();
  const handleTypeSelect = useCallback((type) => {
    setSelectedType(type);
  }, []);
  const handleCreateGame = useCallback(
    (type) => {
      navigate(`/app/game/add?type=${type}`);
    },
    [navigate]
  );
  const handlePreview = useCallback((type) => {
    alert(`Previewing ${type} game`);
  }, []);
  return /* @__PURE__ */ jsx(AdminLayout, { children: /* @__PURE__ */ jsxs(
    Page$5,
    {
      title: "New Campaign",
      backAction: {
        content: "Campaigns",
        onAction: () => navigate("/app/campaigns")
      },
      children: [
        /* @__PURE__ */ jsx(_r, { title: "New Campaign" }),
        /* @__PURE__ */ jsxs(BlockStack, { gap: "500", children: [
          /* @__PURE__ */ jsx(Text, { variant: "headingMd", as: "h2", fontWeight: "semibold", children: "SELECT CAMPAIGN TYPE" }),
          /* @__PURE__ */ jsxs(Layout, { children: [
            /* @__PURE__ */ jsx(Layout.Section, { oneThird: !smDown, children: /* @__PURE__ */ jsx(
              "div",
              {
                style: {
                  border: selectedType === "spin" ? "2px solid #2c6ecb" : "1px solid #dfe3e8",
                  borderRadius: "8px",
                  padding: "16px",
                  cursor: "pointer",
                  height: "100%",
                  marginBottom: smDown ? "16px" : "0"
                },
                onClick: () => handleTypeSelect("spin"),
                children: /* @__PURE__ */ jsxs(BlockStack, { gap: "400", align: "center", children: [
                  /* @__PURE__ */ jsxs("div", { style: { position: "relative" }, children: [
                    /* @__PURE__ */ jsxs(
                      "div",
                      {
                        style: {
                          background: "#f6f6f7",
                          borderRadius: "8px 8px 0 0",
                          padding: "8px",
                          display: "flex",
                          alignItems: "center",
                          gap: "4px"
                        },
                        children: [
                          /* @__PURE__ */ jsx(
                            "div",
                            {
                              style: {
                                width: "8px",
                                height: "8px",
                                borderRadius: "50%",
                                background: "#d9d9d9"
                              }
                            }
                          ),
                          /* @__PURE__ */ jsx(
                            "div",
                            {
                              style: {
                                width: "8px",
                                height: "8px",
                                borderRadius: "50%",
                                background: "#d9d9d9"
                              }
                            }
                          ),
                          /* @__PURE__ */ jsx(
                            "div",
                            {
                              style: {
                                width: "8px",
                                height: "8px",
                                borderRadius: "50%",
                                background: "#d9d9d9"
                              }
                            }
                          ),
                          /* @__PURE__ */ jsx(
                            "div",
                            {
                              style: {
                                flex: 1,
                                height: "8px",
                                background: "#d9d9d9",
                                borderRadius: "4px",
                                marginLeft: "8px"
                              }
                            }
                          )
                        ]
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "div",
                      {
                        style: {
                          background: "#6b6c6d",
                          padding: "16px",
                          display: "flex",
                          justifyContent: "center",
                          alignItems: "center"
                        },
                        children: /* @__PURE__ */ jsx(
                          "img",
                          {
                            src: "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Screenshot%202025-03-26%20at%2011.49.46%E2%80%AFPM-9fOjoQjhkiDMLXc38TprvvQ630DD5N.png",
                            alt: "Spin the Wheel Preview",
                            style: { width: "80%", maxWidth: "250px" }
                          }
                        )
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "div",
                      {
                        style: {
                          background: "white",
                          borderRadius: "0 0 8px 8px",
                          padding: "16px",
                          display: "flex",
                          justifyContent: "center"
                        },
                        children: /* @__PURE__ */ jsx(
                          "div",
                          {
                            style: {
                              width: "40px",
                              height: "40px",
                              borderRadius: "50%",
                              border: "1px solid #dfe3e8"
                            }
                          }
                        )
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsx(Text, { variant: "headingMd", as: "h3", alignment: "center", children: "SPIN THE WHEEL" }),
                  /* @__PURE__ */ jsxs(InlineStack, { gap: "300", align: "center", children: [
                    /* @__PURE__ */ jsx(Button, { onClick: () => handleCreateGame("spin"), children: "Game Create" }),
                    /* @__PURE__ */ jsx(Button, { plain: true, onClick: () => handlePreview("spin"), children: "Preview" })
                  ] })
                ] })
              }
            ) }),
            /* @__PURE__ */ jsx(Layout.Section, { oneThird: !smDown, children: /* @__PURE__ */ jsx(
              "div",
              {
                style: {
                  border: selectedType === "coupons" ? "2px solid #2c6ecb" : "1px solid #dfe3e8",
                  borderRadius: "8px",
                  padding: "16px",
                  cursor: "pointer",
                  height: "100%",
                  marginBottom: smDown ? "16px" : "0"
                },
                onClick: () => handleTypeSelect("coupons"),
                children: /* @__PURE__ */ jsxs(BlockStack, { gap: "400", align: "center", children: [
                  /* @__PURE__ */ jsxs("div", { style: { position: "relative" }, children: [
                    /* @__PURE__ */ jsxs(
                      "div",
                      {
                        style: {
                          background: "#f6f6f7",
                          borderRadius: "8px 8px 0 0",
                          padding: "8px",
                          display: "flex",
                          alignItems: "center",
                          gap: "4px"
                        },
                        children: [
                          /* @__PURE__ */ jsx(
                            "div",
                            {
                              style: {
                                width: "8px",
                                height: "8px",
                                borderRadius: "50%",
                                background: "#d9d9d9"
                              }
                            }
                          ),
                          /* @__PURE__ */ jsx(
                            "div",
                            {
                              style: {
                                width: "8px",
                                height: "8px",
                                borderRadius: "50%",
                                background: "#d9d9d9"
                              }
                            }
                          ),
                          /* @__PURE__ */ jsx(
                            "div",
                            {
                              style: {
                                width: "8px",
                                height: "8px",
                                borderRadius: "50%",
                                background: "#d9d9d9"
                              }
                            }
                          ),
                          /* @__PURE__ */ jsx(
                            "div",
                            {
                              style: {
                                flex: 1,
                                height: "8px",
                                background: "#d9d9d9",
                                borderRadius: "4px",
                                marginLeft: "8px"
                              }
                            }
                          )
                        ]
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "div",
                      {
                        style: {
                          background: "#6b6c6d",
                          padding: "16px",
                          display: "flex",
                          justifyContent: "center",
                          alignItems: "center"
                        },
                        children: /* @__PURE__ */ jsx(
                          "img",
                          {
                            src: "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Screenshot%202025-03-26%20at%2011.49.46%E2%80%AFPM-9fOjoQjhkiDMLXc38TprvvQ630DD5N.png",
                            alt: "Wheel of Coupons Preview",
                            style: { width: "80%", maxWidth: "250px" }
                          }
                        )
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "div",
                      {
                        style: {
                          background: "white",
                          borderRadius: "0 0 8px 8px",
                          padding: "16px",
                          display: "flex",
                          justifyContent: "center"
                        },
                        children: /* @__PURE__ */ jsx(
                          "div",
                          {
                            style: {
                              width: "40px",
                              height: "40px",
                              borderRadius: "50%",
                              border: "1px solid #dfe3e8"
                            }
                          }
                        )
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsx(Text, { variant: "headingMd", as: "h3", alignment: "center", children: "WHEEL OF COUPONS" }),
                  /* @__PURE__ */ jsxs(InlineStack, { gap: "300", align: "center", children: [
                    /* @__PURE__ */ jsx(Button, { onClick: () => handleCreateGame("coupons"), children: "Game Create" }),
                    /* @__PURE__ */ jsx(Button, { plain: true, onClick: () => handlePreview("coupons"), children: "Preview" })
                  ] })
                ] })
              }
            ) }),
            /* @__PURE__ */ jsx(Layout.Section, { oneThird: !smDown, children: /* @__PURE__ */ jsx(
              "div",
              {
                style: {
                  border: selectedType === "reveal" ? "2px solid #2c6ecb" : "1px solid #dfe3e8",
                  borderRadius: "8px",
                  padding: "16px",
                  cursor: "pointer",
                  height: "100%"
                },
                onClick: () => handleTypeSelect("reveal"),
                children: /* @__PURE__ */ jsxs(BlockStack, { gap: "400", align: "center", children: [
                  /* @__PURE__ */ jsxs("div", { style: { position: "relative" }, children: [
                    /* @__PURE__ */ jsxs(
                      "div",
                      {
                        style: {
                          background: "#f6f6f7",
                          borderRadius: "8px 8px 0 0",
                          padding: "8px",
                          display: "flex",
                          alignItems: "center",
                          gap: "4px"
                        },
                        children: [
                          /* @__PURE__ */ jsx(
                            "div",
                            {
                              style: {
                                width: "8px",
                                height: "8px",
                                borderRadius: "50%",
                                background: "#d9d9d9"
                              }
                            }
                          ),
                          /* @__PURE__ */ jsx(
                            "div",
                            {
                              style: {
                                width: "8px",
                                height: "8px",
                                borderRadius: "50%",
                                background: "#d9d9d9"
                              }
                            }
                          ),
                          /* @__PURE__ */ jsx(
                            "div",
                            {
                              style: {
                                width: "8px",
                                height: "8px",
                                borderRadius: "50%",
                                background: "#d9d9d9"
                              }
                            }
                          ),
                          /* @__PURE__ */ jsx(
                            "div",
                            {
                              style: {
                                flex: 1,
                                height: "8px",
                                background: "#d9d9d9",
                                borderRadius: "4px",
                                marginLeft: "8px"
                              }
                            }
                          )
                        ]
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "div",
                      {
                        style: {
                          background: "#6b6c6d",
                          padding: "16px",
                          display: "flex",
                          justifyContent: "center",
                          alignItems: "center"
                        },
                        children: /* @__PURE__ */ jsx(
                          "img",
                          {
                            src: "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Screenshot%202025-03-26%20at%2011.49.46%E2%80%AFPM-9fOjoQjhkiDMLXc38TprvvQ630DD5N.png",
                            alt: "Reveal Your Coupon Preview",
                            style: { width: "80%", maxWidth: "250px" }
                          }
                        )
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "div",
                      {
                        style: {
                          background: "white",
                          borderRadius: "0 0 8px 8px",
                          padding: "16px",
                          display: "flex",
                          justifyContent: "center"
                        },
                        children: /* @__PURE__ */ jsx(
                          "div",
                          {
                            style: {
                              width: "40px",
                              height: "40px",
                              borderRadius: "50%",
                              border: "1px solid #dfe3e8"
                            }
                          }
                        )
                      }
                    )
                  ] }),
                  /* @__PURE__ */ jsx(Text, { variant: "headingMd", as: "h3", alignment: "center", children: "REVEAL YOUR COUPON" }),
                  /* @__PURE__ */ jsxs(InlineStack, { gap: "300", align: "center", children: [
                    /* @__PURE__ */ jsx(Button, { onClick: () => handleCreateGame("reveal"), children: "Game Create" }),
                    /* @__PURE__ */ jsx(Button, { plain: true, onClick: () => handlePreview("reveal"), children: "Preview" })
                  ] })
                ] })
              }
            ) })
          ] })
        ] })
      ]
    }
  ) });
}
const route62 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: NewCampaign,
  loader: loader$3
}, Symbol.toStringTag, { value: "Module" }));
function Page$2() {
  return /* @__PURE__ */ jsx("div", { children: "Page" });
}
const route63 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Page$2
}, Symbol.toStringTag, { value: "Module" }));
const loader$2 = async ({ request }) => {
  await authenticate.admin(request);
  return null;
};
function Subscribers() {
  const [selected, setSelected] = useState(0);
  const [modalActive, setModalActive] = useState(false);
  const [importModalActive, setImportModalActive] = useState(false);
  const [searchValue, setSearchValue] = useState("");
  const [filterPopoverActive, setFilterPopoverActive] = useState(false);
  const [sortPopoverActive, setSortPopoverActive] = useState(false);
  const [selectedTags, setSelectedTags] = useState([]);
  const [tagInputValue, setTagInputValue] = useState("");
  const handleTabChange = useCallback((selectedTabIndex) => {
    setSelected(selectedTabIndex);
  }, []);
  const handleTagInputChange = useCallback((value) => {
    setTagInputValue(value);
  }, []);
  const handleAddTag = useCallback(() => {
    if (tagInputValue && !selectedTags.includes(tagInputValue)) {
      setSelectedTags([...selectedTags, tagInputValue]);
      setTagInputValue("");
    }
  }, [tagInputValue, selectedTags]);
  const handleRemoveTag = useCallback(
    (tag) => {
      setSelectedTags(selectedTags.filter((t) => t !== tag));
    },
    [selectedTags]
  );
  const tabs = [
    {
      id: "all-subscribers",
      content: "All",
      accessibilityLabel: "All subscribers",
      panelID: "all-subscribers-content"
    },
    {
      id: "active-subscribers",
      content: "Active",
      accessibilityLabel: "Active subscribers",
      panelID: "active-subscribers-content"
    },
    {
      id: "unsubscribed",
      content: "Unsubscribed",
      accessibilityLabel: "Unsubscribed",
      panelID: "unsubscribed-content"
    }
  ];
  const subscriberData = [
    [
      /* @__PURE__ */ jsxs(InlineStack, { gap: "200", align: "center", children: [
        /* @__PURE__ */ jsx(Avatar, { customer: true, size: "small", name: "John Doe" }),
        /* @__PURE__ */ jsx(Text, { variant: "bodyMd", fontWeight: "semibold", children: "John Doe" })
      ] }),
      "john.doe@example.com",
      /* @__PURE__ */ jsx(Badge, { status: "success", children: "Active" }),
      "Jun 15, 2023",
      /* @__PURE__ */ jsxs(InlineStack, { gap: "100", children: [
        /* @__PURE__ */ jsx(Tag, { children: "Customer" }),
        /* @__PURE__ */ jsx(Tag, { children: "VIP" })
      ] })
    ],
    [
      /* @__PURE__ */ jsxs(InlineStack, { gap: "200", align: "center", children: [
        /* @__PURE__ */ jsx(Avatar, { customer: true, size: "small", name: "Jane Smith" }),
        /* @__PURE__ */ jsx(Text, { variant: "bodyMd", fontWeight: "semibold", children: "Jane Smith" })
      ] }),
      "jane.smith@example.com",
      /* @__PURE__ */ jsx(Badge, { status: "success", children: "Active" }),
      "Jul 22, 2023",
      /* @__PURE__ */ jsx(InlineStack, { gap: "100", children: /* @__PURE__ */ jsx(Tag, { children: "Customer" }) })
    ],
    [
      /* @__PURE__ */ jsxs(InlineStack, { gap: "200", align: "center", children: [
        /* @__PURE__ */ jsx(Avatar, { customer: true, size: "small", name: "Robert Johnson" }),
        /* @__PURE__ */ jsx(Text, { variant: "bodyMd", fontWeight: "semibold", children: "Robert Johnson" })
      ] }),
      "robert.j@example.com",
      /* @__PURE__ */ jsx(Badge, { status: "success", children: "Active" }),
      "Aug 5, 2023",
      /* @__PURE__ */ jsx(InlineStack, { gap: "100", children: /* @__PURE__ */ jsx(Tag, { children: "New" }) })
    ],
    [
      /* @__PURE__ */ jsxs(InlineStack, { gap: "200", align: "center", children: [
        /* @__PURE__ */ jsx(Avatar, { customer: true, size: "small", name: "Emily Wilson" }),
        /* @__PURE__ */ jsx(Text, { variant: "bodyMd", fontWeight: "semibold", children: "Emily Wilson" })
      ] }),
      "emily.wilson@example.com",
      /* @__PURE__ */ jsx(Badge, { status: "critical", children: "Unsubscribed" }),
      "Sep 12, 2023",
      /* @__PURE__ */ jsx(InlineStack, { gap: "100", children: /* @__PURE__ */ jsx(Tag, { children: "Former" }) })
    ],
    [
      /* @__PURE__ */ jsxs(InlineStack, { gap: "200", align: "center", children: [
        /* @__PURE__ */ jsx(Avatar, { customer: true, size: "small", name: "Michael Brown" }),
        /* @__PURE__ */ jsx(Text, { variant: "bodyMd", fontWeight: "semibold", children: "Michael Brown" })
      ] }),
      "michael.brown@example.com",
      /* @__PURE__ */ jsx(Badge, { status: "success", children: "Active" }),
      "Oct 3, 2023",
      /* @__PURE__ */ jsxs(InlineStack, { gap: "100", children: [
        /* @__PURE__ */ jsx(Tag, { children: "Customer" }),
        /* @__PURE__ */ jsx(Tag, { children: "Engaged" })
      ] })
    ]
  ];
  return /* @__PURE__ */ jsxs(AdminLayout, { children: [
    /* @__PURE__ */ jsxs(
      Page$5,
      {
        title: "Subscribers",
        primaryAction: {
          content: "Add subscriber",
          onAction: () => setModalActive(true)
        },
        secondaryActions: [
          {
            content: "Import",
            icon: ImportIcon,
            onAction: () => setImportModalActive(true)
          },
          {
            content: "Export",
            icon: ExportIcon,
            onAction: () => console.log("Export action")
          }
        ],
        children: [
          /* @__PURE__ */ jsx(_r, { title: "Subscribers" }),
          /* @__PURE__ */ jsxs(BlockStack, { gap: "500", children: [
            /* @__PURE__ */ jsx(Layout, { children: /* @__PURE__ */ jsx(Layout.Section, { children: /* @__PURE__ */ jsxs(InlineStack, { gap: "400", wrap: false, children: [
              /* @__PURE__ */ jsx(
                StatCard$1,
                {
                  title: "Total Subscribers",
                  value: "2,543",
                  icon: PersonIcon,
                  color: "#4B7DF3"
                }
              ),
              /* @__PURE__ */ jsx(
                StatCard$1,
                {
                  title: "Active",
                  value: "2,210",
                  icon: PersonIcon,
                  color: "#50B83C"
                }
              ),
              /* @__PURE__ */ jsx(
                StatCard$1,
                {
                  title: "Unsubscribed",
                  value: "333",
                  icon: PersonIcon,
                  color: "#DE3618"
                }
              ),
              /* @__PURE__ */ jsx(
                StatCard$1,
                {
                  title: "Growth Rate",
                  value: "+12.4%",
                  icon: PersonIcon,
                  color: "#9C6ADE"
                }
              )
            ] }) }) }),
            /* @__PURE__ */ jsx(Card, { padding: "0", children: /* @__PURE__ */ jsx(
              Tabs,
              {
                tabs,
                selected,
                onSelect: handleTabChange,
                fitted: true,
                children: /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsxs(BlockStack, { gap: "400", children: [
                  /* @__PURE__ */ jsxs(InlineStack, { gap: "200", align: "start", children: [
                    /* @__PURE__ */ jsx("div", { style: { flex: 1 }, children: /* @__PURE__ */ jsx(
                      TextField,
                      {
                        placeholder: "Search subscribers",
                        value: searchValue,
                        onChange: setSearchValue,
                        prefix: /* @__PURE__ */ jsx(Icon, { source: SearchIcon }),
                        clearButton: true,
                        onClearButtonClick: () => setSearchValue("")
                      }
                    ) }),
                    /* @__PURE__ */ jsx(
                      Popover2,
                      {
                        active: filterPopoverActive,
                        activator: /* @__PURE__ */ jsx(
                          Button,
                          {
                            icon: FilterIcon,
                            onClick: () => setFilterPopoverActive(!filterPopoverActive),
                            children: "Filter"
                          }
                        ),
                        onClose: () => setFilterPopoverActive(false),
                        children: /* @__PURE__ */ jsx(Popover2.Pane, { children: /* @__PURE__ */ jsx(Box, { padding: "400", children: /* @__PURE__ */ jsxs(BlockStack, { gap: "400", children: [
                          /* @__PURE__ */ jsx(Text, { variant: "headingSm", as: "h3", children: "Filter subscribers" }),
                          /* @__PURE__ */ jsx(
                            Select,
                            {
                              label: "Status",
                              options: [
                                { label: "All", value: "all" },
                                { label: "Active", value: "active" },
                                {
                                  label: "Unsubscribed",
                                  value: "unsubscribed"
                                }
                              ],
                              onChange: () => {
                              },
                              value: "all"
                            }
                          ),
                          /* @__PURE__ */ jsx(
                            TextField,
                            {
                              label: "Tags",
                              value: tagInputValue,
                              onChange: handleTagInputChange,
                              placeholder: "Add tags",
                              connectedRight: /* @__PURE__ */ jsx(
                                Button,
                                {
                                  onClick: handleAddTag,
                                  icon: PlusIcon
                                }
                              )
                            }
                          ),
                          selectedTags.length > 0 && /* @__PURE__ */ jsx(InlineStack, { gap: "100", wrap: true, children: selectedTags.map((tag) => /* @__PURE__ */ jsx(
                            Tag,
                            {
                              onRemove: () => handleRemoveTag(tag),
                              children: tag
                            },
                            tag
                          )) }),
                          /* @__PURE__ */ jsxs(InlineStack, { gap: "200", children: [
                            /* @__PURE__ */ jsx(
                              Button,
                              {
                                onClick: () => setFilterPopoverActive(false),
                                children: "Apply"
                              }
                            ),
                            /* @__PURE__ */ jsx(
                              Button,
                              {
                                variant: "plain",
                                onClick: () => setFilterPopoverActive(false),
                                children: "Cancel"
                              }
                            )
                          ] })
                        ] }) }) })
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      Popover2,
                      {
                        active: sortPopoverActive,
                        activator: /* @__PURE__ */ jsx(
                          Button,
                          {
                            icon: SortIcon,
                            onClick: () => setSortPopoverActive(!sortPopoverActive),
                            children: "Sort"
                          }
                        ),
                        onClose: () => setSortPopoverActive(false),
                        children: /* @__PURE__ */ jsx(Popover2.Pane, { children: /* @__PURE__ */ jsx(Box, { padding: "400", children: /* @__PURE__ */ jsxs(BlockStack, { gap: "200", children: [
                          /* @__PURE__ */ jsx(Text, { variant: "headingSm", as: "h3", children: "Sort by" }),
                          /* @__PURE__ */ jsx(
                            Button,
                            {
                              variant: "plain",
                              onClick: () => setSortPopoverActive(false),
                              children: "Name A-Z"
                            }
                          ),
                          /* @__PURE__ */ jsx(
                            Button,
                            {
                              variant: "plain",
                              onClick: () => setSortPopoverActive(false),
                              children: "Name Z-A"
                            }
                          ),
                          /* @__PURE__ */ jsx(
                            Button,
                            {
                              variant: "plain",
                              onClick: () => setSortPopoverActive(false),
                              children: "Date added (newest first)"
                            }
                          ),
                          /* @__PURE__ */ jsx(
                            Button,
                            {
                              variant: "plain",
                              onClick: () => setSortPopoverActive(false),
                              children: "Date added (oldest first)"
                            }
                          )
                        ] }) }) })
                      }
                    )
                  ] }),
                  subscriberData.length > 0 ? /* @__PURE__ */ jsxs(Fragment, { children: [
                    /* @__PURE__ */ jsx(
                      DataTable,
                      {
                        columnContentTypes: [
                          "text",
                          "text",
                          "text",
                          "text",
                          "text"
                        ],
                        headings: [
                          "Name",
                          "Email",
                          "Status",
                          "Date Added",
                          "Tags"
                        ],
                        rows: subscriberData
                      }
                    ),
                    /* @__PURE__ */ jsx(Box, { paddingBlockStart: "400", children: /* @__PURE__ */ jsx(InlineStack, { align: "center", distribute: "center", children: /* @__PURE__ */ jsx(
                      Pagination,
                      {
                        hasPrevious: true,
                        onPrevious: () => {
                          console.log("Previous");
                        },
                        hasNext: true,
                        onNext: () => {
                          console.log("Next");
                        }
                      }
                    ) }) })
                  ] }) : /* @__PURE__ */ jsx(
                    EmptyState,
                    {
                      heading: "Add your first subscriber",
                      action: {
                        content: "Add subscriber",
                        onAction: () => setModalActive(true)
                      },
                      image: "https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png",
                      children: /* @__PURE__ */ jsx("p", { children: "Start building your subscriber list to send targeted campaigns" })
                    }
                  )
                ] }) })
              }
            ) })
          ] })
        ]
      }
    ),
    /* @__PURE__ */ jsx(
      Modal,
      {
        open: modalActive,
        onClose: () => setModalActive(false),
        title: "Add new subscriber",
        primaryAction: {
          content: "Add",
          onAction: () => setModalActive(false)
        },
        secondaryActions: [
          {
            content: "Cancel",
            onAction: () => setModalActive(false)
          }
        ],
        children: /* @__PURE__ */ jsx(Modal.Section, { children: /* @__PURE__ */ jsxs(BlockStack, { gap: "400", children: [
          /* @__PURE__ */ jsx(TextField, { label: "First name", autoComplete: "off" }),
          /* @__PURE__ */ jsx(TextField, { label: "Last name", autoComplete: "off" }),
          /* @__PURE__ */ jsx(TextField, { label: "Email", type: "email", autoComplete: "off" }),
          /* @__PURE__ */ jsx(
            Select,
            {
              label: "Status",
              options: [
                { label: "Active", value: "active" },
                { label: "Unsubscribed", value: "unsubscribed" }
              ],
              onChange: () => {
              },
              value: "active"
            }
          ),
          /* @__PURE__ */ jsx(
            TextField,
            {
              label: "Tags",
              value: tagInputValue,
              onChange: handleTagInputChange,
              placeholder: "Add tags",
              connectedRight: /* @__PURE__ */ jsx(Button, { onClick: handleAddTag, icon: PlusIcon })
            }
          ),
          selectedTags.length > 0 && /* @__PURE__ */ jsx(InlineStack, { gap: "100", wrap: true, children: selectedTags.map((tag) => /* @__PURE__ */ jsx(Tag, { onRemove: () => handleRemoveTag(tag), children: tag }, tag)) })
        ] }) })
      }
    ),
    /* @__PURE__ */ jsx(
      Modal,
      {
        open: importModalActive,
        onClose: () => setImportModalActive(false),
        title: "Import subscribers",
        primaryAction: {
          content: "Import",
          onAction: () => setImportModalActive(false)
        },
        secondaryActions: [
          {
            content: "Cancel",
            onAction: () => setImportModalActive(false)
          }
        ],
        children: /* @__PURE__ */ jsx(Modal.Section, { children: /* @__PURE__ */ jsxs(BlockStack, { gap: "400", children: [
          /* @__PURE__ */ jsx(Text, { variant: "bodyMd", as: "p", children: "Import subscribers from a CSV file. The file should have the following columns: email, first_name, last_name, status, tags." }),
          /* @__PURE__ */ jsx(Button, { fullWidth: true, children: "Choose file" }),
          /* @__PURE__ */ jsxs(Text, { variant: "bodySm", as: "p", children: [
            "Download a",
            " ",
            /* @__PURE__ */ jsx(Button, { variant: "plain", size: "slim", children: "sample CSV template" })
          ] })
        ] }) })
      }
    )
  ] });
}
function StatCard$1({ title, value, icon, color }) {
  return /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsxs(BlockStack, { gap: "200", children: [
    /* @__PURE__ */ jsxs(InlineStack, { gap: "200", align: "center", children: [
      /* @__PURE__ */ jsx(
        Box,
        {
          style: { background: `${color}20` },
          borderRadius: "100",
          padding: "200",
          children: /* @__PURE__ */ jsx(Icon, { source: icon, color: "base" })
        }
      ),
      /* @__PURE__ */ jsx(Text, { variant: "bodyMd", color: "subdued", children: title })
    ] }),
    /* @__PURE__ */ jsx(Text, { variant: "headingLg", children: value })
  ] }) });
}
const route64 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Subscribers,
  loader: loader$2
}, Symbol.toStringTag, { value: "Module" }));
function AdditionalPage() {
  return /* @__PURE__ */ jsxs(Page$5, { children: [
    /* @__PURE__ */ jsx(_r, { title: "Additional page" }),
    /* @__PURE__ */ jsxs(Layout, { children: [
      /* @__PURE__ */ jsx(Layout.Section, { children: /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsxs(BlockStack, { gap: "300", children: [
        /* @__PURE__ */ jsxs(Text, { as: "p", variant: "bodyMd", children: [
          "The app template comes with an additional page which demonstrates how to create multiple pages within app navigation using",
          " ",
          /* @__PURE__ */ jsx(
            Link,
            {
              url: "https://shopify.dev/docs/apps/tools/app-bridge",
              target: "_blank",
              removeUnderline: true,
              children: "App Bridge"
            }
          ),
          "."
        ] }),
        /* @__PURE__ */ jsxs(Text, { as: "p", variant: "bodyMd", children: [
          "To create your own page and have it show up in the app navigation, add a page inside ",
          /* @__PURE__ */ jsx(Code, { children: "app/routes" }),
          ", and a link to it in the ",
          /* @__PURE__ */ jsx(Code, { children: "<NavMenu>" }),
          " component found in ",
          /* @__PURE__ */ jsx(Code, { children: "app/routes/app.jsx" }),
          "."
        ] })
      ] }) }) }),
      /* @__PURE__ */ jsx(Layout.Section, { variant: "oneThird", children: /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsxs(BlockStack, { gap: "200", children: [
        /* @__PURE__ */ jsx(Text, { as: "h2", variant: "headingMd", children: "Resources" }),
        /* @__PURE__ */ jsx(List, { children: /* @__PURE__ */ jsx(List.Item, { children: /* @__PURE__ */ jsx(
          Link,
          {
            url: "https://shopify.dev/docs/apps/design-guidelines/navigation#app-nav",
            target: "_blank",
            removeUnderline: true,
            children: "App nav best practices"
          }
        ) }) })
      ] }) }) })
    ] })
  ] });
}
function Code({ children }) {
  return /* @__PURE__ */ jsx(
    Box,
    {
      as: "span",
      padding: "025",
      paddingInlineStart: "100",
      paddingInlineEnd: "100",
      background: "bg-surface-active",
      borderWidth: "025",
      borderColor: "border",
      borderRadius: "100",
      children: /* @__PURE__ */ jsx("code", { children })
    }
  );
}
const route65 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: AdditionalPage
}, Symbol.toStringTag, { value: "Module" }));
function Page$1() {
  return /* @__PURE__ */ jsx("div", { children: "Page" });
}
const route66 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Page$1
}, Symbol.toStringTag, { value: "Module" }));
function Page() {
  return /* @__PURE__ */ jsx("div", { children: "Page" });
}
const route67 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Page
}, Symbol.toStringTag, { value: "Module" }));
function Billing() {
  return /* @__PURE__ */ jsx(Page$5, { title: "Billing", children: /* @__PURE__ */ jsx(Layout, { children: /* @__PURE__ */ jsx(Layout.Section, { children: /* @__PURE__ */ jsx(
    Button,
    {
      target: "_top",
      url: "https://admin.shopify.com/store/wheel-of-wonders/charges/spinorama/pricing_plans",
      children: "View Plan"
    }
  ) }) }) });
}
const route68 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Billing
}, Symbol.toStringTag, { value: "Module" }));
const loader$1 = async ({ request }) => {
  await authenticate.admin(request);
  return null;
};
function Revenue() {
  const [timeframe, setTimeframe] = useState("30d");
  const handleTimeframeChange = useCallback((value) => {
    setTimeframe(value);
  }, []);
  const revenueData = [
    ["Summer Sale Campaign", "Jun 15, 2023", "2,210", "$8,450", "$3.82"],
    ["New Product Launch", "Jul 22, 2023", "1,830", "$12,350", "$6.75"],
    ["Customer Feedback Survey", "Aug 5, 2023", "1,540", "$5,230", "$3.40"],
    ["Holiday Special Offer", "Dec 1, 2022", "2,850", "$18,720", "$6.57"],
    ["Back to School Promotion", "Aug 25, 2022", "1,920", "$9,340", "$4.86"]
  ];
  return /* @__PURE__ */ jsx(AdminLayout, { children: /* @__PURE__ */ jsxs(
    Page$5,
    {
      title: "Revenue",
      primaryAction: {
        content: "Export report",
        onAction: () => console.log("Export report")
      },
      children: [
        /* @__PURE__ */ jsx(_r, { title: "Revenue" }),
        /* @__PURE__ */ jsxs(BlockStack, { gap: "500", children: [
          /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsxs(InlineStack, { align: "space-between", children: [
            /* @__PURE__ */ jsx(Text, { variant: "headingMd", as: "h2", children: "Revenue Overview" }),
            /* @__PURE__ */ jsx(
              Select,
              {
                label: "Time period",
                labelInline: true,
                options: [
                  { label: "Last 7 days", value: "7d" },
                  { label: "Last 30 days", value: "30d" },
                  { label: "Last 90 days", value: "90d" },
                  { label: "Last 12 months", value: "12m" },
                  { label: "Year to date", value: "ytd" },
                  { label: "All time", value: "all" }
                ],
                onChange: handleTimeframeChange,
                value: timeframe
              }
            )
          ] }) }),
          /* @__PURE__ */ jsx(Layout, { children: /* @__PURE__ */ jsx(Layout.Section, { children: /* @__PURE__ */ jsxs(InlineStack, { gap: "400", wrap: false, children: [
            /* @__PURE__ */ jsx(
              StatCard,
              {
                title: "Total Revenue",
                value: "$54,090",
                trend: "+18%",
                trendDirection: "up",
                icon: FinanceIcon,
                color: "#4B7DF3"
              }
            ),
            /* @__PURE__ */ jsx(
              StatCard,
              {
                title: "Avg. Order Value",
                value: "$85.32",
                trend: "+5.2%",
                trendDirection: "up",
                icon: OrderIcon,
                color: "#F49342"
              }
            ),
            /* @__PURE__ */ jsx(
              StatCard,
              {
                title: "Revenue per Subscriber",
                value: "$21.27",
                trend: "+3.8%",
                trendDirection: "up",
                icon: PersonIcon,
                color: "#50B83C"
              }
            ),
            /* @__PURE__ */ jsx(
              StatCard,
              {
                title: "Conversion Rate",
                value: "3.2%",
                trend: "-0.5%",
                trendDirection: "down",
                icon: ChartVerticalIcon,
                color: "#9C6ADE"
              }
            )
          ] }) }) }),
          /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsxs(BlockStack, { gap: "400", children: [
            /* @__PURE__ */ jsx(Text, { variant: "headingMd", as: "h2", children: "Revenue Trend" }),
            /* @__PURE__ */ jsx(
              Box,
              {
                height: "300px",
                background: "bg-surface-secondary",
                borderRadius: "100",
                children: /* @__PURE__ */ jsx(
                  InlineStack,
                  {
                    align: "center",
                    distribute: "center",
                    blockAlign: "center",
                    height: "100%",
                    children: /* @__PURE__ */ jsx(Text, { variant: "bodyMd", color: "subdued", children: "Revenue chart visualization would appear here" })
                  }
                )
              }
            )
          ] }) }),
          /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsxs(BlockStack, { gap: "400", children: [
            /* @__PURE__ */ jsx(Text, { variant: "headingMd", as: "h2", children: "Campaign Revenue" }),
            /* @__PURE__ */ jsx(
              DataTable,
              {
                columnContentTypes: [
                  "text",
                  "text",
                  "numeric",
                  "numeric",
                  "numeric"
                ],
                headings: [
                  "Campaign",
                  "Date",
                  "Recipients",
                  "Revenue",
                  "Revenue/Recipient"
                ],
                rows: revenueData
              }
            ),
            /* @__PURE__ */ jsx(Box, { paddingBlockStart: "400", children: /* @__PURE__ */ jsx(InlineStack, { align: "center", distribute: "center", children: /* @__PURE__ */ jsx(
              Pagination,
              {
                hasPrevious: true,
                onPrevious: () => {
                  console.log("Previous");
                },
                hasNext: true,
                onNext: () => {
                  console.log("Next");
                }
              }
            ) }) })
          ] }) }),
          /* @__PURE__ */ jsxs(Layout, { children: [
            /* @__PURE__ */ jsx(Layout.Section, { oneHalf: true, children: /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsxs(BlockStack, { gap: "400", children: [
              /* @__PURE__ */ jsx(Text, { variant: "headingMd", as: "h2", children: "Revenue by Source" }),
              /* @__PURE__ */ jsx(
                Box,
                {
                  height: "250px",
                  background: "bg-surface-secondary",
                  borderRadius: "100",
                  children: /* @__PURE__ */ jsx(
                    InlineStack,
                    {
                      align: "center",
                      distribute: "center",
                      blockAlign: "center",
                      height: "100%",
                      children: /* @__PURE__ */ jsx(Text, { variant: "bodyMd", color: "subdued", children: "Pie chart visualization would appear here" })
                    }
                  )
                }
              )
            ] }) }) }),
            /* @__PURE__ */ jsx(Layout.Section, { oneHalf: true, children: /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsxs(BlockStack, { gap: "400", children: [
              /* @__PURE__ */ jsx(Text, { variant: "headingMd", as: "h2", children: "Revenue by Product Category" }),
              /* @__PURE__ */ jsx(
                Box,
                {
                  height: "250px",
                  background: "bg-surface-secondary",
                  borderRadius: "100",
                  children: /* @__PURE__ */ jsx(
                    InlineStack,
                    {
                      align: "center",
                      distribute: "center",
                      blockAlign: "center",
                      height: "100%",
                      children: /* @__PURE__ */ jsx(Text, { variant: "bodyMd", color: "subdued", children: "Bar chart visualization would appear here" })
                    }
                  )
                }
              )
            ] }) }) })
          ] }),
          /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsxs(BlockStack, { gap: "400", children: [
            /* @__PURE__ */ jsx(Text, { variant: "headingMd", as: "h2", children: "Reports" }),
            /* @__PURE__ */ jsxs(InlineStack, { gap: "400", wrap: true, children: [
              /* @__PURE__ */ jsx(Button, { icon: PageIcon, children: "Revenue summary" }),
              /* @__PURE__ */ jsx(Button, { icon: PageIcon, children: "Campaign performance" }),
              /* @__PURE__ */ jsx(Button, { icon: PageIcon, children: "Subscriber value" }),
              /* @__PURE__ */ jsx(Button, { icon: PageIcon, children: "Custom report" })
            ] })
          ] }) })
        ] })
      ]
    }
  ) });
}
function StatCard({ title, value, trend, trendDirection, icon, color }) {
  return /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsxs(BlockStack, { gap: "200", children: [
    /* @__PURE__ */ jsxs(InlineStack, { gap: "200", align: "center", children: [
      /* @__PURE__ */ jsx(
        Box,
        {
          style: { background: `${color}20` },
          borderRadius: "100",
          padding: "200",
          children: /* @__PURE__ */ jsx(Icon, { source: icon, color: "base" })
        }
      ),
      /* @__PURE__ */ jsx(Text, { variant: "bodyMd", color: "subdued", children: title })
    ] }),
    /* @__PURE__ */ jsxs(InlineStack, { gap: "200", align: "baseline", children: [
      /* @__PURE__ */ jsx(Text, { variant: "headingLg", children: value }),
      /* @__PURE__ */ jsx(
        Text,
        {
          variant: "bodySm",
          color: trendDirection === "up" ? "success" : "critical",
          children: trend
        }
      )
    ] })
  ] }) });
}
const route69 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Revenue,
  loader: loader$1
}, Symbol.toStringTag, { value: "Module" }));
async function loader({ request }) {
  var _a2, _b, _c, _d, _e;
  try {
    const { admin, session } = await authenticate.admin(request);
    const { shop } = session;
    console.log("App - Authenticated with shop:", shop);
    const discountCodes = [];
    const isDevelopment = process.env.NODE_ENV === "production";
    const subscriptionStatus = await hasActiveSubscription(
      admin.graphql,
      shop,
      isDevelopment
    );
    console.log("App - Subscription status:", subscriptionStatus);
    await createSubscriptionMetafield(
      admin.graphql,
      subscriptionStatus.hasSubscription,
      shop
    );
    if (isDevelopment) {
    }
    try {
      const discountCode = await getDiscountCodes(admin.graphql);
      const nodes = ((_b = (_a2 = discountCode == null ? void 0 : discountCode.data) == null ? void 0 : _a2.discountNodes) == null ? void 0 : _b.edges) || [];
      for (const { node } of nodes) {
        const discount = node.discount;
        const title = (discount == null ? void 0 : discount.title) || "N/A";
        const summary = (discount == null ? void 0 : discount.summary) || "N/A";
        if (((_d = (_c = discount == null ? void 0 : discount.codes) == null ? void 0 : _c.edges) == null ? void 0 : _d.length) > 0) {
          for (const codeEdge of discount.codes.edges) {
            const code = ((_e = codeEdge == null ? void 0 : codeEdge.node) == null ? void 0 : _e.code) || "N/A";
            discountCodes.push({ title, summary, code });
          }
        } else {
          discountCodes.push({ title, summary, code: null });
        }
      }
    } catch (discountError) {
      console.log(
        "App - Could not fetch discount codes:",
        discountError.message
      );
    }
    const subscriptions = await getSubscriptionStatus(admin.graphql);
    const activeSubscriptions = subscriptions.data.app.installation.activeSubscriptions;
    console.log("App - Active subscriptions:", activeSubscriptions);
    if (activeSubscriptions.length > 0) {
      console.log("has active subscription", activeSubscriptions);
    } else {
      let shopFormatted = shop.replace(/\.myshopify\.com$/i, "");
      console.log("No active subscription found for shop maha:", shopFormatted);
      return redirect(
        `https://admin.shopify.com/store/${shopFormatted}/charges/spinorama/pricing_plans`
      );
    }
    let activeCampaign = null;
    try {
      activeCampaign = await getActiveCampaign(shop);
      if (activeCampaign && subscriptionStatus.hasSubscription) {
        await syncActiveCampaignToMetafields(admin.graphql, shop);
      }
    } catch (campaignError) {
      console.log(
        "App - Could not fetch/sync campaign:",
        campaignError.message
      );
    }
    return json({
      apiKey: process.env.SHOPIFY_API_KEY || "",
      mongoDbUri: !!process.env.MONGODB_URI,
      shop,
      shopFormatted: shop.replace(/\.myshopify\.com$/i, ""),
      isAuthenticated: true,
      hasActiveSubscription: subscriptionStatus.hasSubscription,
      needsSubscription: !subscriptionStatus.hasSubscription,
      hasCampaign: !!activeCampaign,
      discountCodes,
      fallbackMode: false,
      subscriptionPlan: subscriptionStatus.plan,
      subscriptionSource: subscriptionStatus.source,
      isDevelopment
    });
  } catch (error) {
    console.error("App - Loader error:", error);
    const url = new URL(request.url);
    const shop = url.searchParams.get("shop");
    if (shop) {
      return Response.redirect(`/auth?shop=${shop}`, 302);
    }
    return json(
      {
        error: "Authentication failed",
        message: error.message,
        isAuthenticated: false,
        hasActiveSubscription: false,
        needsSubscription: true,
        shop: "unknown-shop",
        shopFormatted: "unknown-shop"
      },
      { status: 401 }
    );
  }
}
function App() {
  var _a2;
  const { currentPlan, discountCodes, setDiscountCodes } = usePlan();
  const data = useLoaderData();
  useEffect(() => {
    var _a3;
    if ((_a3 = data == null ? void 0 : data.discountCodes) == null ? void 0 : _a3.length) {
      setDiscountCodes(data.discountCodes);
    }
  }, [data, setDiscountCodes]);
  if (data.isDevelopment) {
    return /* @__PURE__ */ jsxs("div", { className: "container mx-auto px-4 py-6", children: [
      /* @__PURE__ */ jsx(Navigation2, {}),
      /* @__PURE__ */ jsxs("div", { className: "mt-8", children: [
        /* @__PURE__ */ jsx("div", { className: "bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6", children: /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
          /* @__PURE__ */ jsx(
            "svg",
            {
              className: "w-6 h-6 text-blue-600 mr-3",
              fill: "none",
              stroke: "currentColor",
              viewBox: "0 0 24 24",
              children: /* @__PURE__ */ jsx(
                "path",
                {
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: "2",
                  d: "M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                }
              )
            }
          ),
          /* @__PURE__ */ jsxs("div", { children: [
            /* @__PURE__ */ jsx("h3", { className: "text-lg font-semibold text-blue-800", children: "Development Mode" }),
            /* @__PURE__ */ jsxs("p", { className: "text-blue-700 mt-1", children: [
              "Subscription Status: ",
              data.subscriptionSource,
              " | Has Subscription:",
              " ",
              data.hasActiveSubscription ? "✅ Yes" : "❌ No"
            ] }),
            /* @__PURE__ */ jsx("p", { className: "text-blue-600 text-sm mt-2", children: "In development, subscription is simulated. To test without subscription, modify the hasActiveSubscription function in Subscription.server.js" })
          ] })
        ] }) }),
        /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg shadow-sm p-8", children: [
          /* @__PURE__ */ jsx("h1", { className: "text-3xl font-bold mb-4", children: "Spinorama - Development" }),
          /* @__PURE__ */ jsx("p", { className: "text-gray-600 mb-6", children: "You're in development mode. The app is simulating an active subscription for testing." }),
          /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6 mb-8", children: [
            /* @__PURE__ */ jsxs("div", { className: "bg-green-50 p-6 rounded-lg", children: [
              /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold mb-2", children: "Test Campaign" }),
              /* @__PURE__ */ jsx("p", { className: "text-gray-600 mb-4", children: "Create a test campaign to see how it works." }),
              /* @__PURE__ */ jsx(
                Link$1,
                {
                  to: "/campaigns/create",
                  className: "bg-green-600 text-white px-4 py-2 rounded-lg inline-block hover:bg-green-700 transition-colors",
                  children: "Create Test Campaign"
                }
              )
            ] }),
            /* @__PURE__ */ jsxs("div", { className: "bg-purple-50 p-6 rounded-lg", children: [
              /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold mb-2", children: "View Campaigns" }),
              /* @__PURE__ */ jsx("p", { className: "text-gray-600 mb-4", children: "See all your test campaigns." }),
              /* @__PURE__ */ jsx(
                Link$1,
                {
                  to: "/campaigns",
                  className: "bg-purple-600 text-white px-4 py-2 rounded-lg inline-block hover:bg-purple-700 transition-colors",
                  children: "View Campaigns"
                }
              )
            ] })
          ] })
        ] })
      ] })
    ] });
  }
  if (data.needsSubscription || !data.hasActiveSubscription) {
    return /* @__PURE__ */ jsxs("div", { className: "container mx-auto px-4 py-6", children: [
      /* @__PURE__ */ jsx(Navigation2, {}),
      /* @__PURE__ */ jsxs("div", { className: "mt-8", children: [
        /* @__PURE__ */ jsx("div", { className: "bg-yellow-50 border border-yellow-200 rounded-lg p-6 mb-6", children: /* @__PURE__ */ jsxs("div", { className: "flex items-center", children: [
          /* @__PURE__ */ jsx(
            "svg",
            {
              className: "w-6 h-6 text-yellow-600 mr-3",
              fill: "none",
              stroke: "currentColor",
              viewBox: "0 0 24 24",
              children: /* @__PURE__ */ jsx(
                "path",
                {
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: "2",
                  d: "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
                }
              )
            }
          ),
          /* @__PURE__ */ jsxs("div", { children: [
            /* @__PURE__ */ jsx("h3", { className: "text-lg font-semibold text-yellow-800", children: "Subscription Required" }),
            /* @__PURE__ */ jsx("p", { className: "text-yellow-700 mt-1", children: "Please subscribe to unlock all features of Spinorama." })
          ] })
        ] }) }),
        /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg shadow-sm p-8 text-center", children: [
          /* @__PURE__ */ jsx("h1", { className: "text-3xl font-bold mb-4", children: "Welcome to Spinorama" }),
          /* @__PURE__ */ jsx("p", { className: "text-gray-600 mb-6", children: "Subscribe to unlock powerful spin-to-win campaigns for your Shopify store." }),
          /* @__PURE__ */ jsxs("div", { className: "bg-gradient-to-r from-indigo-500 to-purple-600 text-white p-6 rounded-lg mb-6", children: [
            /* @__PURE__ */ jsx("h2", { className: "text-xl font-bold mb-2", children: "Premium Features" }),
            /* @__PURE__ */ jsxs("ul", { className: "text-left space-y-2", children: [
              /* @__PURE__ */ jsx("li", { children: "✓ 20 spin-to-win campaigns" }),
              /* @__PURE__ */ jsx("li", { children: "✓ Email collection & analytics" }),
              /* @__PURE__ */ jsx("li", { children: "✓ Customizable wheels and rewards" }),
              /* @__PURE__ */ jsx("li", { children: "✓ Lead collection with discounts" }),
              /* @__PURE__ */ jsx("li", { children: "✓ Engaging spin popups" })
            ] })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "space-y-4", children: [
            /* @__PURE__ */ jsx("p", { className: "text-gray-600", children: "Visit the Shopify App Store to subscribe." }),
            /* @__PURE__ */ jsx(
              "a",
              {
                href: `https://admin.shopify.com/store/wheel-of-wonders/charges/spinorama/pricing_plans`,
                target: "_top",
                className: "bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition-colors inline-block",
                children: "Subscribe Now"
              }
            )
          ] })
        ] })
      ] })
    ] });
  }
  return /* @__PURE__ */ jsxs("div", { className: "container mx-auto px-4 py-6", children: [
    /* @__PURE__ */ jsx(Navigation2, {}),
    /* @__PURE__ */ jsx("div", { className: "mt-8", children: /* @__PURE__ */ jsxs("div", { className: "bg-white rounded-lg shadow-sm p-8", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex justify-between items-center mb-4", children: [
        /* @__PURE__ */ jsx("h1", { className: "text-3xl font-bold", children: "Welcome to Spinorama" }),
        /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-4", children: [
          /* @__PURE__ */ jsxs("div", { className: "text-sm text-gray-600", children: [
            "Shop:",
            " ",
            /* @__PURE__ */ jsx("span", { className: "font-semibold", children: data.shopFormatted })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium", children: [
            "✓ Subscribed (",
            data.subscriptionSource,
            ")"
          ] })
        ] })
      ] }),
      /* @__PURE__ */ jsx("p", { className: "text-gray-600 mb-6", children: "Create engaging spin-to-win campaigns for your Shopify store to boost conversions and customer engagement." }),
      /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6 mb-8", children: [
        /* @__PURE__ */ jsxs("div", { className: "bg-indigo-50 p-6 rounded-lg", children: [
          /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold mb-2", children: "Current Plan" }),
          /* @__PURE__ */ jsx("p", { className: "text-indigo-600 font-bold text-2xl mb-1", children: ((_a2 = data.subscriptionPlan) == null ? void 0 : _a2.name) || "Monthly Plan" }),
          /* @__PURE__ */ jsx("p", { className: "text-gray-500 mb-4", children: "20 campaigns allowed" })
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "bg-green-50 p-6 rounded-lg", children: [
          /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold mb-2", children: "Quick Start" }),
          /* @__PURE__ */ jsx("p", { className: "text-gray-600 mb-4", children: "Create your first campaign in minutes." }),
          /* @__PURE__ */ jsx(
            Link$1,
            {
              to: "/campaigns/create",
              className: "bg-green-600 text-white px-4 py-2 rounded-lg inline-block hover:bg-green-700 transition-colors",
              children: "Create Campaign"
            }
          )
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "bg-purple-50 p-6 rounded-lg", children: [
          /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold mb-2", children: "View Campaigns" }),
          /* @__PURE__ */ jsx("p", { className: "text-gray-600 mb-4", children: "Manage your existing campaigns." }),
          /* @__PURE__ */ jsx(
            Link$1,
            {
              to: "/campaigns",
              className: "bg-purple-600 text-white px-4 py-2 rounded-lg inline-block hover:bg-purple-700 transition-colors",
              children: "View Campaigns"
            }
          )
        ] })
      ] })
    ] }) })
  ] });
}
const route70 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: App,
  loader
}, Symbol.toStringTag, { value: "Module" }));
const serverManifest = { "entry": { "module": "/assets/entry.client-C8za1OE1.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/index-Crcs4hqE.js", "/assets/index-DjMk7jIJ.js", "/assets/components-CJ4Us95c.js", "/assets/_commonjsHelpers-gnU0ypJ3.js"], "css": [] }, "routes": { "root": { "id": "root", "parentId": void 0, "path": "", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/root-NidQMtHb.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/index-Crcs4hqE.js", "/assets/index-DjMk7jIJ.js", "/assets/components-CJ4Us95c.js", "/assets/_commonjsHelpers-gnU0ypJ3.js"], "css": [] }, "routes/api.update-campaign-metafields": { "id": "routes/api.update-campaign-metafields", "parentId": "root", "path": "api/update-campaign-metafields", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.update-campaign-metafields-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.sync-campaign-metafields": { "id": "routes/api.sync-campaign-metafields", "parentId": "root", "path": "api/sync-campaign-metafields", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.sync-campaign-metafields-ChG-6rmU.js", "imports": [], "css": [] }, "routes/webhooks[.]app[.]uninstalled": { "id": "routes/webhooks[.]app[.]uninstalled", "parentId": "root", "path": "webhooks.app.uninstalled", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/webhooks_._app_._uninstalled-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.direct-campaign-data": { "id": "routes/api.direct-campaign-data", "parentId": "root", "path": "api/direct-campaign-data", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.direct-campaign-data-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.direct-campaign-save": { "id": "routes/api.direct-campaign-save", "parentId": "root", "path": "api/direct-campaign-save", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.direct-campaign-save-BXt4MBUm.js", "imports": ["/assets/index-CRk6jtUA.js", "/assets/_commonjsHelpers-gnU0ypJ3.js"], "css": [] }, "routes/api.get-active-campaign": { "id": "routes/api.get-active-campaign", "parentId": "root", "path": "api/get-active-campaign", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.get-active-campaign-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/CUSTOMERS_DATA_REQUEST": { "id": "routes/CUSTOMERS_DATA_REQUEST", "parentId": "root", "path": "CUSTOMERS_DATA_REQUEST", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/CUSTOMERS_DATA_REQUEST-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.test-db-connection": { "id": "routes/api.test-db-connection", "parentId": "root", "path": "api/test-db-connection", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.test-db-connection-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.test-subscription": { "id": "routes/api.test-subscription", "parentId": "root", "path": "api/test-subscription", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.test-subscription-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.update-metafields": { "id": "routes/api.update-metafields", "parentId": "root", "path": "api/update-metafields", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.update-metafields-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.debug-metafeilds": { "id": "routes/api.debug-metafeilds", "parentId": "root", "path": "api/debug-metafeilds", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.debug-metafeilds-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.active-campaign": { "id": "routes/api.active-campaign", "parentId": "root", "path": "api/active-campaign", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.active-campaign-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.billing.current": { "id": "routes/api.billing.current", "parentId": "root", "path": "api/billing/current", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.billing.current-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.embedded-script": { "id": "routes/api.embedded-script", "parentId": "root", "path": "api/embedded-script", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.embedded-script-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.billing.cancel": { "id": "routes/api.billing.cancel", "parentId": "root", "path": "api/billing/cancel", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.billing.cancel-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.billing.create": { "id": "routes/api.billing.create", "parentId": "root", "path": "api/billing/create", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.billing.create-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.direct-db-test": { "id": "routes/api.direct-db-test", "parentId": "root", "path": "api/direct-db-test", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.direct-db-test-CEFzMNQl.js", "imports": ["/assets/index-CRk6jtUA.js", "/assets/_commonjsHelpers-gnU0ypJ3.js"], "css": [] }, "routes/api.discount-codes": { "id": "routes/api.discount-codes", "parentId": "root", "path": "api/discount-codes", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.discount-codes-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.serve-campaign": { "id": "routes/api.serve-campaign", "parentId": "root", "path": "api/serve-campaign", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.serve-campaign-ChG-6rmU.js", "imports": [], "css": [] }, "routes/api.redeem-coupon": { "id": "routes/api.redeem-coupon", "parentId": "root", "path": "api/redeem-coupon", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.redeem-coupon-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.sync-campaign": { "id": "routes/api.sync-campaign", "parentId": "root", "path": "api/sync-campaign", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.sync-campaign-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/CUSTOMERS_REDACT": { "id": "routes/CUSTOMERS_REDACT", "parentId": "root", "path": "CUSTOMERS_REDACT", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/CUSTOMERS_REDACT-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.wheel-config": { "id": "routes/api.wheel-config", "parentId": "root", "path": "api/wheel-config", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.wheel-config-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/billing.callback": { "id": "routes/billing.callback", "parentId": "root", "path": "billing/callback", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/billing.callback-DHjlUkH5.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js"], "css": [] }, "routes/api.save-result": { "id": "routes/api.save-result", "parentId": "root", "path": "api/save-result", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.save-result-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.spin-result": { "id": "routes/api.spin-result", "parentId": "root", "path": "api/spin-result", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.spin-result-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/create-campaign": { "id": "routes/create-campaign", "parentId": "root", "path": "create-campaign", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/create-campaign-ChG-6rmU.js", "imports": [], "css": [] }, "routes/api.save-email": { "id": "routes/api.save-email", "parentId": "root", "path": "api/save-email", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.save-email-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.campaigns": { "id": "routes/api.campaigns", "parentId": "root", "path": "api/campaigns", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.campaigns-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.campaigns.status.$id": { "id": "routes/api.campaigns.status.$id", "parentId": "routes/api.campaigns", "path": "status/:id", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.campaigns.status._id-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.campaigns.toggle": { "id": "routes/api.campaigns.toggle", "parentId": "routes/api.campaigns", "path": "toggle", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.campaigns.toggle-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.campaigns.$id": { "id": "routes/api.campaigns.$id", "parentId": "routes/api.campaigns", "path": ":id", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.campaigns._id-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.db-status": { "id": "routes/api.db-status", "parentId": "root", "path": "api/db-status", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.db-status-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/api.campaign": { "id": "routes/api.campaign", "parentId": "root", "path": "api/campaign", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.campaign-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/SHOP_REDACT": { "id": "routes/SHOP_REDACT", "parentId": "root", "path": "SHOP_REDACT", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/SHOP_REDACT-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/auth.login": { "id": "routes/auth.login", "parentId": "root", "path": "auth/login", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/route-BXw7Xzb6.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/components-CJ4Us95c.js", "/assets/AppProvider-B1ucjflU.js", "/assets/Page-wruexU6P.js", "/assets/Card-BKHNwIHz.js", "/assets/FormLayout-CkuomM3K.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/index-Crcs4hqE.js", "/assets/index-DjMk7jIJ.js", "/assets/context-CUwc7ova.js", "/assets/context-bB9LgXOD.js", "/assets/within-content-context-Iy9P2FMi.js"], "css": [] }, "routes/campaigns": { "id": "routes/campaigns", "parentId": "root", "path": "campaigns", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/campaigns-e8LD4ZnH.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/CampaignContext-3XUkqNZH.js", "/assets/PlanContext-BY9hTbym.js", "/assets/index-BWtVRBRF.js", "/assets/Navigation-Rq2-uA4h.js", "/assets/global-DIOG6d_h.js", "/assets/index-DjMk7jIJ.js", "/assets/index-CSX1f1C-.js", "/assets/index-Crcs4hqE.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/components-CJ4Us95c.js"], "css": [] }, "routes/campaigns.toggle-local": { "id": "routes/campaigns.toggle-local", "parentId": "routes/campaigns", "path": "toggle-local", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/campaigns.toggle-local-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/campaigns.edit.$id": { "id": "routes/campaigns.edit.$id", "parentId": "routes/campaigns", "path": "edit/:id", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/campaigns.edit._id-CWMVgUeL.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/CampaignContext-3XUkqNZH.js", "/assets/Navigation-Rq2-uA4h.js", "/assets/StepFour-h3JiGo8n.js", "/assets/index-DjMk7jIJ.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/PlanContext-BY9hTbym.js", "/assets/index-CSX1f1C-.js", "/assets/index-Crcs4hqE.js", "/assets/components-CJ4Us95c.js"], "css": [] }, "routes/campaigns.create": { "id": "routes/campaigns.create", "parentId": "routes/campaigns", "path": "create", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/campaigns.create-D0u9oa4_.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/CampaignContext-3XUkqNZH.js", "/assets/PlanContext-BY9hTbym.js", "/assets/StepFour-h3JiGo8n.js", "/assets/index-DjMk7jIJ.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/index-CSX1f1C-.js", "/assets/index-Crcs4hqE.js"], "css": [] }, "routes/campaigns.toggle": { "id": "routes/campaigns.toggle", "parentId": "routes/campaigns", "path": "toggle", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/campaigns.toggle-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/campaigns.index": { "id": "routes/campaigns.index", "parentId": "routes/campaigns", "path": "index", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/campaigns.index-DFJGBoQ6.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/CampaignContext-3XUkqNZH.js", "/assets/PlanContext-BY9hTbym.js", "/assets/Navigation-Rq2-uA4h.js", "/assets/components-CJ4Us95c.js", "/assets/index-DjMk7jIJ.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/index-CSX1f1C-.js", "/assets/index-Crcs4hqE.js"], "css": [] }, "routes/campaigns.$id": { "id": "routes/campaigns.$id", "parentId": "routes/campaigns", "path": ":id", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/campaigns._id-CL6cwD5Y.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/CampaignContext-3XUkqNZH.js", "/assets/Navigation-Rq2-uA4h.js", "/assets/index-BWtVRBRF.js", "/assets/index-DjMk7jIJ.js", "/assets/components-CJ4Us95c.js", "/assets/PlanContext-BY9hTbym.js", "/assets/index-CSX1f1C-.js", "/assets/index-Crcs4hqE.js", "/assets/_commonjsHelpers-gnU0ypJ3.js"], "css": [] }, "routes/campaigns.$id.edit": { "id": "routes/campaigns.$id.edit", "parentId": "routes/campaigns.$id", "path": "edit", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/campaigns._id.edit-D8HJhumG.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/CampaignContext-3XUkqNZH.js", "/assets/Navigation-Rq2-uA4h.js", "/assets/StepFour-h3JiGo8n.js", "/assets/index-DjMk7jIJ.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/PlanContext-BY9hTbym.js", "/assets/index-CSX1f1C-.js", "/assets/index-Crcs4hqE.js", "/assets/components-CJ4Us95c.js"], "css": [] }, "routes/test-auth": { "id": "routes/test-auth", "parentId": "root", "path": "test-auth", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/test-auth-DztJnzzW.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js"], "css": [] }, "routes/test-sync": { "id": "routes/test-sync", "parentId": "root", "path": "test-sync", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/test-sync-k8nmNR2E.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js"], "css": [] }, "routes/api.test": { "id": "routes/api.test", "parentId": "root", "path": "api/test", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/api.test-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/billings": { "id": "routes/billings", "parentId": "root", "path": "billings", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/billings-CsVTVY1M.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/components-CJ4Us95c.js", "/assets/index-BWtVRBRF.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/index-Crcs4hqE.js", "/assets/index-DjMk7jIJ.js"], "css": [] }, "routes/settings": { "id": "routes/settings", "parentId": "root", "path": "settings", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/settings-O5JgIbCf.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/components-CJ4Us95c.js", "/assets/index-DjMk7jIJ.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/index-Crcs4hqE.js"], "css": [] }, "routes/tutorial": { "id": "routes/tutorial", "parentId": "root", "path": "tutorial", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/tutorial-CQs_cOyo.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/Navigation-Rq2-uA4h.js", "/assets/index-BWtVRBRF.js", "/assets/global-DIOG6d_h.js", "/assets/index-DjMk7jIJ.js", "/assets/components-CJ4Us95c.js", "/assets/index-Crcs4hqE.js", "/assets/_commonjsHelpers-gnU0ypJ3.js"], "css": [] }, "routes/webhooks": { "id": "routes/webhooks", "parentId": "root", "path": "webhooks", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/webhooks-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/webhooks.app.uninstalled": { "id": "routes/webhooks.app.uninstalled", "parentId": "routes/webhooks", "path": "app/uninstalled", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/webhooks.app.uninstalled-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/webhooks.save-result": { "id": "routes/webhooks.save-result", "parentId": "routes/webhooks", "path": "save-result", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/webhooks.save-result-CiNjbAlT.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/_commonjsHelpers-gnU0ypJ3.js"], "css": [] }, "routes/webhooks.save-email": { "id": "routes/webhooks.save-email", "parentId": "routes/webhooks", "path": "save-email", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/webhooks.save-email-CiNjbAlT.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/_commonjsHelpers-gnU0ypJ3.js"], "css": [] }, "routes/pricing": { "id": "routes/pricing", "parentId": "root", "path": "pricing", "index": void 0, "caseSensitive": void 0, "hasAction": true, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/pricing-DWq71Qsa.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/Navigation-Rq2-uA4h.js", "/assets/PlanContext-BY9hTbym.js", "/assets/index-DjMk7jIJ.js", "/assets/components-CJ4Us95c.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/index-Crcs4hqE.js"], "css": [] }, "routes/_index": { "id": "routes/_index", "parentId": "root", "path": void 0, "index": true, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/route-Dv26pF8Q.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/global-DIOG6d_h.js", "/assets/components-CJ4Us95c.js", "/assets/index-BWtVRBRF.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/index-Crcs4hqE.js", "/assets/index-DjMk7jIJ.js"], "css": [] }, "routes/auth.$": { "id": "routes/auth.$", "parentId": "root", "path": "auth/*", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/auth._-l0sNRNKZ.js", "imports": [], "css": [] }, "routes/health": { "id": "routes/health", "parentId": "root", "path": "health", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/health-DOPKB9wf.js", "imports": [], "css": [] }, "routes/index": { "id": "routes/index", "parentId": "root", "path": "index", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/index-C6d-v1ok.js", "imports": [], "css": [] }, "routes/ping": { "id": "routes/ping", "parentId": "root", "path": "ping", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/ping-DOPKB9wf.js", "imports": [], "css": [] }, "routes/app": { "id": "routes/app", "parentId": "root", "path": "app", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": true, "module": "/assets/app-DseU1_Zm.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/components-CJ4Us95c.js", "/assets/AppProvider-B1ucjflU.js", "/assets/index-CSX1f1C-.js", "/assets/PlanContext-BY9hTbym.js", "/assets/CampaignContext-3XUkqNZH.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/global-DIOG6d_h.js", "/assets/index-DjMk7jIJ.js", "/assets/index-Crcs4hqE.js", "/assets/context-CUwc7ova.js", "/assets/context-bB9LgXOD.js"], "css": [] }, "routes/app.campaigns.new": { "id": "routes/app.campaigns.new", "parentId": "routes/app", "path": "campaigns/new", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/app.campaigns.new-dR_jAc2z.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/index-CSX1f1C-.js", "/assets/AdminLayout-B1prxWqz.js", "/assets/index-DjMk7jIJ.js", "/assets/context-CUwc7ova.js", "/assets/Page-wruexU6P.js", "/assets/Layout-DHGRd_F1.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/index-Crcs4hqE.js", "/assets/within-content-context-Iy9P2FMi.js", "/assets/context-bB9LgXOD.js", "/assets/Link-7a-A0W0-.js"], "css": [] }, "routes/app.integrations": { "id": "routes/app.integrations", "parentId": "routes/app", "path": "integrations", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/app.integrations-CiNjbAlT.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/_commonjsHelpers-gnU0ypJ3.js"], "css": [] }, "routes/app.subscribers": { "id": "routes/app.subscribers", "parentId": "routes/app", "path": "subscribers", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/app.subscribers-DwKtC-u8.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/index-CSX1f1C-.js", "/assets/AdminLayout-B1prxWqz.js", "/assets/Page-wruexU6P.js", "/assets/Layout-DHGRd_F1.js", "/assets/Card-BKHNwIHz.js", "/assets/context-CUwc7ova.js", "/assets/FormLayout-CkuomM3K.js", "/assets/Select-qdInDXit.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/index-Crcs4hqE.js", "/assets/index-DjMk7jIJ.js", "/assets/within-content-context-Iy9P2FMi.js", "/assets/context-bB9LgXOD.js", "/assets/Link-7a-A0W0-.js"], "css": [] }, "routes/app.additional": { "id": "routes/app.additional", "parentId": "routes/app", "path": "additional", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/app.additional-BcuCR0vm.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-CSX1f1C-.js", "/assets/Page-wruexU6P.js", "/assets/Layout-DHGRd_F1.js", "/assets/Card-BKHNwIHz.js", "/assets/Link-7a-A0W0-.js", "/assets/index-BWtVRBRF.js", "/assets/index-Crcs4hqE.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/context-CUwc7ova.js", "/assets/within-content-context-Iy9P2FMi.js"], "css": [] }, "routes/app.game.$id": { "id": "routes/app.game.$id", "parentId": "routes/app", "path": "game/:id", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/app.game._id-CiNjbAlT.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/_commonjsHelpers-gnU0ypJ3.js"], "css": [] }, "routes/app.game.add": { "id": "routes/app.game.add", "parentId": "routes/app", "path": "game/add", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/app.game.add-CiNjbAlT.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/_commonjsHelpers-gnU0ypJ3.js"], "css": [] }, "routes/app.billing": { "id": "routes/app.billing", "parentId": "routes/app", "path": "billing", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/app.billing-Dd8Xs631.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/Page-wruexU6P.js", "/assets/Layout-DHGRd_F1.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/context-CUwc7ova.js", "/assets/index-Crcs4hqE.js"], "css": [] }, "routes/app.revenue": { "id": "routes/app.revenue", "parentId": "routes/app", "path": "revenue", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/app.revenue-CVyKQBFi.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/index-BWtVRBRF.js", "/assets/index-CSX1f1C-.js", "/assets/AdminLayout-B1prxWqz.js", "/assets/Page-wruexU6P.js", "/assets/Card-BKHNwIHz.js", "/assets/Select-qdInDXit.js", "/assets/Layout-DHGRd_F1.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/index-Crcs4hqE.js", "/assets/index-DjMk7jIJ.js", "/assets/within-content-context-Iy9P2FMi.js", "/assets/context-CUwc7ova.js", "/assets/context-bB9LgXOD.js", "/assets/Link-7a-A0W0-.js"], "css": [] }, "routes/app._index": { "id": "routes/app._index", "parentId": "routes/app", "path": void 0, "index": true, "caseSensitive": void 0, "hasAction": false, "hasLoader": true, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/app._index-DdhLquwv.js", "imports": ["/assets/jsx-runtime-DlxonYWr.js", "/assets/Navigation-Rq2-uA4h.js", "/assets/PlanContext-BY9hTbym.js", "/assets/index-BWtVRBRF.js", "/assets/components-CJ4Us95c.js", "/assets/index-DjMk7jIJ.js", "/assets/_commonjsHelpers-gnU0ypJ3.js", "/assets/index-Crcs4hqE.js"], "css": [] } }, "url": "/assets/manifest-701969fc.js", "version": "701969fc" };
const mode = "production";
const assetsBuildDirectory = "build/client";
const basename = "/";
const future = { "v3_fetcherPersist": true, "v3_relativeSplatPath": true, "v3_throwAbortReason": true, "v3_routeConfig": true, "v3_singleFetch": false, "v3_lazyRouteDiscovery": true, "unstable_optimizeDeps": false };
const isSpaMode = false;
const publicPath = "/";
const entry = { module: entryServer };
const routes = {
  "root": {
    id: "root",
    parentId: void 0,
    path: "",
    index: void 0,
    caseSensitive: void 0,
    module: route0
  },
  "routes/api.update-campaign-metafields": {
    id: "routes/api.update-campaign-metafields",
    parentId: "root",
    path: "api/update-campaign-metafields",
    index: void 0,
    caseSensitive: void 0,
    module: route1
  },
  "routes/api.sync-campaign-metafields": {
    id: "routes/api.sync-campaign-metafields",
    parentId: "root",
    path: "api/sync-campaign-metafields",
    index: void 0,
    caseSensitive: void 0,
    module: route2
  },
  "routes/webhooks[.]app[.]uninstalled": {
    id: "routes/webhooks[.]app[.]uninstalled",
    parentId: "root",
    path: "webhooks.app.uninstalled",
    index: void 0,
    caseSensitive: void 0,
    module: route3
  },
  "routes/api.direct-campaign-data": {
    id: "routes/api.direct-campaign-data",
    parentId: "root",
    path: "api/direct-campaign-data",
    index: void 0,
    caseSensitive: void 0,
    module: route4
  },
  "routes/api.direct-campaign-save": {
    id: "routes/api.direct-campaign-save",
    parentId: "root",
    path: "api/direct-campaign-save",
    index: void 0,
    caseSensitive: void 0,
    module: route5
  },
  "routes/api.get-active-campaign": {
    id: "routes/api.get-active-campaign",
    parentId: "root",
    path: "api/get-active-campaign",
    index: void 0,
    caseSensitive: void 0,
    module: route6
  },
  "routes/CUSTOMERS_DATA_REQUEST": {
    id: "routes/CUSTOMERS_DATA_REQUEST",
    parentId: "root",
    path: "CUSTOMERS_DATA_REQUEST",
    index: void 0,
    caseSensitive: void 0,
    module: route7
  },
  "routes/api.test-db-connection": {
    id: "routes/api.test-db-connection",
    parentId: "root",
    path: "api/test-db-connection",
    index: void 0,
    caseSensitive: void 0,
    module: route8
  },
  "routes/api.test-subscription": {
    id: "routes/api.test-subscription",
    parentId: "root",
    path: "api/test-subscription",
    index: void 0,
    caseSensitive: void 0,
    module: route9
  },
  "routes/api.update-metafields": {
    id: "routes/api.update-metafields",
    parentId: "root",
    path: "api/update-metafields",
    index: void 0,
    caseSensitive: void 0,
    module: route10
  },
  "routes/api.debug-metafeilds": {
    id: "routes/api.debug-metafeilds",
    parentId: "root",
    path: "api/debug-metafeilds",
    index: void 0,
    caseSensitive: void 0,
    module: route11
  },
  "routes/api.active-campaign": {
    id: "routes/api.active-campaign",
    parentId: "root",
    path: "api/active-campaign",
    index: void 0,
    caseSensitive: void 0,
    module: route12
  },
  "routes/api.billing.current": {
    id: "routes/api.billing.current",
    parentId: "root",
    path: "api/billing/current",
    index: void 0,
    caseSensitive: void 0,
    module: route13
  },
  "routes/api.embedded-script": {
    id: "routes/api.embedded-script",
    parentId: "root",
    path: "api/embedded-script",
    index: void 0,
    caseSensitive: void 0,
    module: route14
  },
  "routes/api.billing.cancel": {
    id: "routes/api.billing.cancel",
    parentId: "root",
    path: "api/billing/cancel",
    index: void 0,
    caseSensitive: void 0,
    module: route15
  },
  "routes/api.billing.create": {
    id: "routes/api.billing.create",
    parentId: "root",
    path: "api/billing/create",
    index: void 0,
    caseSensitive: void 0,
    module: route16
  },
  "routes/api.direct-db-test": {
    id: "routes/api.direct-db-test",
    parentId: "root",
    path: "api/direct-db-test",
    index: void 0,
    caseSensitive: void 0,
    module: route17
  },
  "routes/api.discount-codes": {
    id: "routes/api.discount-codes",
    parentId: "root",
    path: "api/discount-codes",
    index: void 0,
    caseSensitive: void 0,
    module: route18
  },
  "routes/api.serve-campaign": {
    id: "routes/api.serve-campaign",
    parentId: "root",
    path: "api/serve-campaign",
    index: void 0,
    caseSensitive: void 0,
    module: route19
  },
  "routes/api.redeem-coupon": {
    id: "routes/api.redeem-coupon",
    parentId: "root",
    path: "api/redeem-coupon",
    index: void 0,
    caseSensitive: void 0,
    module: route20
  },
  "routes/api.sync-campaign": {
    id: "routes/api.sync-campaign",
    parentId: "root",
    path: "api/sync-campaign",
    index: void 0,
    caseSensitive: void 0,
    module: route21
  },
  "routes/CUSTOMERS_REDACT": {
    id: "routes/CUSTOMERS_REDACT",
    parentId: "root",
    path: "CUSTOMERS_REDACT",
    index: void 0,
    caseSensitive: void 0,
    module: route22
  },
  "routes/api.wheel-config": {
    id: "routes/api.wheel-config",
    parentId: "root",
    path: "api/wheel-config",
    index: void 0,
    caseSensitive: void 0,
    module: route23
  },
  "routes/billing.callback": {
    id: "routes/billing.callback",
    parentId: "root",
    path: "billing/callback",
    index: void 0,
    caseSensitive: void 0,
    module: route24
  },
  "routes/api.save-result": {
    id: "routes/api.save-result",
    parentId: "root",
    path: "api/save-result",
    index: void 0,
    caseSensitive: void 0,
    module: route25
  },
  "routes/api.spin-result": {
    id: "routes/api.spin-result",
    parentId: "root",
    path: "api/spin-result",
    index: void 0,
    caseSensitive: void 0,
    module: route26
  },
  "routes/create-campaign": {
    id: "routes/create-campaign",
    parentId: "root",
    path: "create-campaign",
    index: void 0,
    caseSensitive: void 0,
    module: route27
  },
  "routes/api.save-email": {
    id: "routes/api.save-email",
    parentId: "root",
    path: "api/save-email",
    index: void 0,
    caseSensitive: void 0,
    module: route28
  },
  "routes/api.campaigns": {
    id: "routes/api.campaigns",
    parentId: "root",
    path: "api/campaigns",
    index: void 0,
    caseSensitive: void 0,
    module: route29
  },
  "routes/api.campaigns.status.$id": {
    id: "routes/api.campaigns.status.$id",
    parentId: "routes/api.campaigns",
    path: "status/:id",
    index: void 0,
    caseSensitive: void 0,
    module: route30
  },
  "routes/api.campaigns.toggle": {
    id: "routes/api.campaigns.toggle",
    parentId: "routes/api.campaigns",
    path: "toggle",
    index: void 0,
    caseSensitive: void 0,
    module: route31
  },
  "routes/api.campaigns.$id": {
    id: "routes/api.campaigns.$id",
    parentId: "routes/api.campaigns",
    path: ":id",
    index: void 0,
    caseSensitive: void 0,
    module: route32
  },
  "routes/api.db-status": {
    id: "routes/api.db-status",
    parentId: "root",
    path: "api/db-status",
    index: void 0,
    caseSensitive: void 0,
    module: route33
  },
  "routes/api.campaign": {
    id: "routes/api.campaign",
    parentId: "root",
    path: "api/campaign",
    index: void 0,
    caseSensitive: void 0,
    module: route34
  },
  "routes/SHOP_REDACT": {
    id: "routes/SHOP_REDACT",
    parentId: "root",
    path: "SHOP_REDACT",
    index: void 0,
    caseSensitive: void 0,
    module: route35
  },
  "routes/auth.login": {
    id: "routes/auth.login",
    parentId: "root",
    path: "auth/login",
    index: void 0,
    caseSensitive: void 0,
    module: route36
  },
  "routes/campaigns": {
    id: "routes/campaigns",
    parentId: "root",
    path: "campaigns",
    index: void 0,
    caseSensitive: void 0,
    module: route37
  },
  "routes/campaigns.toggle-local": {
    id: "routes/campaigns.toggle-local",
    parentId: "routes/campaigns",
    path: "toggle-local",
    index: void 0,
    caseSensitive: void 0,
    module: route38
  },
  "routes/campaigns.edit.$id": {
    id: "routes/campaigns.edit.$id",
    parentId: "routes/campaigns",
    path: "edit/:id",
    index: void 0,
    caseSensitive: void 0,
    module: route39
  },
  "routes/campaigns.create": {
    id: "routes/campaigns.create",
    parentId: "routes/campaigns",
    path: "create",
    index: void 0,
    caseSensitive: void 0,
    module: route40
  },
  "routes/campaigns.toggle": {
    id: "routes/campaigns.toggle",
    parentId: "routes/campaigns",
    path: "toggle",
    index: void 0,
    caseSensitive: void 0,
    module: route41
  },
  "routes/campaigns.index": {
    id: "routes/campaigns.index",
    parentId: "routes/campaigns",
    path: "index",
    index: void 0,
    caseSensitive: void 0,
    module: route42
  },
  "routes/campaigns.$id": {
    id: "routes/campaigns.$id",
    parentId: "routes/campaigns",
    path: ":id",
    index: void 0,
    caseSensitive: void 0,
    module: route43
  },
  "routes/campaigns.$id.edit": {
    id: "routes/campaigns.$id.edit",
    parentId: "routes/campaigns.$id",
    path: "edit",
    index: void 0,
    caseSensitive: void 0,
    module: route44
  },
  "routes/test-auth": {
    id: "routes/test-auth",
    parentId: "root",
    path: "test-auth",
    index: void 0,
    caseSensitive: void 0,
    module: route45
  },
  "routes/test-sync": {
    id: "routes/test-sync",
    parentId: "root",
    path: "test-sync",
    index: void 0,
    caseSensitive: void 0,
    module: route46
  },
  "routes/api.test": {
    id: "routes/api.test",
    parentId: "root",
    path: "api/test",
    index: void 0,
    caseSensitive: void 0,
    module: route47
  },
  "routes/billings": {
    id: "routes/billings",
    parentId: "root",
    path: "billings",
    index: void 0,
    caseSensitive: void 0,
    module: route48
  },
  "routes/settings": {
    id: "routes/settings",
    parentId: "root",
    path: "settings",
    index: void 0,
    caseSensitive: void 0,
    module: route49
  },
  "routes/tutorial": {
    id: "routes/tutorial",
    parentId: "root",
    path: "tutorial",
    index: void 0,
    caseSensitive: void 0,
    module: route50
  },
  "routes/webhooks": {
    id: "routes/webhooks",
    parentId: "root",
    path: "webhooks",
    index: void 0,
    caseSensitive: void 0,
    module: route51
  },
  "routes/webhooks.app.uninstalled": {
    id: "routes/webhooks.app.uninstalled",
    parentId: "routes/webhooks",
    path: "app/uninstalled",
    index: void 0,
    caseSensitive: void 0,
    module: route52
  },
  "routes/webhooks.save-result": {
    id: "routes/webhooks.save-result",
    parentId: "routes/webhooks",
    path: "save-result",
    index: void 0,
    caseSensitive: void 0,
    module: route53
  },
  "routes/webhooks.save-email": {
    id: "routes/webhooks.save-email",
    parentId: "routes/webhooks",
    path: "save-email",
    index: void 0,
    caseSensitive: void 0,
    module: route54
  },
  "routes/pricing": {
    id: "routes/pricing",
    parentId: "root",
    path: "pricing",
    index: void 0,
    caseSensitive: void 0,
    module: route55
  },
  "routes/_index": {
    id: "routes/_index",
    parentId: "root",
    path: void 0,
    index: true,
    caseSensitive: void 0,
    module: route56
  },
  "routes/auth.$": {
    id: "routes/auth.$",
    parentId: "root",
    path: "auth/*",
    index: void 0,
    caseSensitive: void 0,
    module: route57
  },
  "routes/health": {
    id: "routes/health",
    parentId: "root",
    path: "health",
    index: void 0,
    caseSensitive: void 0,
    module: route58
  },
  "routes/index": {
    id: "routes/index",
    parentId: "root",
    path: "index",
    index: void 0,
    caseSensitive: void 0,
    module: route59
  },
  "routes/ping": {
    id: "routes/ping",
    parentId: "root",
    path: "ping",
    index: void 0,
    caseSensitive: void 0,
    module: route60
  },
  "routes/app": {
    id: "routes/app",
    parentId: "root",
    path: "app",
    index: void 0,
    caseSensitive: void 0,
    module: route61
  },
  "routes/app.campaigns.new": {
    id: "routes/app.campaigns.new",
    parentId: "routes/app",
    path: "campaigns/new",
    index: void 0,
    caseSensitive: void 0,
    module: route62
  },
  "routes/app.integrations": {
    id: "routes/app.integrations",
    parentId: "routes/app",
    path: "integrations",
    index: void 0,
    caseSensitive: void 0,
    module: route63
  },
  "routes/app.subscribers": {
    id: "routes/app.subscribers",
    parentId: "routes/app",
    path: "subscribers",
    index: void 0,
    caseSensitive: void 0,
    module: route64
  },
  "routes/app.additional": {
    id: "routes/app.additional",
    parentId: "routes/app",
    path: "additional",
    index: void 0,
    caseSensitive: void 0,
    module: route65
  },
  "routes/app.game.$id": {
    id: "routes/app.game.$id",
    parentId: "routes/app",
    path: "game/:id",
    index: void 0,
    caseSensitive: void 0,
    module: route66
  },
  "routes/app.game.add": {
    id: "routes/app.game.add",
    parentId: "routes/app",
    path: "game/add",
    index: void 0,
    caseSensitive: void 0,
    module: route67
  },
  "routes/app.billing": {
    id: "routes/app.billing",
    parentId: "routes/app",
    path: "billing",
    index: void 0,
    caseSensitive: void 0,
    module: route68
  },
  "routes/app.revenue": {
    id: "routes/app.revenue",
    parentId: "routes/app",
    path: "revenue",
    index: void 0,
    caseSensitive: void 0,
    module: route69
  },
  "routes/app._index": {
    id: "routes/app._index",
    parentId: "routes/app",
    path: void 0,
    index: true,
    caseSensitive: void 0,
    module: route70
  }
};
export {
  serverManifest as assets,
  assetsBuildDirectory,
  basename,
  entry,
  future,
  isSpaMode,
  mode,
  publicPath,
  routes
};
